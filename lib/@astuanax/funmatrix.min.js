!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("@astuanax/funmatrix",[],e):"object"==typeof exports?exports["@astuanax/funmatrix"]=e():t["@astuanax/funmatrix"]=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var u=e[r]={i:r,l:!1,exports:{}};return t[r].call(u.exports,u,u.exports,n),u.l=!0,u.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var u in t)n.d(r,u,function(e){return t[e]}.bind(null,u));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e,n){"use strict";function r(t){const e=t.length;return 0===e?t:n([]);function n(r){return function(){return function(r,u){const o=r.concat(u);return o.length<e?n(o):t.apply(this,o)}(r,Array.prototype.slice.call(arguments))}}}n.r(e),n.d(e,"default",function(){return r})},function(t,e,n){"use strict";var r=n(0),u=n(2);e.a=Object(r.default)(function(t,e){return Object(u.a)(e)===t})},function(t,e,n){"use strict";var r;e.a=(r=function(t){return Object.prototype.toString.call(t).slice(8,-1)},function(t){return 0===arguments.length?this:r(t)})},function(t,e,n){"use strict";n.r(e);var r=n(0),u=Object(r.default)(function(t,e){let n=-1;const r=e.length,u=new Array(r);for(;++n<r;)u[n]=t(e[n],n,e);return u});function o(t){return new t.constructor}var f=n(4),a=Object(r.default)(function(t,e){const n=Object(f.a)(e);let r=-1;const u=n.length,a=o(e);for(;++r<u;)a[n[r]]=t(e[n[r]],n[r],e);return a}),i=Object(r.default)(function(t,e){const n=o(e);return e.forEach((e,r,u)=>{n.set(r,t(e,r,u))}),n}),c=Object(r.default)(function(t,e){let n=-1;const r=e.length;let u="";for(;++n<r;)u+=t(e.charAt(n),n,e);return u}),l=Object(r.default)(function(t,e){let n=[];for(let r=e.next();!0!==r.done;r=e.next())n.push(t(e.value()));return n}),s=n(2),d=n(1);const p=Object(d.a)("Function");e.default=Object(r.default)(function(t,e){switch(Object(s.a)(e)){case"Function":return Object(r.default)(function(){return t.call(this,e.apply(this,arguments))});case"Object":return a(t,e);case"String":return c(t,e);case"Map":return i(t,e);case"Array":return u(t,e);default:return p(e[Symbol.iterator])?l(t,e):u(t,e)}})},function(t,e,n){"use strict";var r=n(0);e.a=Object(r.default)(function(t){return Object.keys(Object(t))})},function(t,e,n){"use strict";n.r(e);var r=n(0),u=Object(r.default)(function(t,e,n){let r=-1;const u=n.length;let o=e;for(;++r<u;)o=t(o,n[r],r,n);return o}),o=n(4),f=Object(r.default)(function(t,e,n){const r=Object(o.a)(n);let u=-1;const f=r.length;let a=Object(e);for(;++u<f;)a=t(a,n[r[u]],r[u],n);return a}),a=n(2);e.default=Object(r.default)(function(t,e,n){return{Object:f,Array:u}[Object(a.a)(n)](t,e,n)})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=p(n(0)),u=p(n(3)),o=p(n(5)),f=p(n(14)),a=p(n(7)),i=p(n(8)),c=p(n(9)),l=p(n(11)),s=p(n(12)),d=p(n(13));function p(t){return t&&t.__esModule?t:{default:t}}var v=function(t){this.__value=t};v.prototype.type="Matrix",v.prototype.precision=4,v.prototype.setPrecision=function(t){this.precision=t},v.prototype.isSymmetric=function(){var t=this.__value,e=v.transpose(this).__value;return(0,f.default)(t,e)},v.prototype.isOrthogonal=function(){var t=this.dot(this.transpose()),e=this.identity();return(0,f.default)(t,e)},v.prototype.getCols=function(){return this.__value[0].length},v.prototype.equals=function(t){return(0,f.default)(this.__value,t.__value||t)},v.prototype.getRows=function(){return this.__value.length},v.prototype.getShape=function(){return[this.getRows(),this.getCols()]},v.of=function(t){return t instanceof v?t:this instanceof v?(this.__value=t,this):new v(t)},v.prototype.map=function(t){return v.of((0,u.default)(t)(this.__value))},v.map=(0,r.default)(function(t,e){return v.of(e).map(t)}),v.prototype.fold=function(t){return v.of((0,o.default)(t,[])(this.__value))},v.fold=(0,r.default)(function(t,e){return v.of(e).fold(t)}),v.prototype.ap=function(t){return v.of(t).map(this.__value)},v.ap=(0,r.default)(function(t,e){return v.of(t).ap(e)}),v.prototype.concat=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a.default;return v.of(this).map(e(t))},v.concat=(0,r.default)(function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a.default;return v.of(t).map(n(e))}),v.prototype.empty=function(){return v.of(this).map(i.default)},v.empty=(0,r.default)(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(0,d.default)(t,e);return v.of(n).map(i.default)}),v.prototype.identity=function(){return v.of(l.default).ap(this)},v.identity=function(t,e){var n=(0,d.default)(t,e);return v.of(l.default).ap(n)},v.prototype.combine=function(t){return v.of(this).concat(v.of(t),a.default)},v.combine=function(t,e){return v.of(t).concat(v.of(e),a.default)},v.prototype.dot=function(t){return v.of(this).concat(v.of(t),(0,c.default)(this.precision))},v.dot=function(t,e){return v.of(t).dot(v.of(e))},v.prototype.fill=function(t){return v.of(this).map((0,u.default)(function(e){return t(e)}))},v.prototype.zeros=function(){return v.of(this).fill(function(t){return 0})},v.zeros=function(t,e){var n=(0,d.default)(t,e);return v.of(n).fill(function(t){return 0})},v.prototype.ones=function(){return v.of(this).fill(function(t){return 1})},v.ones=function(t,e){var n=(0,d.default)(t,e);return v.of(n).fill(function(t){return 1})},v.prototype.random=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return 2*Math.random()-1};return v.of(this).fill(t)},v.random=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return 2*Math.random()-1},e=arguments[1],n=arguments[2],r=(0,d.default)(e,n);return v.of(r).fill(t)},v.prototype.toArray=function(){return this.__value.map(function(t){return t.map(function(t){return t})})},v.prototype.clone=function(){return v.fromArray(this.__value)},v.fromArray=function(t){return v.of((0,u.default)(function(t){return(0,u.default)(function(t){return t})(t)})(t))},v.prototype.transpose=function(){return v.of((0,o.default)(s.default,[],this.__value))},v.transpose=function(t){return v.of(t).transpose()},v.prototype.add=function(t){if(t instanceof v){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot add");return this.map(function(e,n){return(0,u.default)(function(e,r){return e+t.__value[n][r]})(e)})}return this.map((0,u.default)(function(e){return e+t}))},v.prototype.subtract=function(t){if(t instanceof v){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot subtract");return this.map(function(e,n){return(0,u.default)(function(e,r){return e-t.__value[n][r]})(e)})}return this.map((0,u.default)(function(e){return e-t}))},v.prototype.multiply=function(t){if(t instanceof v){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw console.log("Use static method 'dot' to do matrix multiplication"),new Error("Matrices do not match, cannot create hadamard product");return this.map(function(e,n){return(0,u.default)(function(e,r){return e*t.__value[n][r]})(e)})}return this.map((0,u.default)(function(e){return e*t}))},v.prototype.additiveinverse=function(){return v.of(this).multiply(-1)},v.prototype.hadamard=function(t){return v.of(this).multiply(t)},v.prototype.lu=function(){for(var t=this.getRows(),e=this.clone(),n=this.zeros(),r=this.zeros(),u=0;u<t;++u){if(Math.abs(e.__value[u][u])<1e-6)throw Error("Cannot proceed without a row exchange");n.__value[u][u]=1;for(var o=u+1;o<t;++o){n.__value[o][u]=e.__value[o][u]/e.__value[u][u];for(var f=u+1;f<t;++f)e.__value[o][f]=e.__value[o][f]-n.__value[o][u]*e.__value[u][f]}for(var a=u;a<t;++a)r.__value[u][a]=e.__value[u][a]}return[n,r]},v.prototype.rref=function(){for(var t=0,e=this.clone(),n=0;n<this.getRows();++n){if(this.getCols()<=t)return e;for(var r=n;0===e.__value[r][t];)if(++r,this.getRows()===r&&(r=n,++t,this.getCols()===t))return e;var u=e.__value[r];e.__value[r]=e.__value[n],e.__value[n]=u;for(var o=e.__value[n][t],f=0;f<this.getCols();++f)e.__value[n][f]/=o;for(var a=0;a<this.getRows();++a)if(a!==n){o=e.__value[a][t];for(var i=0;i<this.getCols();++i)e.__value[a][i]-=o*e.__value[n][i]}t++}return e},v.prototype.solve=function(t){for(var e=this.clone().lu(),n=e[0],r=e[1],u=this.getRows(),o=0,f=[],a=[],i=0;i<u;++i){for(var c=0;c<i;++c)o+=n.__value[i][c]*f[c];f[i]=t[i]-o,o=0}for(var l=u-1;l>-1;--l){for(var s=0,d=l+1;d<u;++d)s+=r.__value[l][d]*a[d];a[l]=(f[l]-s)/r.__value[l][l]}return a},v.prototype.inverse=function(){var t=this.clone(),e=t.identity(),n=t.concat(e).rref().__value.reduce(function(t,e,n){var r=e.length/2;return t.push(e.slice(r,e.length)),t},[]);return v.of(n)},v.prototype.rank=function(){for(var t=this.rref(),e=0,n=0;n<t.getCols();++n)e+=t.__value[n][n];return e},v.prototype.dimension=function(){return this.rank()};var _=v;e.default=_,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=o(n(0)),u=o(n(15));function o(t){return t&&t.__esModule?t:{default:t}}var f=(0,r.default)(function(t,e,n){return(0,u.default)(e,t.__value[n])});e.default=f,t.exports=e.default},function(t,e,n){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var u=(0,((r=n(0))&&r.__esModule?r:{default:r}).default)(function(t){return[]});e.default=u,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=a(n(0)),u=a(n(5)),o=a(n(3)),f=a(n(10));function a(t){return t&&t.__esModule?t:{default:t}}var i=(0,r.default)(function(t,e,n){return(0,o.default)(function(r,o){return(0,u.default)(function(n,r,u){return n+=(0,f.default)(r*e.__value[u][o],t)},0)(n)})(e.__value[0])});e.default=i,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return Number(Math.round(t+"e"+e)+"e-"+e)},t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,u=(r=n(3))&&r.__esModule?r:{default:r};e.default=function(t,e){return(0,u.default)(function(t,n){return 1*(e===n)})(t)},t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(3));function u(t){return t&&t.__esModule?t:{default:t}}var o=(0,u(n(0)).default)(function(t,e){return(0,r.default)(function(n,r){return(t[r]||[]).concat(e[r])})(e)});e.default=o,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function(t,e){return Array.apply(null,Array(t)).map(function(t){return Array.apply(null,Array(e))})},t.exports=e.default},function(t,e,n){"use strict";n.r(e);var r=n(0);function u(t){return!(null==t)}var o=n(1),f=Object(o.a)("Number"),a=Object(r.default)(function(t,e){return t&&e});function i(t){return a(f(t),isNaN(t))}var c=Object(r.default)(function(t,e){return 0===t&&0===e?1/t==1/e:t===e||!(!i(t)||!i(e))}),l=n(2),s=Object(r.default)(function(t){return!t}),d=Object(r.default)(function(t,e){return t||e}),p=Object(o.a)("Object"),v=Object(o.a)("Array"),_=Object(o.a)("Boolean"),h=Object(o.a)("String"),y=Object(o.a)("Date"),b=Object(r.default)(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(s(j(t[n],e[n])))return!1;return!0}),g=Object(r.default)((t,e)=>{for(let n in t)if(s(j(t[n],e[n])))return!1;for(let n in e)if(s(u(t[n]))&&u(e[n]))return!1;return!0}),j=e.default=Object(r.default)(function(t,e){return!!c(t,e)||Object(l.a)(t)===Object(l.a)(e)&&(!d(s(u(t)),s(u(e)))&&(t.constructor===e.constructor&&(h(t)||_(t)||f(t)||y(t)?c(t.valueOf(),e.valueOf()):v(t)?b(t,e):!!p(t)&&g(t,e))))})},function(t,e,n){"use strict";n.r(e);var r=n(0),u=Object(r.default)(function(t,e){return Array.prototype.concat(t,e)});function o(t,e){return String(t)+String(e)}var f=n(2);e.default=Object(r.default)(function(t,e){return{String:o,Array:u}[Object(f.a)(t)](t,e)})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,