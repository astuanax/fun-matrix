!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("@astuanax/funmatrix",[],e):"object"==typeof exports?exports["@astuanax/funmatrix"]=e():t["@astuanax/funmatrix"]=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var u=e[n]={i:n,l:!1,exports:{}};return t[n].call(u.exports,u,u.exports,r),u.l=!0,u.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var u in t)r.d(n,u,function(e){return t[e]}.bind(null,u));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=8)}([function(t,e,r){"use strict";function n(t){const e=t.length;return 0===e?t:r([]);function r(n){return function(){return function(n,u){const o=n.concat(u);return o.length<e?r(o):t.apply(this,o)}(n,Array.prototype.slice.call(arguments))}}}r.r(e),r.d(e,"default",function(){return n})},function(t,e,r){"use strict";var n=r(0),u=r(2);e.a=Object(n.default)(function(t,e){return Object(u.a)(e)===t})},function(t,e,r){"use strict";var n;e.a=(n=function(t){return Object.prototype.toString.call(t).slice(8,-1)},function(t){return 0===arguments.length?this:n(t)})},function(t,e,r){"use strict";r.r(e);var n=r(0);e.default=Object(n.default)(function(t){return!t})},function(t,e,r){"use strict";r.r(e);var n=r(0),u=Object(n.default)(function(t,e){let r=-1;const n=e.length,u=new Array(n);for(;++r<n;)u[r]=t(e[r],r,e);return u});function o(t){return new t.constructor}var a=r(5),i=Object(n.default)(function(t,e){const r=Object(a.a)(e);let n=-1;const u=r.length,i=o(e);for(;++n<u;)i[r[n]]=t(e[r[n]],r[n],e);return i}),f=Object(n.default)(function(t,e){const r=o(e);return e.forEach((e,n,u)=>{r.set(n,t(e,n,u))}),r}),c=Object(n.default)(function(t,e){let r=-1;const n=e.length;let u="";for(;++r<n;)u+=t(e.charAt(r),r,e);return u}),l=Object(n.default)(function(t,e){let r=[];for(let n=e.next();!0!==n.done;n=e.next())r.push(t(e.value()));return r}),s=r(2),d=r(1);const p=Object(d.a)("Function");e.default=Object(n.default)(function(t,e){switch(Object(s.a)(e)){case"Function":return Object(n.default)(function(){return t.call(this,e.apply(this,arguments))});case"Object":return i(t,e);case"String":return c(t,e);case"Map":return f(t,e);case"Array":return u(t,e);default:return p(e[Symbol.iterator])?l(t,e):u(t,e)}})},function(t,e,r){"use strict";var n=r(0);e.a=Object(n.default)(function(t){return Object.keys(Object(t))})},function(t,e,r){"use strict";var n=r(0);e.a=Object(n.default)(function(t,e,r){let n=-1;const u=r.length;let o=e;for(;++n<u;)o=t(o,r[n],n,r);return o})},function(t,e,r){"use strict";r.r(e);var n=r(0),u=r(6),o=r(5),a=Object(n.default)(function(t,e,r){const n=Object(o.a)(r);let u=-1;const a=n.length;let i=Object(e);for(;++u<a;)i=t(i,r[n[u]],n[u],r);return i}),i=r(2);e.default=Object(n.default)(function(t,e,r){return{Object:a,Array:u.a}[Object(i.a)(r)](t,e,r)})},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=b(r(0)),u=b(r(4)),o=b(r(7)),a=b(r(9)),i=b(r(10)),f=b(r(11)),c=b(r(20)),l=b(r(3)),s=b(r(12)),d=b(r(13)),p=b(r(14)),v=b(r(16)),_=b(r(17)),h=b(r(18)),y=b(r(19));function b(t){return t&&t.__esModule?t:{default:t}}var g=function(t){this.__value=t};g.of=function(t){return t instanceof g?t:this instanceof g?(this.__value=t,this):new g(t)},g.prototype.type="Matrix",g.prototype.precision=4,g.prototype.setPrecision=function(t){this.precision=t},g.prototype.isSymmetric=function(){var t=this.__value,e=g.transpose(this).__value;return(0,c.default)(t,e)},g.prototype.isSquare=function(){return(0,c.default)(this.getCols(),this.getRows())},g.prototype.isOrthogonal=function(){var t=this.dot(this.transpose()),e=this.identity();return(0,c.default)(t,e)},g.prototype.getCols=function(){return this.__value[0].length},g.prototype.equals=function(t){return(0,c.default)(this.__value,t.__value||t)},g.prototype.getRows=function(){return this.__value.length},g.prototype.getShape=function(){return[this.getRows(),this.getCols()]},g.prototype.map=function(t){return g.of((0,u.default)(t)(this.__value))},g.map=(0,n.default)(function(t,e){return g.of(e).map(t)}),g.prototype.fold=function(t){return g.of((0,o.default)(t,[])(this.__value))},g.fold=(0,n.default)(function(t,e){return g.of(e).fold(t)}),g.prototype.ap=function(t){return g.of(t).map(this.__value)},g.ap=(0,n.default)(function(t,e){return g.of(t).ap(e)}),g.prototype.concat=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:s.default;return g.of(this).map(e(t))},g.concat=(0,n.default)(function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:s.default;return g.of(t).map(r(e))}),g.prototype.empty=function(){return g.of(this).map(d.default)},g.empty=(0,n.default)(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(0,h.default)(t,e);return g.of(r).map(d.default)}),g.prototype.identity=function(){return g.of(v.default).ap(this)},g.identity=(0,n.default)(function(t,e){var r=(0,h.default)(t,e);return g.of(v.default).ap(r)}),g.prototype.combine=function(t){return g.of(this).concat(g.of(t),s.default)},g.combine=(0,n.default)(function(t,e){return g.of(t).concat(g.of(e),s.default)}),g.prototype.dot=function(t){return g.of(this).concat(g.of(t),(0,p.default)(this.precision))},g.dot=(0,n.default)(function(t,e){return g.of(t).dot(g.of(e))}),g.prototype.fill=function(t){return g.of(this).map((0,u.default)(function(e){return t(e)}))},g.prototype.zeros=function(){return g.of(this).fill(function(t){return 0})},g.zeros=function(t,e){var r=(0,h.default)(t,e);return g.of(r).fill(function(t){return 0})},g.prototype.ones=function(){return g.of(this).fill(function(t){return 1})},g.ones=function(t,e){var r=(0,h.default)(t,e);return g.of(r).fill(function(t){return 1})},g.prototype.random=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return 2*Math.random()-1};return g.of(this).fill(t)},g.random=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return 2*Math.random()-1},e=arguments[1],r=arguments[2],n=(0,h.default)(e,r);return g.of(n).fill(t)},g.prototype.toArray=function(){return this.__value.map(function(t){return t.map(function(t){return t})})},g.prototype.clone=function(){var t=g.fromArray(this.__value);return t.setPrecision(this.precision),t},g.fromArray=function(t){return g.of((0,u.default)(function(t){return(0,u.default)(function(t){return t})(t)})(t))},g.prototype.transpose=function(){return g.of((0,o.default)(_.default,[],this.__value))},g.transpose=function(t){return g.of(t).transpose()},g.prototype.add=function(t){if(t instanceof g){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot add");return this.map(function(e,r){return(0,u.default)(function(e,n){return e+t.__value[r][n]})(e)})}return this.map((0,u.default)(function(e){return e+t}))},g.prototype.subtract=function(t){if(t instanceof g){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot subtract");return this.map(function(e,r){return(0,u.default)(function(e,n){return e-t.__value[r][n]})(e)})}return this.map((0,u.default)(function(e){return e-t}))},g.prototype.multiply=function(t){if(t instanceof g){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw console.log("Use static method 'dot' to do matrix multiplication"),new Error("Matrices do not match, cannot create hadamard product");return this.map(function(e,r){return(0,u.default)(function(e,n){return e*t.__value[r][n]})(e)})}return this.map((0,u.default)(function(e){return e*t}))},g.prototype.additiveinverse=function(){return g.of(this).multiply(-1)},g.prototype.hadamard=function(t){return g.of(this).multiply(t)},g.prototype.lu=function(){for(var t=this.getRows(),e=this.clone(),r=this.zeros(),n=this.zeros(),u=0;u<t;++u){if(Math.abs(e.__value[u][u])<1e-6)throw Error("Cannot proceed without a row exchange");r.__value[u][u]=1;for(var o=u+1;o<t;++o){r.__value[o][u]=e.__value[o][u]/e.__value[u][u];for(var a=u+1;a<t;++a)e.__value[o][a]=e.__value[o][a]-r.__value[o][u]*e.__value[u][a]}for(var i=u;i<t;++i)n.__value[u][i]=e.__value[u][i]}return[r,n]},g.prototype.rref=function(){for(var t=0,e=this.clone(),r=0;r<this.getRows();++r){if(this.getCols()<=t)return e;for(var n=r;0===e.__value[n][t];)if(++n,this.getRows()===n&&(n=r,++t,this.getCols()===t))return e;var u=e.__value[n];e.__value[n]=e.__value[r],e.__value[r]=u;for(var o=e.__value[r][t],a=0;a<this.getCols();++a)e.__value[r][a]/=o;for(var i=0;i<this.getRows();++i)if(i!==r){o=e.__value[i][t];for(var f=0;f<this.getCols();++f)e.__value[i][f]-=o*e.__value[r][f]}t++}return e},g.prototype.solve=function(t){var e=this.lu(),r=e[0],n=e[1],u=this.getRows();return(0,y.default)(u,r,n,t)},g.prototype.inverse=function(){var t=this.clone(),e=t.identity(),r=t.concat(e).rref().__value.reduce(function(t,e,r){var n=e.length/2;return t.push(e.slice(n,e.length)),t},[]);return g.of(r)},g.prototype.rank=function(){for(var t=this.rref(),e=0,r=0;r<t.getCols();++r)e+=t.__value[r][r];return e},g.prototype.dimension=function(){return this.rank()},g.prototype.diag=function(){return(0,o.default)(function(t,e,r){return t.concat(e[r])})([])(this.__value)},g.diag=function(t){return g.of(t).diag()},g.prototype.diagproduct=function(){return(0,o.default)(function(t,e,r){return t*=e[r]})(1)(this.__value)},g.diagproduct=function(t){return g.of(t).diagproduct()},g.prototype.sum=function(){return(0,o.default)(function(t,e){return t+=(0,o.default)(function(t,e){return t+e})(0)(e)})(0)(this.__value)},g.sum=function(t){return g.of(t).sum()},g.prototype.kronecker=function(t){for(var e=this.getRows(),r=this.getCols(),n=t.getRows(),u=t.getCols(),o=this.__value,a=t.__value,i=(0,h.default)(e*n,r*u),f=0;f<e;f++)for(var c=0;c<r;c++)for(var l=0;l<n;l++)for(var s=0;s<u;s++)i[n*f+l][u*c+s]=o[f][c]*a[l][s];return g.of(i)},g.kronecker=function(t,e){return g.of(t).kronecker(e)},g.prototype.determinant=function(){if(this.isSquare()){if(2===this.getCols()){var t=this.__value[0][0],e=this.__value[0][1],r=this.__value[1][0];return t*this.__value[1][1]-e*r}var n=this.lu();return Number(n[0].diagproduct())*Number(n[1].diagproduct())}throw Error("The Matrix needs to be a square Matrix to calculate the determinant")},g.determinant=function(t){return g.of(t).determinant()},g.prototype.max=function(){return(0,f.default)(a.default,[].concat.apply([],this.__value))},g.prototype.min=function(){return(0,f.default)(i.default,[].concat.apply([],this.__value))},g.prototype.divide=function(t){if(t instanceof g){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot create division");if((0,l.default)(t.isSquare()))throw new Error("Matrix is not square, cannot create inverse");var e=t.inverse();return this.dot(e)}return this.multiply(1/t)};var j=g;e.default=j,t.exports=e.default},function(t,e,r){"use strict";r.r(e);var n=r(0);e.default=Object(n.default)(function(t,e){return e>t?e:t})},function(t,e,r){"use strict";r.r(e);var n=r(0);e.default=Object(n.default)(function(t,e){return e<t?e:t})},function(t,e,r){"use strict";r.r(e);var n=r(0),u=r(6);e.default=Object(n.default)(function(t,e){const r=e.slice(),n=r.shift();return Object(u.a)(t,n,r)})},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=o(r(0)),u=o(r(21));function o(t){return t&&t.__esModule?t:{default:t}}var a=(0,n.default)(function(t,e,r){return(0,u.default)(e,t.__value[r])});e.default=a,t.exports=e.default},function(t,e,r){"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var u=(0,((n=r(0))&&n.__esModule?n:{default:n}).default)(function(t){return[]});e.default=u,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=i(r(0)),u=i(r(7)),o=i(r(4)),a=i(r(15));function i(t){return t&&t.__esModule?t:{default:t}}var f=(0,n.default)(function(t,e,r){return(0,o.default)(function(n,o){return(0,u.default)(function(r,n,u){return r+=(0,a.default)(n*e.__value[u][o],t)},0)(r)})(e.__value[0])});e.default=f,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:4;return Number(Number.parseFloat(t).toPrecision(e))},t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n,u=(n=r(4))&&n.__esModule?n:{default:n};e.default=function(t,e){return(0,u.default)(function(t,r){return 1*(e===r)})(t)},t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=u(r(4));function u(t){return t&&t.__esModule?t:{default:t}}var o=(0,u(r(0)).default)(function(t,e){return(0,n.default)(function(r,n){return(t[n]||[]).concat(e[n])})(e)});e.default=o,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function(t,e){return Array.apply(null,Array(t)).map(function(t){return Array.apply(null,Array(e))})},t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,r,n){var u=function(t,e,r){for(var n=0,u=[],o=0;o<t;++o){for(var a=0;a<o;++a)n+=e.__value[o][a]*u[a];u[o]=r[o]-n,n=0}return u}(t,e,n);return function(t,e,r,n){for(var u=[],o=t-1;o>-1;--o){for(var a=0,i=o+1;i<t;++i)a+=e.__value[o][i]*u[i];u[o]=(r[o]-a)/e.__value[o][o]}return u}(t,r,u)},t.exports=e.default},function(t,e,r){"use strict";r.r(e);var n=r(0);function u(t){return!(null==t)}var o=r(1),a=Object(o.a)("Number"),i=Object(n.default)(function(t,e){return t&&e});function f(t){return i(a(t),isNaN(t))}var c=Object(n.default)(function(t,e){return 0===t&&0===e?1/t==1/e:t===e||!(!f(t)||!f(e))}),l=r(2),s=r(3),d=Object(n.default)(function(t,e){return t||e}),p=Object(o.a)("Object"),v=Object(o.a)("Array"),_=Object(o.a)("Boolean"),h=Object(o.a)("String"),y=Object(o.a)("Date"),b=Object(n.default)(function(t,e){if(t.length!==e.length)return!1;for(let r=0;r<t.length;r++)if(Object(s.default)(j(t[r],e[r])))return!1;return!0}),g=Object(n.default)((t,e)=>{for(let r in t)if(Object(s.default)(j(t[r],e[r])))return!1;for(let r in e)if(Object(s.default)(u(t[r]))&&u(e[r]))return!1;return!0}),j=e.default=Object(n.default)(function(t,e){return!!c(t,e)||Object(l.a)(t)===Object(l.a)(e)&&(!d(Object(s.default)(u(t)),Object(s.default)(u(e)))&&(t.constructor===e.constructor&&(h(t)||_(t)||a(t)||y(t)?c(t.valueOf(),e.valueOf()):v(t)?b(t,e):!!p(t)&&g(t,e))))})},function(t,e,r){"use strict";r.r(e);var n=r(0),u=Object(n.default)(function(t,e){return Array.prototype.concat(t,e)});function o(t,e){return String(t)+String(e)}var a=r(2);e.default=Object(n.default)(function(t,e){return{String:o,Array:u}[Object(a.a)(t)](t,e)})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,