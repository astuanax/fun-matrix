!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("@astuanax/funmatrix",[],n):"object"==typeof exports?exports["@astuanax/funmatrix"]=n():t["@astuanax/funmatrix"]=n()}("undefined"!=typeof self?self:this,function(){return function(t){var n={};function e(r){if(n[r])return n[r].exports;var u=n[r]={i:r,l:!1,exports:{}};return t[r].call(u.exports,u,u.exports,e),u.l=!0,u.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var u in t)e.d(r,u,function(n){return t[n]}.bind(null,u));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=24)}([function(t,n,e){"use strict";function r(t){const n=t.length;return 0===n?t:e([]);function e(r){return function(){return function(r,u){const o=r.concat(u);return o.length<n?e(o):t.apply(this,o)}(r,Array.prototype.slice.call(arguments))}}}e.r(n),e.d(n,"default",function(){return r})},function(t,n,e){"use strict";var r=e(0),u=e(2);n.a=Object(r.default)(function(t,n){return Object(u.a)(n)===t})},function(t,n,e){"use strict";var r=e(3);n.a=Object(r.a)(function(t){return Object.prototype.toString.call(t).slice(8,-1)})},function(t,n,e){"use strict";function r(t){return function(n){return 0===arguments.length?this:t(n)}}e.d(n,"a",function(){return r})},function(t,n,e){"use strict";var r=e(0);n.a=Object(r.default)(function(t){return!t})},function(t,n,e){"use strict";function r(t){return!(null==t)}e.d(n,"a",function(){return r})},function(t,n,e){"use strict";function r(t){return new t.constructor}e.d(n,"a",function(){return r})},function(t,n,e){"use strict";var r=e(0);n.a=Object(r.default)(function(t){return Object.keys(Object(t))})},function(t,n,e){"use strict";e.r(n);var r=e(0),u=e(19),o=e(6),c=e(7),i=Object(r.default)(function(t,n){const e=Object(c.a)(n);let r=-1;const u=e.length,i=Object(o.a)(n);for(;++r<u;)i[e[r]]=t(n[e[r]],e[r],n);return i}),f=Object(r.default)(function(t,n){const e=Object(o.a)(n);return n.forEach((n,r,u)=>{e.set(r,t(n,r,u))}),e}),a=Object(r.default)(function(t,n){let e=-1;const r=n.length;let u="";for(;++e<r;)u+=t(n.charAt(e),e,n);return u}),l=Object(r.default)(function(t,n){let e=[];for(let r=n.next();!0!==r.done;r=n.next())e.push(t(n.value()));return e}),s=e(2),d=e(1);const p=Object(d.a)("Function");n.default=Object(r.default)(function(t,n){switch(Object(s.a)(n)){case"Function":return Object(r.default)(function(){return t.call(this,n.apply(this,arguments))});case"Object":return i(t,n);case"String":return a(t,n);case"Map":return f(t,n);case"Array":return Object(u.a)(t,n);default:return p(n[Symbol.iterator])?l(t,n):Object(u.a)(t,n)}})},function(t,n,e){"use strict";e.r(n);var r=e(0),u=e(23),o=e(7),c=Object(r.default)(function(t,n,e){const r=Object(o.a)(e);let u=-1;const c=r.length;let i=Object(n);for(;++u<c;)i=t(i,e[r[u]],r[u],e);return i}),i=e(2);n.default=Object(r.default)(function(t,n,e){return{Object:c,Array:u.a}[Object(i.a)(e)](t,n,e)})},function(t,n,e){"use strict";var r=e(0),u=e(18);n.a=Object(r.default)(function(t,n){return 0===t&&0===n?1/t==1/n:t===n||!(!Object(u.a)(t)||!Object(u.a)(n))})},function(t,n,e){"use strict";var r=e(1);n.a=Object(r.a)("Object")},function(t,n,e){"use strict";e.r(n);var r=e(0),u=e(8),o=Object(r.default)(function(t,n){if(n.length<t)return[];const e=Array(n.length-t+1);return Object(u.default)((e,r)=>n.slice(r,r+t),e)}),c=Object(r.default)(function(t,n){return+t+ +n}),i=Object(r.default)(function(t,n,e){let r=0;return t(function(t){return n(t,r++)},e)}),f=Object(r.default)(function(t,n,e){const r=Array.prototype.slice.call(e),u=n<0?r.length+n:n;return e[u]?(r[u]=t(r[u]),r):r}),a=Object(r.default)(function(t,n,e){return Object(u.default)(e=>n(e)?t(e):e,Array.prototype.slice.call(e))}),l=Object(r.default)(function(t,n){let e=!0;for(let r in n)if(!t(n[r])){e=!1;break}return e}),s=Object(r.default)(function(t,n){for(let e=0;e<t.length;e++)if(!t[e](n))return!1;return!0}),d=Object(r.default)(function(t){return function(){return t}}),p=e(14),b=Object(r.default)(function(t,n){let e=!1;for(let r in n)if(t(n[r])){e=!0;break}return e}),h=Object(r.default)(function(t,n){for(let e=0;e<t.length;e++)if(t[e](n))return!0;return!1}),v=e(3),O=e(1),j=e(23),y=e(19);const _=Object(O.a)("Function");var g=Object(r.default)(function(t,n){return _(t.ap)?t.ap(n):_(t)?e=>t(e)(n(e)):Object(j.a)((t,e)=>t.concat(Object(y.a)(Object(v.a)(e),n)),[],t)}),m=Object(r.default)(function(t,n){return Array.prototype.concat(t,n)});function w(t,n){return String(t)+String(n)}var M=e(2),x=Object(r.default)(function(t,n){return{String:w,Array:m}[Object(M.a)(t)](t,n)}),P=Object(r.default)(function(t,n){return x(n,[t])}),A=Object(r.default)(function(t,n){return t.apply(t,n)}),S=Object(v.a)(function(t){return Object(r.default)(function(n,e){return t(n,e)})}),C=Object(r.default)(function(t,n){return t.bind(n)}),k=e(9),N=Object(r.default)(function(t){const n=Object(v.a)(Object(r.default)(t));return Object(r.default)(function(){return Object(k.default)(g,Object(u.default)(n,arguments[0]),Array.prototype.slice.call(arguments,1))})}),R=Object(r.default)(function(t,n){return Object(O.a)("Function")(t)?function(){return t.apply(this,arguments)&&n.apply(this,arguments)}:N(p.a)(t,n)}),D=Object(r.default)(function(t){return t.apply(t,[].slice.call(arguments,1))}),F=e(4);var E=N(F.a);function z(){let t=Array.prototype.slice.call(arguments);return function(){let n=t[t.length-1],e=[n.apply(n,arguments)],r=t.length-2;for(;r>=0;--r){const n=t[r];e=[n.apply(n,e)]}return e[0]}}function T(t){return function(n){for(var e=0;e<t.length;e++)if(t[e][0](n))return t[e][1](n)}}var I=Object(r.default)(function(t,n){return null==n||n!=n?t:n}),J=Object(r.default)(function(t,n){return new Date(t).getTime()-new Date(n).getTime()}),q=Object(r.default)(function(t,n){return+t/+n}),K=e(6),U=e(17),B=e(5),W=d(!1),H=Object(r.default)(function(t,n){var e=[];for(let r=0;r<n.length;r++)t(n[r])&&e.push(n[r]);return e}),V=e(7),G=Object(r.default)(function(t,n){let e={};const r=Object(V.a)(n);for(let u=0;u<r.length;u++)t(n[r[u]])&&(e[r[u]]=n[r[u]]);return e}),L=Object(r.default)(function(t,n){let e=new Map,r=n.entries(),u=r.next();for(;!u.done;){const n=u.value[0],o=u.value[1];t(n,o)&&e.set(n,o),u=r.next()}return e}),Q=Object(r.default)(function(t,n){switch(Object(M.a)(n)){case"Object":return G(t,n);case"Map":return L(t,n);default:return H(t,n)}}),X=Object(r.default)(function(t,n){let e=0;const r=n.length;for(;e<r;){if(t(n[e]))return e;e+=1}return-1}),Y=Object(v.a)(function(t){return t&&t.length?t[0]:void 0});const Z=Object(O.a)("Function");var $=Object(r.default)(function(t,n){return Z(n)?function(e){return t(n(e))(e)}:Z(n.flatMap)?n.flatMap(t):Object(k.default)((n,e)=>x(n,t(e)),Object(K.a)(n),n)});function tt(t){let n=1===(e=arguments).length?[e[0]]:Array.apply(null,e);var e;return n.shift(),t.replace(/{(\d+)}/g,(t,e)=>Object(F.a)(Object(O.a)("Undefined",n[e]))?n[e]:t)}var nt=Object(r.default)(function(t,n){return Object.prototype.hasOwnProperty.call(n,t)}),et=Object(r.default)(function(t,n){return t in n}),rt=e(10);function ut(t){return t}var ot=e(15),ct=e(21),it=e(16);function ft(t){return Object(B.a)(t)&&Object(U.default)(t,Object(K.a)(t))}var at=t=>J(new Date)(t)<0,lt=Object(O.a)("Map"),st=e(18),dt=Object(O.a)("null"),pt=e(13),bt=e(11),ht=Object(O.a)("Set"),vt=e(22),Ot=Object(O.a)("undefined");function jt(t){return Object(it.a)(t)&&isFinite(t.valueOf())}let yt=function(t){return this._value=t,this};yt.prototype.isJust=function(){return!0},yt.prototype.isNothing=function(){return!1};var _t=yt,gt=Object(r.default)(function(t){return t.keys()}),mt=Object(r.default)(function(t){switch(Object(M.a)(t)){case"Map":return gt(t);default:return Object(V.a)(t)}}),wt=Object(r.default)(function(t){const n=[];for(const e in t)n.push(e);return n}),Mt=Object(v.a)(function(t){return t&&t.length?t[t.length-1]:void 0}),xt=Object(r.default)(function(t,n){return n>t?n:t});let Pt=function(){};Pt.prototype.isJust=function(){return!1},Pt.prototype.isNothing=function(){return!0};var At=Pt;let St=function(t){this.__value=t};St.of=function(t){return t instanceof St?t:this instanceof St?(this.__value=t,this):new St(t)},St.prototype.getOrElse=function(t){return this.isNothing()?t:this.__value},St.prototype.map=function(t){return this.isNothing()?St.of(null):St.of(t(this.__value))},St.prototype.ap=function(t){return t.map(this.__value)},St.prototype.isNothing=function(){return null==this.__value},St.prototype.isJust=function(){return!this.isNothing()},St.prototype.Nothing=function(){return new At},St.prototype.Just=function(){return new _t(this._value)};var Ct=St,kt=Object(r.default)(function(t,n){return Array.from(new Set(t.concat(n)))});const Nt=Object(r.default)((t,n)=>{let e=Object.assign({},t);if(Object(rt.a)(t,n))return Object.assign({},t);for(let r in n){if(!Object.prototype.hasOwnProperty.call(n,r))continue;const u=n[r],o=t[r];Object(bt.a)(u)&&Object(bt.a)(o)?e[r]=Nt(u,o):Object(ot.a)(o)?e[r]=kt(o,u):e[r]=u}return e});var Rt=Nt,Dt=Object(r.default)(function(t,n){return+t*+n}),Ft=Object(r.default)((t,n)=>{let e={};return Object.keys(t).filter(t=>-1===n.indexOf(t)).forEach(n=>{e[n]=t[n]}),e}),Et=e(20),zt=Object(r.default)(function(t,n){let e,r=n,u=0;for(;u<t.length;){if(null==r)return;e=t[u],r=Number.isInteger(e)&&e<0?r[r.length+e]:r[e],u+=1}return r}),Tt=Object(r.default)(function(t,n){const e={};let r=0;for(;r<t.length;)t[r]in n&&(e[t[r]]=n[t[r]]),r+=1;return e}),It=Object(r.default)(function(t,n){return n[t]}),Jt=Object(r.default)(function(t){return Object(k.default)(c,0,t)}),qt=d(!0),Kt=t=>t/864e5,Ut=t=>t/36e5,Bt=t=>t/6e4,Wt=t=>t/1e3;function Ht(t){return!1!==t&&Object(B.a)(t)}var Vt=Object(v.a)(function(t){const n=Object(V.a)(t),e=n.length,r=[];let u=0;for(;u<e;)r[u]=t[n[u]],u+=1;return r}),Gt=Object(r.default)(function(t,n,e){const r=[],u=Math.min(n.length,e.length);let o=0;for(o=0;o<u;o++)r.push(t(n[o],e[o]));return r}),Lt=Object(r.default)(function(t,n){return Gt(function(t,n){return[t,n]},t,n)});e.d(n,"aperture",function(){return o}),e.d(n,"add",function(){return c}),e.d(n,"addIndex",function(){return i}),e.d(n,"adjust",function(){return f}),e.d(n,"adjustWith",function(){return a}),e.d(n,"all",function(){return l}),e.d(n,"allPass",function(){return s}),e.d(n,"always",function(){return d}),e.d(n,"and",function(){return p.a}),e.d(n,"any",function(){return b}),e.d(n,"anyPass",function(){return h}),e.d(n,"ap",function(){return g}),e.d(n,"append",function(){return P}),e.d(n,"apply",function(){return A}),e.d(n,"binary",function(){return S}),e.d(n,"bind",function(){return C}),e.d(n,"both",function(){return R}),e.d(n,"call",function(){return D}),e.d(n,"complement",function(){return E}),e.d(n,"compose",function(){return z}),e.d(n,"concat",function(){return x}),e.d(n,"cond",function(){return T}),e.d(n,"curry",function(){return r.default}),e.d(n,"defaultTo",function(){return I}),e.d(n,"diffDate",function(){return J}),e.d(n,"divide",function(){return q}),e.d(n,"empty",function(){return K.a}),e.d(n,"equals",function(){return U.default}),e.d(n,"exists",function(){return B.a}),e.d(n,"F",function(){return W}),e.d(n,"filter",function(){return Q}),e.d(n,"findIndex",function(){return X}),e.d(n,"first",function(){return Y}),e.d(n,"flatMap",function(){return $}),e.d(n,"fold",function(){return k.default}),e.d(n,"formatString",function(){return tt}),e.d(n,"has",function(){return nt}),e.d(n,"hasIn",function(){return et}),e.d(n,"identical",function(){return rt.a}),e.d(n,"identity",function(){return ut}),e.d(n,"is",function(){return O.a}),e.d(n,"isArray",function(){return ot.a}),e.d(n,"isBoolean",function(){return ct.a}),e.d(n,"isDate",function(){return it.a}),e.d(n,"isEmpty",function(){return ft}),e.d(n,"isFutureDate",function(){return at}),e.d(n,"isMap",function(){return lt}),e.d(n,"isNan",function(){return st.a}),e.d(n,"isNull",function(){return dt}),e.d(n,"isNumber",function(){return pt.a}),e.d(n,"isObject",function(){return bt.a}),e.d(n,"isSet",function(){return ht}),e.d(n,"isString",function(){return vt.a}),e.d(n,"isUndefined",function(){return Ot}),e.d(n,"isValidDate",function(){return jt}),e.d(n,"Just",function(){return _t}),e.d(n,"keys",function(){return mt}),e.d(n,"keysIn",function(){return wt}),e.d(n,"last",function(){return Mt}),e.d(n,"lift",function(){return N}),e.d(n,"map",function(){return u.default}),e.d(n,"max",function(){return xt}),e.d(n,"Maybe",function(){return Ct}),e.d(n,"merge",function(){return Rt}),e.d(n,"multiply",function(){return Dt}),e.d(n,"not",function(){return F.a}),e.d(n,"Nothing",function(){return At}),e.d(n,"omit",function(){return Ft}),e.d(n,"or",function(){return Et.a}),e.d(n,"path",function(){return zt}),e.d(n,"pick",function(){return Tt}),e.d(n,"prop",function(){return It}),e.d(n,"sum",function(){return Jt}),e.d(n,"T",function(){return qt}),e.d(n,"toDay",function(){return Kt}),e.d(n,"toHour",function(){return Ut}),e.d(n,"toMinutes",function(){return Bt}),e.d(n,"toSeconds",function(){return Wt}),e.d(n,"truthy",function(){return Ht}),e.d(n,"type",function(){return M.a}),e.d(n,"union",function(){return kt}),e.d(n,"values",function(){return Vt}),e.d(n,"zip",function(){return Lt}),e.d(n,"zipWith",function(){return Gt})},function(t,n,e){"use strict";var r=e(1);n.a=Object(r.a)("Number")},function(t,n,e){"use strict";var r=e(0);n.a=Object(r.default)(function(t,n){return t&&n})},function(t,n,e){"use strict";var r=e(1);n.a=Object(r.a)("Array")},function(t,n,e){"use strict";var r=e(1);n.a=Object(r.a)("Date")},function(t,n,e){"use strict";e.r(n);var r=e(0),u=e(5),o=e(10),c=e(2),i=e(4),f=e(20),a=e(11),l=e(15),s=e(21),d=e(13),p=e(22),b=e(16),h=Object(r.default)(function(t,n){if(t.length!==n.length)return!1;for(let e=0;e<t.length;e++)if(Object(i.a)(O(t[e],n[e])))return!1;return!0}),v=Object(r.default)((t,n)=>{for(let e in t)if(Object(i.a)(O(t[e],n[e])))return!1;for(let e in n)if(Object(i.a)(Object(u.a)(t[e]))&&Object(u.a)(n[e]))return!1;return!0}),O=n.default=Object(r.default)(function(t,n){return!!Object(o.a)(t,n)||Object(c.a)(t)===Object(c.a)(n)&&(!Object(f.a)(Object(i.a)(Object(u.a)(t)),Object(i.a)(Object(u.a)(n)))&&(t.constructor===n.constructor&&(Object(p.a)(t)||Object(s.a)(t)||Object(d.a)(t)||Object(b.a)(t)?Object(o.a)(t.valueOf(),n.valueOf()):Object(l.a)(t)?h(t,n):!!Object(a.a)(t)&&v(t,n))))})},function(t,n,e){"use strict";e.d(n,"a",function(){return o});var r=e(13),u=e(14);function o(t){return Object(u.a)(Object(r.a)(t),isNaN(t))}},function(t,n,e){"use strict";var r=e(0);n.a=Object(r.default)(function(t,n){let e=-1;const r=n.length,u=new Array(r);for(;++e<r;)u[e]=t(n[e],e,n);return u})},function(t,n,e){"use strict";var r=e(0);n.a=Object(r.default)(function(t,n){return t||n})},function(t,n,e){"use strict";var r=e(1);n.a=Object(r.a)("Boolean")},function(t,n,e){"use strict";var r=e(1);n.a=Object(r.a)("String")},function(t,n,e){"use strict";var r=e(0);n.a=Object(r.default)(function(t,n,e){let r=-1;const u=e.length;let o=n;for(;++r<u;)o=t(o,e[r],r,e);return o})},function(t,n,e){t.exports=e(25)},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=v(e(0)),u=v(e(8)),o=v(e(9)),c=v(e(17)),i=v(e(26)),f=v(e(27)),a=v(e(28)),l=v(e(30)),s=v(e(31)),d=v(e(32)),p=v(e(33)),b=v(e(34)),h=v(e(35));function v(t){return t&&t.__esModule?t:{default:t}}var O=function(t,n){this.__value=t,n&&(this.gpujs=n||null)};O.of=function(t){return t instanceof O?t:this instanceof O?(this.__value=t,this):new O(t)},O.prototype.type="Matrix",O.prototype.precision=4,O.prototype.setPrecision=function(t){this.precision=t},O.prototype.isSymmetric=function(){var t=this.__value,n=O.transpose(this).__value;return(0,c.default)(t,n)},O.prototype.isSquare=function(){return(0,c.default)(this.getCols(),this.getRows())},O.prototype.isOrthogonal=function(){var t=this.dot(this.transpose()),n=this.identity();return(0,c.default)(t,n)},O.prototype.getCols=function(){return this.__value[0].length},O.prototype.equals=function(t){return(0,c.default)(this.__value,t.__value||t)},O.prototype.getRows=function(){return this.__value.length},O.prototype.getShape=function(){return[this.getRows(),this.getCols()]},O.prototype.map=function(t){return O.of((0,u.default)(t)(this.__value))},O.map=(0,r.default)(function(t,n){return O.of(n).map(t)}),O.prototype.fold=function(t){return O.of((0,o.default)(t,[])(this.__value))},O.fold=(0,r.default)(function(t,n){return O.of(n).fold(t)}),O.prototype.ap=function(t){return O.of(t).map(this.__value)},O.ap=(0,r.default)(function(t,n){return O.of(t).ap(n)}),O.prototype.concat=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i.default;return O.of(this).map(n(t))},O.concat=(0,r.default)(function(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.default;return O.of(t).map(e(n))}),O.prototype.empty=function(){return O.of(this).map(f.default)},O.empty=(0,r.default)(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,e=(0,d.default)(t,n);return O.of(e).map(f.default)}),O.prototype.identity=function(){return O.of(l.default).ap(this)},O.identity=function(t,n){var e=(0,d.default)(t,n);return O.of(l.default).ap(e)},O.prototype.combine=function(t){return O.of(this).concat(O.of(t),i.default)},O.combine=function(t,n){return O.of(t).concat(O.of(n),i.default)},O.prototype.dot=function(t){return O.of(this).concat(O.of(t),(0,a.default)(this.precision))},O.dot=function(t,n){return O.of(t).dot(O.of(n))},O.prototype.fill=function(t){return O.of(this).map((0,u.default)(function(n){return t(n)}))},O.prototype.zeros=function(){return O.of(this).fill(function(t){return 0})},O.zeros=function(t,n){var e=(0,d.default)(t,n);return O.of(e).fill(function(t){return 0})},O.prototype.ones=function(){return O.of(this).fill(function(t){return 1})},O.ones=function(t,n){var e=(0,d.default)(t,n);return O.of(e).fill(function(t){return 1})},O.prototype.random=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return 2*Math.random()-1};return O.of(this).fill(t)},O.random=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return 2*Math.random()-1},n=arguments[1],e=arguments[2],r=(0,d.default)(n,e);return O.of(r).fill(t)},O.prototype.toArray=function(){return this.__value.map(function(t){return t.map(function(t){return t})})},O.prototype.clone=function(){return O.fromArray(this.__value)},O.fromArray=function(t){return O.of((0,u.default)(function(t){return(0,u.default)(function(t){return t})(t)})(t))},O.prototype.transpose=function(){return O.of((0,o.default)(s.default,[],this.__value))},O.transpose=function(t){return O.of(t).transpose()},O.prototype.add=function(t){if(t instanceof O){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot add");return this.map(function(n,e){return(0,u.default)(function(n,r){return n+t.__value[e][r]})(n)})}return this.map((0,u.default)(function(n){return n+t}))},O.prototype.subtract=function(t){if(t instanceof O){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot subtract");return this.map(function(n,e){return(0,u.default)(function(n,r){return n-t.__value[e][r]})(n)})}return this.map((0,u.default)(function(n){return n-t}))},O.prototype.multiply=function(t){if(t instanceof O){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw console.log("Use static method 'dot' to do matrix multiplication"),new Error("Matrices do not match, cannot create hadamard product");return this.map(function(n,e){return(0,u.default)(function(n,r){return n*t.__value[e][r]})(n)})}return this.map((0,u.default)(function(n){return n*t}))},O.prototype.additiveinverse=function(){return O.of(this).multiply(-1)},O.prototype.hadamard=function(t){return O.of(this).multiply(t)},O.prototype.lu=function(){for(var t=this.getRows(),n=this.clone(),e=this.zeros(),r=this.zeros(),u=0;u<t;++u){if(Math.abs(n.__value[u][u])<1e-6)throw Error("Cannot proceed without a row exchange");e.__value[u][u]=1;for(var o=u+1;o<t;++o){e.__value[o][u]=n.__value[o][u]/n.__value[u][u];for(var c=u+1;c<t;++c)n.__value[o][c]=n.__value[o][c]-e.__value[o][u]*n.__value[u][c]}for(var i=u;i<t;++i)r.__value[u][i]=n.__value[u][i]}return[e,r]},O.prototype.rref=function(){for(var t=0,n=this.clone(),e=0;e<this.getRows();++e){if(this.getCols()<=t)return n;for(var r=e;0===n.__value[r][t];)if(++r,this.getRows()===r&&(r=e,++t,this.getCols()===t))return n;var u=n.__value[r];n.__value[r]=n.__value[e],n.__value[e]=u;for(var o=n.__value[e][t],c=0;c<this.getCols();++c)n.__value[e][c]/=o;for(var i=0;i<this.getRows();++i)if(i!==e){o=n.__value[i][t];for(var f=0;f<this.getCols();++f)n.__value[i][f]-=o*n.__value[e][f]}t++}return n},O.prototype.solve=function(t){for(var n=this.clone().lu(),e=n[0],r=n[1],u=this.getRows(),o=0,c=[],i=[],f=0;f<u;++f){for(var a=0;a<f;++a)o+=e.__value[f][a]*c[a];c[f]=t[f]-o,o=0}for(var l=u-1;l>-1;--l){for(var s=0,d=l+1;d<u;++d)s+=r.__value[l][d]*i[d];i[l]=(c[l]-s)/r.__value[l][l]}return i},O.prototype.inverse=function(){var t=this.clone(),n=t.identity(),e=t.concat(n).rref().__value.reduce(function(t,n,e){var r=n.length/2;return t.push(n.slice(r,n.length)),t},[]);return O.of(e)},O.prototype.rank=function(){for(var t=this.rref(),n=0,e=0;e<t.getCols();++e)n+=t.__value[e][e];return n},O.prototype.dimension=function(){return this.rank()},O.prototype.diag=function(){return(0,o.default)(function(t,n,e){return t.concat(n[e])})([])(this.__value)},O.diag=function(t){return O.of(t).diag()},O.prototype.diagproduct=function(){return(0,o.default)(function(t,n,e){return t*=n[e]})(1)(this.__value)},O.diagproduct=function(t){return O.of(t).diagproduct()},O.prototype.sum=function(){return(0,o.default)(function(t,n){return t+=(0,o.default)(function(t,n){return t+n})(0)(n)})(0)(this.__value)},O.sum=function(t){return O.of(t).sum()},O.prototype.kronecker=function(t){for(var n=this.getRows(),e=this.getCols(),r=t.getRows(),u=t.getCols(),o=this.__value,c=t.__value,i=(0,d.default)(n*r,e*u),f=0;f<n;f++)for(var a=0;a<e;a++)for(var l=0;l<r;l++)for(var s=0;s<u;s++)i[r*f+l][u*a+s]=o[f][a]*c[l][s];return O.of(i)},O.kronecker=function(t,n){return O.of(t).kronecker(n)},O.prototype.gpuMap=function(t){return O.of((0,p.default)(this.gpujs,t,this.__value))},O.gpuMap=(0,r.default)(function(t,n,e){return O.of(e,t).gpuMap(n)}),O.prototype.gpuFold=function(t,n){return O.of((0,b.default)(this.gpujs,t,n,this.__value))},O.prototype.gpuProduct=function(t,n,e){return O.of((0,h.default)(this.gpujs,t,n,this.__value,e.__value))};var j=O;n.default=j,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e(12),u=(0,r.curry)(function(t,n,e){return(0,r.concat)(n,t.__value[e])});n.default=u,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=(0,e(12).curry)(function(t){return[]});n.default=r,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r,u=e(12),o=(r=e(29))&&r.__esModule?r:{default:r};var c=(0,u.curry)(function(t,n,e){return(0,u.map)(function(r,c){return(0,u.fold)(function(e,r,u){return e+=(0,o.default)(r*n.__value[u][c],t)},0)(e)})(n.__value[0])});n.default=c,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(t,n){return Number(Math.round(t+"e"+n)+"e-"+n)},t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e(12);n.default=function(t,n){return(0,r.map)(function(t,e){return 1*(n===e)})(t)},t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e(12),u=(0,r.curry)(function(t,n){return(0,r.map)(function(e,r){return(t[r]||[]).concat(n[r])})(n)});n.default=u,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e(12);n.default=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,u=n||t,o=(0,r.map)(function(t){return e})(new Array(u));return(0,r.map)(function(t){return o})(new Array(t))},t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(t,n,e){return t.createKernel(n).setOutput([e.length,e[0].length])(e)},t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(t,n,e,r){var u=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};return t.createKernel(n,{constants:Object.assign({},{m:r.length,n:r[0].length},u)}).setOutput(e)(r)},t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(t,n,e,r,u){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};return t.createKernel(n,{constants:Object.assign({},{m:u.length,n:r[0].length},o)}).setOutput(e)(r,u)},t.exports=n.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,