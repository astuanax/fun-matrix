!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("@astuanax/funmatrix",[],e):"object"==typeof exports?exports["@astuanax/funmatrix"]=e():t["@astuanax/funmatrix"]=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var u=e[r]={i:r,l:!1,exports:{}};return t[r].call(u.exports,u,u.exports,n),u.l=!0,u.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var u in t)n.d(r,u,function(e){return t[e]}.bind(null,u));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e,n){"use strict";function r(t){const e=t.length;return 0===e?t:n([]);function n(r){return function(){return function(r,u){const o=r.concat(u);return o.length<e?n(o):t.apply(this,o)}(r,Array.prototype.slice.call(arguments))}}}n.r(e),n.d(e,"default",function(){return r})},function(t,e,n){"use strict";var r=n(0),u=n(2);e.a=Object(r.default)(function(t,e){return Object(u.a)(e)===t})},function(t,e,n){"use strict";var r;e.a=(r=function(t){return Object.prototype.toString.call(t).slice(8,-1)},function(t){return 0===arguments.length?this:r(t)})},function(t,e,n){"use strict";n.r(e);var r=n(0),u=Object(r.default)(function(t,e){let n=-1;const r=e.length,u=new Array(r);for(;++n<r;)u[n]=t(e[n],n,e);return u});function o(t){return new t.constructor}var a=n(4),f=Object(r.default)(function(t,e){const n=Object(a.a)(e);let r=-1;const u=n.length,f=o(e);for(;++r<u;)f[n[r]]=t(e[n[r]],n[r],e);return f}),i=Object(r.default)(function(t,e){const n=o(e);return e.forEach((e,r,u)=>{n.set(r,t(e,r,u))}),n}),c=Object(r.default)(function(t,e){let n=-1;const r=e.length;let u="";for(;++n<r;)u+=t(e.charAt(n),n,e);return u}),l=Object(r.default)(function(t,e){let n=[];for(let r=e.next();!0!==r.done;r=e.next())n.push(t(e.value()));return n}),s=n(2),d=n(1);const p=Object(d.a)("Function");e.default=Object(r.default)(function(t,e){switch(Object(s.a)(e)){case"Function":return Object(r.default)(function(){return t.call(this,e.apply(this,arguments))});case"Object":return f(t,e);case"String":return c(t,e);case"Map":return i(t,e);case"Array":return u(t,e);default:return p(e[Symbol.iterator])?l(t,e):u(t,e)}})},function(t,e,n){"use strict";var r=n(0);e.a=Object(r.default)(function(t){return Object.keys(Object(t))})},function(t,e,n){"use strict";n.r(e);var r=n(0),u=Object(r.default)(function(t,e,n){let r=-1;const u=n.length;let o=e;for(;++r<u;)o=t(o,n[r],r,n);return o}),o=n(4),a=Object(r.default)(function(t,e,n){const r=Object(o.a)(n);let u=-1;const a=r.length;let f=Object(e);for(;++u<a;)f=t(f,n[r[u]],r[u],n);return f}),f=n(2);e.default=Object(r.default)(function(t,e,n){return{Object:a,Array:u}[Object(f.a)(n)](t,e,n)})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=d(n(0)),u=d(n(3)),o=d(n(5)),a=d(n(13)),f=d(n(7)),i=d(n(8)),c=d(n(9)),l=d(n(11)),s=d(n(12));function d(t){return t&&t.__esModule?t:{default:t}}var p=function(t){this.__value=t};p.prototype.type="Matrix",p.prototype.precision=4,p.prototype.setPrecision=function(t){this.precision=t},p.prototype.isSymmetric=function(){var t=this.__value,e=p.transpose(this).__value;return(0,a.default)(t,e)},p.prototype.isOrthogonal=function(){var t=this.dot(this.transpose()),e=this.identity();return(0,a.default)(t,e)},p.prototype.getCols=function(){return this.__value[0].length},p.prototype.equals=function(t){return(0,a.default)(this.__value,t.__value||t)},p.prototype.getRows=function(){return this.__value.length},p.prototype.getShape=function(){return[this.getRows(),this.getCols()]},p.of=function(t){return t instanceof p?t:this instanceof p?(this.__value=t,this):new p(t)},p.prototype.map=function(t){return p.of((0,u.default)(t)(this.__value))},p.map=(0,r.default)(function(t,e){return p.of(e).map(t)}),p.prototype.fold=function(t){return p.of((0,o.default)(t,[])(this.__value))},p.fold=(0,r.default)(function(t,e){return p.of(e).fold(t)}),p.prototype.ap=function(t){return p.of(t).map(this.__value)},p.ap=(0,r.default)(function(t,e){return p.of(t).ap(e)}),p.prototype.concat=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:f.default;return p.of(this).map(e(t))},p.concat=(0,r.default)(function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:f.default;return p.of(t).map(n(e))}),p.prototype.empty=function(){return p.of(this).map(i.default)},p.empty=(0,r.default)(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=Array.apply(null,Array(t)).map(function(t){return Array.apply(null,Array(e))});return p.of(n).map(i.default)}),p.prototype.identity=function(){return p.of(l.default).ap(this)},p.identity=function(t,e){var n=Array.apply(null,Array(t)).map(function(t){return Array.apply(null,Array(e))});return p.of(l.default).ap(n)},p.prototype.combine=function(t){return p.of(this).concat(p.of(t),f.default)},p.combine=function(t,e){return p.of(t).concat(p.of(e),f.default)},p.prototype.dot=function(t){return p.of(this).concat(p.of(t),(0,c.default)(this.precision))},p.dot=function(t,e){return p.of(t).dot(p.of(e))},p.prototype.fill=function(t){return p.of(this).map((0,u.default)(function(e){return t(e)}))},p.prototype.zeros=function(){return p.of(this).fill(function(t){return 0})},p.prototype.ones=function(){return p.of(this).fill(function(t){return 1})},p.prototype.random=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return 2*Math.random()-1};return p.of(this).fill(t)},p.prototype.toArray=function(){return this.__value.map(function(t){return t.map(function(t){return t})})},p.prototype.clone=function(){return p.fromArray(this.__value)},p.fromArray=function(t){return p.of((0,u.default)(function(t){return(0,u.default)(function(t){return t})(t)})(t))},p.prototype.transpose=function(){return p.of((0,o.default)(s.default,[],this.__value))},p.transpose=function(t){return p.of(t).transpose()},p.prototype.add=function(t){if(t instanceof p){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot add");return this.map(function(e,n){return(0,u.default)(function(e,r){return e+t.__value[n][r]})(e)})}return this.map((0,u.default)(function(e){return e+t}))},p.prototype.subtract=function(t){if(t instanceof p){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot subtract");return this.map(function(e,n){return(0,u.default)(function(e,r){return e-t.__value[n][r]})(e)})}return this.map((0,u.default)(function(e){return e-t}))},p.prototype.multiply=function(t){if(t instanceof p){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw console.log("Use static method 'dot' to do matrix multiplication"),new Error("Matrices do not match, cannot create hadamard product");return this.map(function(e,n){return(0,u.default)(function(e,r){return e*t.__value[n][r]})(e)})}return this.map((0,u.default)(function(e){return e*t}))},p.prototype.additiveinverse=function(){return p.of(this).multiply(-1)},p.prototype.hadamard=function(t){return p.of(this).multiply(t)},p.prototype.lu=function(){for(var t=this.getRows(),e=this.clone(),n=this.zeros(),r=this.zeros(),u=0;u<t;++u){if(Math.abs(e.__value[u][u])<1e-6)throw Error("Cannot proceed without a row exchange");n.__value[u][u]=1;for(var o=u+1;o<t;++o){n.__value[o][u]=e.__value[o][u]/e.__value[u][u];for(var a=u+1;a<t;++a)e.__value[o][a]=e.__value[o][a]-n.__value[o][u]*e.__value[u][a]}for(var f=u;f<t;++f)r.__value[u][f]=e.__value[u][f]}return[n,r]},p.prototype.rref=function(){for(var t=0,e=this.clone(),n=0;n<this.getRows();++n){if(this.getCols()<=t)return e;for(var r=n;0===e.__value[r][t];)if(++r,this.getRows()===r&&(r=n,++t,this.getCols()===t))return e;var u=e.__value[r];e.__value[r]=e.__value[n],e.__value[n]=u;for(var o=e.__value[n][t],a=0;a<this.getCols();++a)e.__value[n][a]/=o;for(var f=0;f<this.getRows();++f)if(f!==n){o=e.__value[f][t];for(var i=0;i<this.getCols();++i)e.__value[f][i]-=o*e.__value[n][i]}t++}return e},p.prototype.solve=function(t){for(var e=this.clone().lu(),n=e[0],r=e[1],u=this.getRows(),o=0,a=[],f=[],i=0;i<u;++i){for(var c=0;c<i;++c)o+=n.__value[i][c]*a[c];a[i]=t[i]-o,o=0}for(var l=u-1;l>-1;--l){for(var s=0,d=l+1;d<u;++d)s+=r.__value[l][d]*f[d];f[l]=(a[l]-s)/r.__value[l][l]}return f},p.prototype.inverse=function(){var t=this.clone(),e=t.identity(),n=t.concat(e).rref().__value.reduce(function(t,e,n){var r=e.length/2;return t.push(e.slice(r,e.length)),t},[]);return p.of(n)},p.prototype.rank=function(){for(var t=this.rref(),e=0,n=0;n<t.getCols();++n)e+=t.__value[n][n];return e},p.prototype.dimension=function(){return this.rank()};var v=p;e.default=v,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=o(n(0)),u=o(n(14));function o(t){return t&&t.__esModule?t:{default:t}}var a=(0,r.default)(function(t,e,n){return(0,u.default)(e,t.__value[n])});e.default=a,t.exports=e.default},function(t,e,n){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var u=(0,((r=n(0))&&r.__esModule?r:{default:r}).default)(function(t){return[]});e.default=u,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=f(n(0)),u=f(n(5)),o=f(n(3)),a=f(n(10));function f(t){return t&&t.__esModule?t:{default:t}}var i=(0,r.default)(function(t,e,n){return(0,o.default)(function(r,o){return(0,u.default)(function(n,r,u){return n+=(0,a.default)(r*e.__value[u][o],t)},0)(n)})(e.__value[0])});e.default=i,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return Number(Math.round(t+"e"+e)+"e-"+e)},t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,u=(r=n(3))&&r.__esModule?r:{default:r};e.default=function(t,e){return(0,u.default)(function(t,n){return 1*(e===n)})(t)},t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(3));function u(t){return t&&t.__esModule?t:{default:t}}var o=(0,u(n(0)).default)(function(t,e){return(0,r.default)(function(n,r){return(t[r]||[]).concat(e[r])})(e)});e.default=o,t.exports=e.default},function(t,e,n){"use strict";n.r(e);var r=n(0);function u(t){return!(null==t)}var o=n(1),a=Object(o.a)("Number"),f=Object(r.default)(function(t,e){return t&&e});function i(t){return f(a(t),isNaN(t))}var c=Object(r.default)(function(t,e){return 0===t&&0===e?1/t==1/e:t===e||!(!i(t)||!i(e))}),l=n(2),s=Object(r.default)(function(t){return!t}),d=Object(r.default)(function(t,e){return t||e}),p=Object(o.a)("Object"),v=Object(o.a)("Array"),_=Object(o.a)("Boolean"),h=Object(o.a)("String"),y=Object(o.a)("Date"),b=Object(r.default)(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(s(j(t[n],e[n])))return!1;return!0}),g=Object(r.default)((t,e)=>{for(let n in t)if(s(j(t[n],e[n])))return!1;for(let n in e)if(s(u(t[n]))&&u(e[n]))return!1;return!0}),j=e.default=Object(r.default)(function(t,e){return!!c(t,e)||Object(l.a)(t)===Object(l.a)(e)&&(!d(s(u(t)),s(u(e)))&&(t.constructor===e.constructor&&(h(t)||_(t)||a(t)||y(t)?c(t.valueOf(),e.valueOf()):v(t)?b(t,e):!!p(t)&&g(t,e))))})},function(t,e,n){"use strict";n.r(e);var r=n(0),u=Object(r.default)(function(t,e){return Array.prototype.concat(t,e)});function o(t,e){return String(t)+String(e)}var a=n(2);e.default=Object(r.default)(function(t,e){return{String:o,Array:u}[Object(a.a)(t)](t,e)})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,