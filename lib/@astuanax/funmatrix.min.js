!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("@astuanax/funmatrix",[],e):"object"==typeof exports?exports["@astuanax/funmatrix"]=e():t["@astuanax/funmatrix"]=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var u=e[n]={i:n,l:!1,exports:{}};return t[n].call(u.exports,u,u.exports,r),u.l=!0,u.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var u in t)r.d(n,u,function(e){return t[e]}.bind(null,u));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=7)}([function(t,e,r){"use strict";function n(t){const e=t.length;return 0===e?t:r([]);function r(n){return function(){return function(n,u){const o=n.concat(u);return o.length<e?r(o):t.apply(this,o)}(n,Array.prototype.slice.call(arguments))}}}r.r(e),r.d(e,"default",function(){return n})},function(t,e,r){"use strict";var n=r(0),u=r(2);e.a=Object(n.default)(function(t,e){return Object(u.a)(e)===t})},function(t,e,r){"use strict";var n;e.a=(n=function(t){return Object.prototype.toString.call(t).slice(8,-1)},function(t){return 0===arguments.length?this:n(t)})},function(t,e,r){"use strict";r.r(e);var n=r(0),u=Object(n.default)(function(t,e){let r=-1;const n=e.length,u=new Array(n);for(;++r<n;)u[r]=t(e[r],r,e);return u});function o(t){return new t.constructor}var a=r(4),f=Object(n.default)(function(t,e){const r=Object(a.a)(e);let n=-1;const u=r.length,f=o(e);for(;++n<u;)f[r[n]]=t(e[r[n]],r[n],e);return f}),i=Object(n.default)(function(t,e){const r=o(e);return e.forEach((e,n,u)=>{r.set(n,t(e,n,u))}),r}),c=Object(n.default)(function(t,e){let r=-1;const n=e.length;let u="";for(;++r<n;)u+=t(e.charAt(r),r,e);return u}),l=Object(n.default)(function(t,e){let r=[];for(let n=e.next();!0!==n.done;n=e.next())r.push(t(e.value()));return r}),s=r(2),d=r(1);const p=Object(d.a)("Function");e.default=Object(n.default)(function(t,e){switch(Object(s.a)(e)){case"Function":return Object(n.default)(function(){return t.call(this,e.apply(this,arguments))});case"Object":return f(t,e);case"String":return c(t,e);case"Map":return i(t,e);case"Array":return u(t,e);default:return p(e[Symbol.iterator])?l(t,e):u(t,e)}})},function(t,e,r){"use strict";var n=r(0);e.a=Object(n.default)(function(t){return Object.keys(Object(t))})},function(t,e,r){"use strict";var n=r(0);e.a=Object(n.default)(function(t,e,r){let n=-1;const u=r.length;let o=e;for(;++n<u;)o=t(o,r[n],n,r);return o})},function(t,e,r){"use strict";r.r(e);var n=r(0),u=r(5),o=r(4),a=Object(n.default)(function(t,e,r){const n=Object(o.a)(r);let u=-1;const a=n.length;let f=Object(e);for(;++u<a;)f=t(f,r[n[u]],n[u],r);return f}),f=r(2);e.default=Object(n.default)(function(t,e,r){return{Object:a,Array:u.a}[Object(f.a)(r)](t,e,r)})},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=h(r(0)),u=h(r(3)),o=h(r(6)),a=h(r(8)),f=h(r(9)),i=h(r(10)),c=h(r(18)),l=h(r(11)),s=h(r(12)),d=h(r(13)),p=h(r(15)),v=h(r(16)),_=h(r(17));function h(t){return t&&t.__esModule?t:{default:t}}var y=function(t){this.__value=t};y.of=function(t){return t instanceof y?t:this instanceof y?(this.__value=t,this):new y(t)},y.prototype.type="Matrix",y.prototype.precision=4,y.prototype.setPrecision=function(t){this.precision=t},y.prototype.isSymmetric=function(){var t=this.__value,e=y.transpose(this).__value;return(0,c.default)(t,e)},y.prototype.isSquare=function(){return(0,c.default)(this.getCols(),this.getRows())},y.prototype.isOrthogonal=function(){var t=this.dot(this.transpose()),e=this.identity();return(0,c.default)(t,e)},y.prototype.getCols=function(){return this.__value[0].length},y.prototype.equals=function(t){return(0,c.default)(this.__value,t.__value||t)},y.prototype.getRows=function(){return this.__value.length},y.prototype.getShape=function(){return[this.getRows(),this.getCols()]},y.prototype.map=function(t){return y.of((0,u.default)(t)(this.__value))},y.map=(0,n.default)(function(t,e){return y.of(e).map(t)}),y.prototype.fold=function(t){return y.of((0,o.default)(t,[])(this.__value))},y.fold=(0,n.default)(function(t,e){return y.of(e).fold(t)}),y.prototype.ap=function(t){return y.of(t).map(this.__value)},y.ap=(0,n.default)(function(t,e){return y.of(t).ap(e)}),y.prototype.concat=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:l.default;return y.of(this).map(e(t))},y.concat=(0,n.default)(function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:l.default;return y.of(t).map(r(e))}),y.prototype.empty=function(){return y.of(this).map(s.default)},y.empty=(0,n.default)(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(0,_.default)(t,e);return y.of(r).map(s.default)}),y.prototype.identity=function(){return y.of(p.default).ap(this)},y.identity=(0,n.default)(function(t,e){var r=(0,_.default)(t,e);return y.of(p.default).ap(r)}),y.prototype.combine=function(t){return y.of(this).concat(y.of(t),l.default)},y.combine=(0,n.default)(function(t,e){return y.of(t).concat(y.of(e),l.default)}),y.prototype.dot=function(t){return y.of(this).concat(y.of(t),(0,d.default)(this.precision))},y.dot=(0,n.default)(function(t,e){return y.of(t).dot(y.of(e))}),y.prototype.fill=function(t){return y.of(this).map((0,u.default)(function(e){return t(e)}))},y.prototype.zeros=function(){return y.of(this).fill(function(t){return 0})},y.zeros=function(t,e){var r=(0,_.default)(t,e);return y.of(r).fill(function(t){return 0})},y.prototype.ones=function(){return y.of(this).fill(function(t){return 1})},y.ones=function(t,e){var r=(0,_.default)(t,e);return y.of(r).fill(function(t){return 1})},y.prototype.random=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return 2*Math.random()-1};return y.of(this).fill(t)},y.random=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return 2*Math.random()-1},e=arguments[1],r=arguments[2],n=(0,_.default)(e,r);return y.of(n).fill(t)},y.prototype.toArray=function(){return this.__value.map(function(t){return t.map(function(t){return t})})},y.prototype.clone=function(){var t=y.fromArray(this.__value);return t.setPrecision(this.precision),t},y.fromArray=function(t){return y.of((0,u.default)(function(t){return(0,u.default)(function(t){return t})(t)})(t))},y.prototype.transpose=function(){return y.of((0,o.default)(v.default,[],this.__value))},y.transpose=function(t){return y.of(t).transpose()},y.prototype.add=function(t){if(t instanceof y){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot add");return this.map(function(e,r){return(0,u.default)(function(e,n){return e+t.__value[r][n]})(e)})}return this.map((0,u.default)(function(e){return e+t}))},y.prototype.subtract=function(t){if(t instanceof y){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot subtract");return this.map(function(e,r){return(0,u.default)(function(e,n){return e-t.__value[r][n]})(e)})}return this.map((0,u.default)(function(e){return e-t}))},y.prototype.multiply=function(t){if(t instanceof y){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw console.log("Use static method 'dot' to do matrix multiplication"),new Error("Matrices do not match, cannot create hadamard product");return this.map(function(e,r){return(0,u.default)(function(e,n){return e*t.__value[r][n]})(e)})}return this.map((0,u.default)(function(e){return e*t}))},y.prototype.additiveinverse=function(){return y.of(this).multiply(-1)},y.prototype.hadamard=function(t){return y.of(this).multiply(t)},y.prototype.lu=function(){for(var t=this.getRows(),e=this.clone(),r=this.zeros(),n=this.zeros(),u=0;u<t;++u){if(Math.abs(e.__value[u][u])<1e-6)throw Error("Cannot proceed without a row exchange");r.__value[u][u]=1;for(var o=u+1;o<t;++o){r.__value[o][u]=e.__value[o][u]/e.__value[u][u];for(var a=u+1;a<t;++a)e.__value[o][a]=e.__value[o][a]-r.__value[o][u]*e.__value[u][a]}for(var f=u;f<t;++f)n.__value[u][f]=e.__value[u][f]}return[r,n]},y.prototype.rref=function(){for(var t=0,e=this.clone(),r=0;r<this.getRows();++r){if(this.getCols()<=t)return e;for(var n=r;0===e.__value[n][t];)if(++n,this.getRows()===n&&(n=r,++t,this.getCols()===t))return e;var u=e.__value[n];e.__value[n]=e.__value[r],e.__value[r]=u;for(var o=e.__value[r][t],a=0;a<this.getCols();++a)e.__value[r][a]/=o;for(var f=0;f<this.getRows();++f)if(f!==r){o=e.__value[f][t];for(var i=0;i<this.getCols();++i)e.__value[f][i]-=o*e.__value[r][i]}t++}return e},y.prototype.solve=function(t){for(var e=this.lu(),r=e[0],n=e[1],u=this.getRows(),o=0,a=[],f=[],i=0;i<u;++i){for(var c=0;c<i;++c)o+=r.__value[i][c]*a[c];a[i]=t[i]-o,o=0}for(var l=u-1;l>-1;--l){for(var s=0,d=l+1;d<u;++d)s+=n.__value[l][d]*f[d];f[l]=(a[l]-s)/n.__value[l][l]}return f},y.prototype.inverse=function(){var t=this.clone(),e=t.identity(),r=t.concat(e).rref().__value.reduce(function(t,e,r){var n=e.length/2;return t.push(e.slice(n,e.length)),t},[]);return y.of(r)},y.prototype.rank=function(){for(var t=this.rref(),e=0,r=0;r<t.getCols();++r)e+=t.__value[r][r];return e},y.prototype.dimension=function(){return this.rank()},y.prototype.diag=function(){return(0,o.default)(function(t,e,r){return t.concat(e[r])})([])(this.__value)},y.diag=function(t){return y.of(t).diag()},y.prototype.diagproduct=function(){return(0,o.default)(function(t,e,r){return t*=e[r]})(1)(this.__value)},y.diagproduct=function(t){return y.of(t).diagproduct()},y.prototype.sum=function(){return(0,o.default)(function(t,e){return t+=(0,o.default)(function(t,e){return t+e})(0)(e)})(0)(this.__value)},y.sum=function(t){return y.of(t).sum()},y.prototype.kronecker=function(t){for(var e=this.getRows(),r=this.getCols(),n=t.getRows(),u=t.getCols(),o=this.__value,a=t.__value,f=(0,_.default)(e*n,r*u),i=0;i<e;i++)for(var c=0;c<r;c++)for(var l=0;l<n;l++)for(var s=0;s<u;s++)f[n*i+l][u*c+s]=o[i][c]*a[l][s];return y.of(f)},y.kronecker=function(t,e){return y.of(t).kronecker(e)},y.prototype.determinant=function(){if(this.isSquare()){if(2===this.getCols()){var t=this.__value[0][0],e=this.__value[0][1],r=this.__value[1][0];return t*this.__value[1][1]-e*r}var n=this.lu();return Number(n[0].diagproduct())*Number(n[1].diagproduct())}throw Error("The Matrix needs to be a square Matrix to calculate the determinant")},y.determinant=function(t){return y.of(t).determinant()},y.prototype.max=function(){return(0,i.default)(a.default,[].concat.apply([],this.__value))},y.prototype.min=function(){return(0,i.default)(f.default,[].concat.apply([],this.__value))};var b=y;e.default=b,t.exports=e.default},function(t,e,r){"use strict";r.r(e);var n=r(0);e.default=Object(n.default)(function(t,e){return e>t?e:t})},function(t,e,r){"use strict";r.r(e);var n=r(0);e.default=Object(n.default)(function(t,e){return e<t?e:t})},function(t,e,r){"use strict";r.r(e);var n=r(0),u=r(5);e.default=Object(n.default)(function(t,e){const r=e.slice(),n=r.shift();return Object(u.a)(t,n,r)})},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=o(r(0)),u=o(r(19));function o(t){return t&&t.__esModule?t:{default:t}}var a=(0,n.default)(function(t,e,r){return(0,u.default)(e,t.__value[r])});e.default=a,t.exports=e.default},function(t,e,r){"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var u=(0,((n=r(0))&&n.__esModule?n:{default:n}).default)(function(t){return[]});e.default=u,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=f(r(0)),u=f(r(6)),o=f(r(3)),a=f(r(14));function f(t){return t&&t.__esModule?t:{default:t}}var i=(0,n.default)(function(t,e,r){return(0,o.default)(function(n,o){return(0,u.default)(function(r,n,u){return r+=(0,a.default)(n*e.__value[u][o],t)},0)(r)})(e.__value[0])});e.default=i,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return Number(Math.round(t+"e"+e)+"e-"+e)},t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n,u=(n=r(3))&&n.__esModule?n:{default:n};e.default=function(t,e){return(0,u.default)(function(t,r){return 1*(e===r)})(t)},t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=u(r(3));function u(t){return t&&t.__esModule?t:{default:t}}var o=(0,u(r(0)).default)(function(t,e){return(0,n.default)(function(r,n){return(t[n]||[]).concat(e[n])})(e)});e.default=o,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function(t,e){return Array.apply(null,Array(t)).map(function(t){return Array.apply(null,Array(e))})},t.exports=e.default},function(t,e,r){"use strict";r.r(e);var n=r(0);function u(t){return!(null==t)}var o=r(1),a=Object(o.a)("Number"),f=Object(n.default)(function(t,e){return t&&e});function i(t){return f(a(t),isNaN(t))}var c=Object(n.default)(function(t,e){return 0===t&&0===e?1/t==1/e:t===e||!(!i(t)||!i(e))}),l=r(2),s=Object(n.default)(function(t){return!t}),d=Object(n.default)(function(t,e){return t||e}),p=Object(o.a)("Object"),v=Object(o.a)("Array"),_=Object(o.a)("Boolean"),h=Object(o.a)("String"),y=Object(o.a)("Date"),b=Object(n.default)(function(t,e){if(t.length!==e.length)return!1;for(let r=0;r<t.length;r++)if(s(m(t[r],e[r])))return!1;return!0}),g=Object(n.default)((t,e)=>{for(let r in t)if(s(m(t[r],e[r])))return!1;for(let r in e)if(s(u(t[r]))&&u(e[r]))return!1;return!0}),m=e.default=Object(n.default)(function(t,e){return!!c(t,e)||Object(l.a)(t)===Object(l.a)(e)&&(!d(s(u(t)),s(u(e)))&&(t.constructor===e.constructor&&(h(t)||_(t)||a(t)||y(t)?c(t.valueOf(),e.valueOf()):v(t)?b(t,e):!!p(t)&&g(t,e))))})},function(t,e,r){"use strict";r.r(e);var n=r(0),u=Object(n.default)(function(t,e){return Array.prototype.concat(t,e)});function o(t,e){return String(t)+String(e)}var a=r(2);e.default=Object(n.default)(function(t,e){return{String:o,Array:u}[Object(a.a)(t)](t,e)})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,