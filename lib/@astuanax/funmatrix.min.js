!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("@astuanax/funmatrix",[],e):"object"==typeof exports?exports["@astuanax/funmatrix"]=e():t["@astuanax/funmatrix"]=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var u=e[r]={i:r,l:!1,exports:{}};return t[r].call(u.exports,u,u.exports,n),u.l=!0,u.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var u in t)n.d(r,u,function(e){return t[e]}.bind(null,u));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=7)}([function(t,e,n){"use strict";function r(t){const e=t.length;return 0===e?t:n([]);function n(r){return function(){return function(r,u){const o=r.concat(u);return o.length<e?n(o):t.apply(this,o)}(r,Array.prototype.slice.call(arguments))}}}n.r(e),n.d(e,"default",function(){return r})},function(t,e,n){"use strict";var r=n(0),u=n(2);e.a=Object(r.default)(function(t,e){return Object(u.a)(e)===t})},function(t,e,n){"use strict";var r;e.a=(r=function(t){return Object.prototype.toString.call(t).slice(8,-1)},function(t){return 0===arguments.length?this:r(t)})},function(t,e,n){"use strict";n.r(e);var r=n(0),u=Object(r.default)(function(t,e){let n=-1;const r=e.length,u=new Array(r);for(;++n<r;)u[n]=t(e[n],n,e);return u});function o(t){return new t.constructor}var a=n(4),f=Object(r.default)(function(t,e){const n=Object(a.a)(e);let r=-1;const u=n.length,f=o(e);for(;++r<u;)f[n[r]]=t(e[n[r]],n[r],e);return f}),i=Object(r.default)(function(t,e){const n=o(e);return e.forEach((e,r,u)=>{n.set(r,t(e,r,u))}),n}),c=Object(r.default)(function(t,e){let n=-1;const r=e.length;let u="";for(;++n<r;)u+=t(e.charAt(n),n,e);return u}),l=Object(r.default)(function(t,e){let n=[];for(let r=e.next();!0!==r.done;r=e.next())n.push(t(e.value()));return n}),s=n(2),d=n(1);const p=Object(d.a)("Function");e.default=Object(r.default)(function(t,e){switch(Object(s.a)(e)){case"Function":return Object(r.default)(function(){return t.call(this,e.apply(this,arguments))});case"Object":return f(t,e);case"String":return c(t,e);case"Map":return i(t,e);case"Array":return u(t,e);default:return p(e[Symbol.iterator])?l(t,e):u(t,e)}})},function(t,e,n){"use strict";var r=n(0);e.a=Object(r.default)(function(t){return Object.keys(Object(t))})},function(t,e,n){"use strict";var r=n(0);e.a=Object(r.default)(function(t,e,n){let r=-1;const u=n.length;let o=e;for(;++r<u;)o=t(o,n[r],r,n);return o})},function(t,e,n){"use strict";n.r(e);var r=n(0),u=n(5),o=n(4),a=Object(r.default)(function(t,e,n){const r=Object(o.a)(n);let u=-1;const a=r.length;let f=Object(e);for(;++u<a;)f=t(f,n[r[u]],r[u],n);return f}),f=n(2);e.default=Object(r.default)(function(t,e,n){return{Object:a,Array:u.a}[Object(f.a)(n)](t,e,n)})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=y(n(0)),u=y(n(3)),o=y(n(6)),a=y(n(8)),f=y(n(9)),i=y(n(10)),c=y(n(19)),l=y(n(11)),s=y(n(12)),d=y(n(13)),p=y(n(15)),v=y(n(16)),_=y(n(17)),h=y(n(18));function y(t){return t&&t.__esModule?t:{default:t}}var b=function(t){this.__value=t};b.of=function(t){return t instanceof b?t:this instanceof b?(this.__value=t,this):new b(t)},b.prototype.type="Matrix",b.prototype.precision=4,b.prototype.setPrecision=function(t){this.precision=t},b.prototype.isSymmetric=function(){var t=this.__value,e=b.transpose(this).__value;return(0,c.default)(t,e)},b.prototype.isSquare=function(){return(0,c.default)(this.getCols(),this.getRows())},b.prototype.isOrthogonal=function(){var t=this.dot(this.transpose()),e=this.identity();return(0,c.default)(t,e)},b.prototype.getCols=function(){return this.__value[0].length},b.prototype.equals=function(t){return(0,c.default)(this.__value,t.__value||t)},b.prototype.getRows=function(){return this.__value.length},b.prototype.getShape=function(){return[this.getRows(),this.getCols()]},b.prototype.map=function(t){return b.of((0,u.default)(t)(this.__value))},b.map=(0,r.default)(function(t,e){return b.of(e).map(t)}),b.prototype.fold=function(t){return b.of((0,o.default)(t,[])(this.__value))},b.fold=(0,r.default)(function(t,e){return b.of(e).fold(t)}),b.prototype.ap=function(t){return b.of(t).map(this.__value)},b.ap=(0,r.default)(function(t,e){return b.of(t).ap(e)}),b.prototype.concat=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:l.default;return b.of(this).map(e(t))},b.concat=(0,r.default)(function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:l.default;return b.of(t).map(n(e))}),b.prototype.empty=function(){return b.of(this).map(s.default)},b.empty=(0,r.default)(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(0,_.default)(t,e);return b.of(n).map(s.default)}),b.prototype.identity=function(){return b.of(p.default).ap(this)},b.identity=(0,r.default)(function(t,e){var n=(0,_.default)(t,e);return b.of(p.default).ap(n)}),b.prototype.combine=function(t){return b.of(this).concat(b.of(t),l.default)},b.combine=(0,r.default)(function(t,e){return b.of(t).concat(b.of(e),l.default)}),b.prototype.dot=function(t){return b.of(this).concat(b.of(t),(0,d.default)(this.precision))},b.dot=(0,r.default)(function(t,e){return b.of(t).dot(b.of(e))}),b.prototype.fill=function(t){return b.of(this).map((0,u.default)(function(e){return t(e)}))},b.prototype.zeros=function(){return b.of(this).fill(function(t){return 0})},b.zeros=function(t,e){var n=(0,_.default)(t,e);return b.of(n).fill(function(t){return 0})},b.prototype.ones=function(){return b.of(this).fill(function(t){return 1})},b.ones=function(t,e){var n=(0,_.default)(t,e);return b.of(n).fill(function(t){return 1})},b.prototype.random=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return 2*Math.random()-1};return b.of(this).fill(t)},b.random=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return 2*Math.random()-1},e=arguments[1],n=arguments[2],r=(0,_.default)(e,n);return b.of(r).fill(t)},b.prototype.toArray=function(){return this.__value.map(function(t){return t.map(function(t){return t})})},b.prototype.clone=function(){var t=b.fromArray(this.__value);return t.setPrecision(this.precision),t},b.fromArray=function(t){return b.of((0,u.default)(function(t){return(0,u.default)(function(t){return t})(t)})(t))},b.prototype.transpose=function(){return b.of((0,o.default)(v.default,[],this.__value))},b.transpose=function(t){return b.of(t).transpose()},b.prototype.add=function(t){if(t instanceof b){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot add");return this.map(function(e,n){return(0,u.default)(function(e,r){return e+t.__value[n][r]})(e)})}return this.map((0,u.default)(function(e){return e+t}))},b.prototype.subtract=function(t){if(t instanceof b){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot subtract");return this.map(function(e,n){return(0,u.default)(function(e,r){return e-t.__value[n][r]})(e)})}return this.map((0,u.default)(function(e){return e-t}))},b.prototype.multiply=function(t){if(t instanceof b){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw console.log("Use static method 'dot' to do matrix multiplication"),new Error("Matrices do not match, cannot create hadamard product");return this.map(function(e,n){return(0,u.default)(function(e,r){return e*t.__value[n][r]})(e)})}return this.map((0,u.default)(function(e){return e*t}))},b.prototype.additiveinverse=function(){return b.of(this).multiply(-1)},b.prototype.hadamard=function(t){return b.of(this).multiply(t)},b.prototype.lu=function(){for(var t=this.getRows(),e=this.clone(),n=this.zeros(),r=this.zeros(),u=0;u<t;++u){if(Math.abs(e.__value[u][u])<1e-6)throw Error("Cannot proceed without a row exchange");n.__value[u][u]=1;for(var o=u+1;o<t;++o){n.__value[o][u]=e.__value[o][u]/e.__value[u][u];for(var a=u+1;a<t;++a)e.__value[o][a]=e.__value[o][a]-n.__value[o][u]*e.__value[u][a]}for(var f=u;f<t;++f)r.__value[u][f]=e.__value[u][f]}return[n,r]},b.prototype.rref=function(){for(var t=0,e=this.clone(),n=0;n<this.getRows();++n){if(this.getCols()<=t)return e;for(var r=n;0===e.__value[r][t];)if(++r,this.getRows()===r&&(r=n,++t,this.getCols()===t))return e;var u=e.__value[r];e.__value[r]=e.__value[n],e.__value[n]=u;for(var o=e.__value[n][t],a=0;a<this.getCols();++a)e.__value[n][a]/=o;for(var f=0;f<this.getRows();++f)if(f!==n){o=e.__value[f][t];for(var i=0;i<this.getCols();++i)e.__value[f][i]-=o*e.__value[n][i]}t++}return e},b.prototype.solve=function(t){var e=this.lu(),n=e[0],r=e[1],u=this.getRows();return(0,h.default)(u,n,r,t)},b.prototype.inverse=function(){var t=this.clone(),e=t.identity(),n=t.concat(e).rref().__value.reduce(function(t,e,n){var r=e.length/2;return t.push(e.slice(r,e.length)),t},[]);return b.of(n)},b.prototype.rank=function(){for(var t=this.rref(),e=0,n=0;n<t.getCols();++n)e+=t.__value[n][n];return e},b.prototype.dimension=function(){return this.rank()},b.prototype.diag=function(){return(0,o.default)(function(t,e,n){return t.concat(e[n])})([])(this.__value)},b.diag=function(t){return b.of(t).diag()},b.prototype.diagproduct=function(){return(0,o.default)(function(t,e,n){return t*=e[n]})(1)(this.__value)},b.diagproduct=function(t){return b.of(t).diagproduct()},b.prototype.sum=function(){return(0,o.default)(function(t,e){return t+=(0,o.default)(function(t,e){return t+e})(0)(e)})(0)(this.__value)},b.sum=function(t){return b.of(t).sum()},b.prototype.kronecker=function(t){for(var e=this.getRows(),n=this.getCols(),r=t.getRows(),u=t.getCols(),o=this.__value,a=t.__value,f=(0,_.default)(e*r,n*u),i=0;i<e;i++)for(var c=0;c<n;c++)for(var l=0;l<r;l++)for(var s=0;s<u;s++)f[r*i+l][u*c+s]=o[i][c]*a[l][s];return b.of(f)},b.kronecker=function(t,e){return b.of(t).kronecker(e)},b.prototype.determinant=function(){if(this.isSquare()){if(2===this.getCols()){var t=this.__value[0][0],e=this.__value[0][1],n=this.__value[1][0];return t*this.__value[1][1]-e*n}var r=this.lu();return Number(r[0].diagproduct())*Number(r[1].diagproduct())}throw Error("The Matrix needs to be a square Matrix to calculate the determinant")},b.determinant=function(t){return b.of(t).determinant()},b.prototype.max=function(){return(0,i.default)(a.default,[].concat.apply([],this.__value))},b.prototype.min=function(){return(0,i.default)(f.default,[].concat.apply([],this.__value))};var g=b;e.default=g,t.exports=e.default},function(t,e,n){"use strict";n.r(e);var r=n(0);e.default=Object(r.default)(function(t,e){return e>t?e:t})},function(t,e,n){"use strict";n.r(e);var r=n(0);e.default=Object(r.default)(function(t,e){return e<t?e:t})},function(t,e,n){"use strict";n.r(e);var r=n(0),u=n(5);e.default=Object(r.default)(function(t,e){const n=e.slice(),r=n.shift();return Object(u.a)(t,r,n)})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=o(n(0)),u=o(n(20));function o(t){return t&&t.__esModule?t:{default:t}}var a=(0,r.default)(function(t,e,n){return(0,u.default)(e,t.__value[n])});e.default=a,t.exports=e.default},function(t,e,n){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var u=(0,((r=n(0))&&r.__esModule?r:{default:r}).default)(function(t){return[]});e.default=u,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=f(n(0)),u=f(n(6)),o=f(n(3)),a=f(n(14));function f(t){return t&&t.__esModule?t:{default:t}}var i=(0,r.default)(function(t,e,n){return(0,o.default)(function(r,o){return(0,u.default)(function(n,r,u){return n+=(0,a.default)(r*e.__value[u][o],t)},0)(n)})(e.__value[0])});e.default=i,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return Number(Math.round(t+"e"+e)+"e-"+e)},t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,u=(r=n(3))&&r.__esModule?r:{default:r};e.default=function(t,e){return(0,u.default)(function(t,n){return 1*(e===n)})(t)},t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(3));function u(t){return t&&t.__esModule?t:{default:t}}var o=(0,u(n(0)).default)(function(t,e){return(0,r.default)(function(n,r){return(t[r]||[]).concat(e[r])})(e)});e.default=o,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function(t,e){return Array.apply(null,Array(t)).map(function(t){return Array.apply(null,Array(e))})},t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n,r){var u=function(t,e,n){for(var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],u=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,o=0;o<t;++o){for(var a=0;a<o;++a)u+=e.__value[o][a]*r[a];r[o]=n[o]-u,u=0}return r}(t,e,r);return function(t,e,n,r){for(var u=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],o=t-1;o>-1;--o){for(var a=0,f=o+1;f<t;++f)a+=e.__value[o][f]*u[f];u[o]=(n[o]-a)/e.__value[o][o]}return u}(t,n,u,r)},t.exports=e.default},function(t,e,n){"use strict";n.r(e);var r=n(0);function u(t){return!(null==t)}var o=n(1),a=Object(o.a)("Number"),f=Object(r.default)(function(t,e){return t&&e});function i(t){return f(a(t),isNaN(t))}var c=Object(r.default)(function(t,e){return 0===t&&0===e?1/t==1/e:t===e||!(!i(t)||!i(e))}),l=n(2),s=Object(r.default)(function(t){return!t}),d=Object(r.default)(function(t,e){return t||e}),p=Object(o.a)("Object"),v=Object(o.a)("Array"),_=Object(o.a)("Boolean"),h=Object(o.a)("String"),y=Object(o.a)("Date"),b=Object(r.default)(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(s(m(t[n],e[n])))return!1;return!0}),g=Object(r.default)((t,e)=>{for(let n in t)if(s(m(t[n],e[n])))return!1;for(let n in e)if(s(u(t[n]))&&u(e[n]))return!1;return!0}),m=e.default=Object(r.default)(function(t,e){return!!c(t,e)||Object(l.a)(t)===Object(l.a)(e)&&(!d(s(u(t)),s(u(e)))&&(t.constructor===e.constructor&&(h(t)||_(t)||a(t)||y(t)?c(t.valueOf(),e.valueOf()):v(t)?b(t,e):!!p(t)&&g(t,e))))})},function(t,e,n){"use strict";n.r(e);var r=n(0),u=Object(r.default)(function(t,e){return Array.prototype.concat(t,e)});function o(t,e){return String(t)+String(e)}var a=n(2);e.default=Object(r.default)(function(t,e){return{String:o,Array:u}[Object(a.a)(t)](t,e)})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,