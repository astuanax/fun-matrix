!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("@astuanax/funmatrix",[],e):"object"==typeof exports?exports["@astuanax/funmatrix"]=e():t["@astuanax/funmatrix"]=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)r.d(n,s,function(e){return t[e]}.bind(null,s));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=21)}([function(t,e,r){"use strict";function n(t){const e=t.length;return 0===e?t:r([]);function r(n){return function(){return function(n,s){const i=n.concat(s);return i.length<e?r(i):t.apply(this,i)}(n,Array.prototype.slice.call(arguments))}}}r.r(e),r.d(e,"default",function(){return n})},function(t,e,r){"use strict";var n=r(0),s=r(3);e.a=Object(n.default)(function(t,e){return Object(s.a)(e)===t})},function(t,e,r){const{Input:n}=r(9),{Texture:s}=r(4),i=/function ([^(]*)/,a=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,o=/([^\s,]+)/g,u={systemEndianness:()=>h,getSystemEndianness(){const t=new ArrayBuffer(4),e=new Uint32Array(t),r=new Uint8Array(t);if(e[0]=3735928559,239===r[0])return"LE";if(222===r[0])return"BE";throw new Error("unknown endianness")},isFunction:t=>"function"==typeof t,isFunctionString:t=>"string"==typeof t&&"function"===t.slice(0,"function".length).toLowerCase(),getFunctionNameFromString:t=>i.exec(t)[1].trim(),getFunctionBodyFromString:t=>t.substring(t.indexOf("{")+1,t.lastIndexOf("}")),getArgumentNamesFromString(t){const e=t.replace(a,"");let r=e.slice(e.indexOf("(")+1,e.indexOf(")")).match(o);return null===r&&(r=[]),r},clone(t){if(null===t||"object"!=typeof t||t.hasOwnProperty("isActiveClone"))return t;const e=t.constructor();for(let r in t)Object.prototype.hasOwnProperty.call(t,r)&&(t.isActiveClone=null,e[r]=u.clone(t[r]),delete t.isActiveClone);return e},isArray:t=>!isNaN(t.length),getVariableType:t=>u.isArray(t)?"IMG"===t[0].nodeName?"HTMLImageArray":"Array":"number"==typeof t?Number.isInteger(t)?"Integer":"Float":"boolean"==typeof t?"Boolean":t instanceof s?t.type:t instanceof n?"Input":"IMG"===t.nodeName?"HTMLImage":"Unknown",dimToTexSize(t,e,r){let[n,s,i]=e,a=(n||1)*(s||1)*(i||1);return!t.floatTextures||r&&"single"!==t.precision||(n=a=Math.ceil(a/4)),s>1&&n*s===a?new Int32Array([n,s]):u.closestSquareDimensions(a)},closestSquareDimensions(t){const e=Math.sqrt(t);let r=Math.ceil(e),n=Math.floor(e);for(;r*n<t;)r--,n=Math.ceil(t/r);return new Int32Array([n,Math.ceil(t/n)])},getMemoryOptimizedFloatTextureSize(t,e){const[r,n,s]=t,i=u.roundTo((r||1)*(n||1)*(s||1),4)/e;return u.closestSquareDimensions(i)},getMemoryOptimizedPackedTextureSize(t,e){const[r,n,s]=t,i=u.roundTo((r||1)*(n||1)*(s||1),4)/(4/e);return u.closestSquareDimensions(i)},roundTo:(t,e)=>Math.floor((t+e-1)/e)*e,getDimensions(t,e){let r;if(u.isArray(t)){const e=[];let n=t;for(;u.isArray(n);)e.push(n.length),n=n[0];r=e.reverse()}else if(t instanceof s)r=t.output;else{if(!(t instanceof n))throw new Error(`Unknown dimensions of ${t}`);r=t.size}if(e)for(r=Array.from(r);r.length<3;)r.push(1);return new Int32Array(r)},flatten2dArrayTo(t,e){let r=0;for(let n=0;n<t.length;n++)e.set(t[n],r),r+=t[n].length},flatten3dArrayTo(t,e){let r=0;for(let n=0;n<t.length;n++)for(let s=0;s<t[n].length;s++)e.set(t[n][s],r),r+=t[n][s].length},flattenTo(t,e){u.isArray(t[0])?u.isArray(t[0][0])?u.flatten3dArrayTo(t,e):u.flatten2dArrayTo(t,e):e.set(t)},splitArray(t,e){const r=[];for(let n=0;n<t.length;n+=e)r.push(new t.constructor(t.buffer,4*n+t.byteOffset,e));return r},getAstString(t,e){const r=Array.isArray(t)?t:t.split(/\r?\n/g),n=e.loc.start,s=e.loc.end,i=[];i.push(r[n.line-1].slice(n.column));for(let t=n.line;t<s.line-1;t++)i.push(r[t]);return i.push(r[s.line-1].slice(0,s.column)),i.join("\n")},allPropertiesOf(t){const e=[];do{e.push.apply(e,Object.getOwnPropertyNames(t))}while(t=Object.getPrototypeOf(t));return e},linesToString:t=>t.length>0?t.join(";\n")+";\n":"\n",warnDeprecated(t,e,r){r?console.warn(`You are using a deprecated ${t} "${e}". It has been replaced with "${r}". Fixing, but please upgrade as it will soon be removed.`):console.warn(`You are using a deprecated ${t} "${e}". It has been removed. Fixing, but please upgrade as it will soon be removed.`)},functionToIFunction(t,e){if(e=e||{},"string"!=typeof t&&"function"!=typeof t)throw new Error("source not a string or function");const r="string"==typeof t?t:t.toString();let n=[];return{source:r,argumentTypes:n=Array.isArray(e.argumentTypes)?e.argumentTypes:"object"==typeof e.argumentTypes?u.getArgumentNamesFromString(r).map(t=>e.argumentTypes[t])||[]:e.argumentTypes||[],returnType:e.returnType||null}}},h=u.getSystemEndianness();t.exports={utils:u}},function(t,e,r){"use strict";var n;e.a=(n=function(t){return Object.prototype.toString.call(t).slice(8,-1)},function(t){return 0===arguments.length?this:n(t)})},function(t,e){t.exports={Texture:class{constructor(t){const{texture:e,size:r,dimensions:n,output:s,context:i,gpu:a,type:o="NumberTexture"}=t;if(!s)throw new Error('settings property "output" required.');if(!i)throw new Error('settings property "context" required.');this.texture=e,this.size=r,this.dimensions=n,this.output=s,this.context=i,this.gpu=a,this.kernel=null,this.type=o}toArray(t){let{kernel:e}=this;if(e)return e(this);if(!(t=t||this.gpu))throw new Error('settings property "gpu" or argument required.');return e=t.createKernel(function(t){return t[this.thread.z][this.thread.y][this.thread.x]},{output:this.output,precision:this.getPrecision(),optimizeFloatMemory:"MemoryOptimizedNumberTexture"===this.type}),this.kernel=e,e(this)}getPrecision(){switch(this.type){case"NumberTexture":return"unsigned";case"MemoryOptimizedNumberTexture":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":return"single";default:throw new Error("Unknown texture type")}}delete(){return this.context.deleteTexture(this.texture)}}}},function(t,e){class r{static fromKernel(t,e,n){const{argumentNames:s,argumentTypes:i,argumentSizes:a,argumentBitRatios:o,constants:u,constantTypes:h,constantBitRatios:l,debug:c,loopMaxIterations:p,nativeFunctions:f,output:d,optimizeFloatMemory:m,precision:g,plugins:x,source:y,subKernels:T,functions:_,leadingReturnStatement:E,followingReturnStatement:b}=t,v=(t,e,r)=>U.lookupReturnType(t,e,r),S=(t,e)=>U.lookupArgumentType(t,e),A=t=>U.lookupFunctionArgumentTypes(t),R=(t,e)=>U.lookupFunctionArgumentName(t,e),w=(t,e)=>U.lookupFunctionArgumentBitRatio(t,e),D=(t,e,r,n)=>{U.assignArgumentType(t,e,r,n)},k=(t,e,r,n)=>{U.trackArgumentSynonym(t,e,r,n)},F=(t,e,r)=>U.lookupArgumentSynonym(t,e,r),I=(t,e)=>{U.trackFunctionCall(t,e)},N=Object.assign({isRootKernel:!1,onNestedFunction:(t,r)=>{U.addFunctionNode(new e(t,Object.assign({},N,{returnType:r||"Number",lookupReturnType:v,lookupArgumentType:S,lookupFunctionArgumentTypes:A,lookupFunctionArgumentName:R,lookupFunctionArgumentBitRatio:w,triggerImplyArgumentType:D,triggerTrackArgumentSynonym:k,lookupArgumentSynonym:F,onFunctionCall:I})))},lookupReturnType:v,lookupArgumentType:S,lookupFunctionArgumentTypes:A,lookupFunctionArgumentName:R,lookupFunctionArgumentBitRatio:w,triggerImplyArgumentType:D,triggerTrackArgumentSynonym:k,lookupArgumentSynonym:F,onFunctionCall:I,optimizeFloatMemory:m,precision:g,constants:u,constantTypes:h,constantBitRatios:l,debug:c,loopMaxIterations:p,output:d,plugins:x},n||{}),C=Object.assign({},N,{isRootKernel:!0,name:"kernel",argumentNames:s,argumentTypes:i,argumentSizes:a,argumentBitRatios:o,leadingReturnStatement:E,followingReturnStatement:b});if("object"==typeof y&&y.functionNodes)return(new r).fromJSON(y.functionNodes,e);const O=new e(y,C);let P=null;_&&(P=_.map(t=>new e(t.source,{returnType:t.returnType,argumentTypes:t.argumentTypes,output:d,plugins:x,constants:u,constantTypes:h,constantBitRatios:l,optimizeFloatMemory:m,precision:g,lookupReturnType:v,lookupArgumentType:S,lookupFunctionArgumentTypes:A,lookupFunctionArgumentName:R,lookupFunctionArgumentBitRatio:w,triggerImplyArgumentType:D,triggerTrackArgumentSynonym:k,lookupArgumentSynonym:F,onFunctionCall:I})));let L=null;T&&(L=T.map(t=>{const{name:r,source:n}=t;return new e(n,Object.assign({},N,{name:r,isSubKernel:!0,isRootKernel:!1,returnType:"Number"}))}));const U=new r({kernel:t,rootNode:O,functionNodes:P,nativeFunctions:f,subKernelNodes:L});return U}constructor(t){if(t=t||{},this.kernel=t.kernel,this.rootNode=t.rootNode,this.functionNodes=t.functionNodes||[],this.subKernelNodes=t.subKernelNodes||[],this.nativeFunctions=t.nativeFunctions||[],this.functionMap={},this.nativeFunctionNames=[],this.lookupChain=[],this.argumentChain=[],this.functionNodeDependencies={},this.rootNode&&(this.functionMap.kernel=this.rootNode),this.functionNodes)for(let t=0;t<this.functionNodes.length;t++)this.functionMap[this.functionNodes[t].name]=this.functionNodes[t];if(this.subKernelNodes)for(let t=0;t<this.subKernelNodes.length;t++)this.functionMap[this.subKernelNodes[t].name]=this.subKernelNodes[t];if(this.nativeFunctions)for(let t=0;t<this.nativeFunctions.length;t++){const e=this.nativeFunctions[t];this.nativeFunctionNames.push(e.name)}}addFunctionNode(t){this.functionMap[t.name]=t,t.isRootKernel&&(this.rootNode=t)}traceFunctionCalls(t,e){if(t=t||"kernel",e=e||[],this.nativeFunctionNames.indexOf(t)>-1)return-1===e.indexOf(t)&&e.push(t),e;const r=this.functionMap[t];if(r){const n=e.indexOf(t);if(-1===n){e.push(t),r.toString();for(let t=0;t<r.calledFunctions.length;++t)this.traceFunctionCalls(r.calledFunctions[t],e)}else{const t=e.splice(n,1)[0];e.push(t)}}return e}getPrototypeString(t){return this.getPrototypes(t).join("\n")}getPrototypes(t){return this.rootNode&&this.rootNode.toString(),t?this.getPrototypesFromFunctionNames(this.traceFunctionCalls(t,[]).reverse()):this.getPrototypesFromFunctionNames(Object.keys(this.functionMap))}getStringFromFunctionNames(t){const e=[];for(let r=0;r<t.length;++r){this.functionMap[t[r]]&&e.push(this.functionMap[t[r]].toString())}return e.join("\n")}getPrototypesFromFunctionNames(t){const e=[];for(let r=0;r<t.length;++r){const n=t[r],s=this.nativeFunctionNames.indexOf(n);if(s>-1){e.push(this.nativeFunctions[s].source);continue}const i=this.functionMap[n];i&&e.push(i.toString())}return e}toJSON(){return this.traceFunctionCalls(this.rootNode.name).reverse().map(t=>{const e=this.nativeFunctions.indexOf(t);if(e>-1)return{name:t,source:this.nativeFunctions[e].source};if(this.functionMap[t])return this.functionMap[t].toJSON();throw new Error(`function ${t} not found`)})}fromJSON(t,e){this.functionMap={};for(let r=0;r<t.length;r++){const n=t[r];this.functionMap[n.settings.name]=new e(n.ast,n.settings)}return this}getString(t){return t?this.getStringFromFunctionNames(this.traceFunctionCalls(t).reverse()):this.getStringFromFunctionNames(Object.keys(this.functionMap))}lookupArgumentType(t,e){const r=e.argumentNames.indexOf(t);if(-1===r)return null;if(0===this.lookupChain.length)return null;let n=this.lookupChain[this.lookupChain.length-1-this.argumentChain.length];if(!n)return null;const{ast:s,requestingNode:i}=n;if(0===s.arguments.length)return null;const a=s.arguments[r];if(!a)return null;this.argumentChain.push(t);const o=i.getType(a);return this.argumentChain.pop(),o}lookupReturnType(t,e,r){if("CallExpression"!==e.type)throw new Error(`expected ast type of "CallExpression", but is ${e.type}`);if(this._isNativeFunction(t))return this._lookupNativeFunctionReturnType(t);if(this._isFunction(t)){const n=this._getFunction(t);if(n.returnType)return n.returnType;{this.lookupChain.push({name:r.name,ast:e,requestingNode:r});const t=n.getType(n.getJsAST());return this.lookupChain.pop(),n.returnType=t}}return null}_getFunction(t){return this._isFunction(t)||new Error(`Function ${t} not found`),this.functionMap[t]}_isFunction(t){return Boolean(this.functionMap[t])}_getNativeFunction(t){for(let e=0;e<this.nativeFunctions.length;e++)if(this.nativeFunctions[e].name===t)return this.nativeFunctions[e];return null}_isNativeFunction(t){return Boolean(this._getNativeFunction(t))}_lookupNativeFunctionReturnType(t){let e=this._getNativeFunction(t);if(e)return e.returnType;throw new Error(`Native function ${t} not found`)}lookupFunctionArgumentTypes(t){return this._isNativeFunction(t)?this._getNativeFunction(t).argumentTypes:this._isFunction(t)?this._getFunction(t).argumentTypes:null}lookupFunctionArgumentName(t,e){return this._getFunction(t).argumentNames[e]}lookupFunctionArgumentBitRatio(t,e){if(!this._isFunction(t))throw new Error("function not found");if(this.rootNode.name===t){const t=this.rootNode.argumentNames.indexOf(e);if(-1!==t)return this.rootNode.argumentBitRatios[t];throw new Error("argument bit ratio not found")}{const e=this._getFunction(t),r=e.argumentSynonym[e.synonymIndex];if(!r)throw new Error("argument synonym not found");return this.lookupFunctionArgumentBitRatio(r.functionName,r.argumentName)}}assignArgumentType(t,e,r,n){this._isFunction(t)&&(this._getFunction(t).argumentTypes[e]=r)}trackArgumentSynonym(t,e,r,n){if(!this._isFunction(r))return;const s=this._getFunction(r);s.argumentSynonym||(s.argumentSynonym={});const i=s.argumentNames[n];s.argumentSynonym[i]||(s.argumentSynonym[i]={}),s.synonymIndex++,s.argumentSynonym[s.synonymIndex]={functionName:t,argumentName:e,calleeArgumentName:i,calleeFunctionName:r}}lookupArgumentSynonym(t,e,r){if(t===e)return r;if(!this._isFunction(e))return null;const n=this._getFunction(e),s=n.argumentSynonym[n.synonymUseIndex];return s?s.calleeArgumentName!==r?null:(n.synonymUseIndex++,t!==e?this.lookupArgumentSynonym(t,s.functionName,s.argumentName):s.argumentName):null}trackFunctionCall(t,e){this.functionNodeDependencies[t]||(this.functionNodeDependencies[t]=new Set),this.functionNodeDependencies[t].add(e)}getKernelResultType(){return this.rootNode.getType(this.rootNode.ast)}getReturnTypes(){const t={[this.rootNode.name]:this.rootNode.getType(this.rootNode.ast)},e=this.traceFunctionCalls(this.rootNode.name);for(let r=0;r<e.length;r++){const n=e[r],s=this.functionMap[n];t[n]=s.getType(s.ast)}return t}}t.exports={FunctionBuilder:r}},function(t,e,r){const{GLKernel:n}=r(17),{FunctionBuilder:s}=r(5),{WebGLFunctionNode:i}=r(13),{utils:a}=r(2),{Texture:o}=r(4),u=r(28),{fragmentShader:h}=r(29),{vertexShader:l}=r(30),{webGLKernelString:c}=r(31);let p=null,f=null,d=null,m=null,g=null;const x=[u],y=[],T={};t.exports={WebGLKernel:class extends n{static get isSupported(){return null!==p?p:(this.setupFeatureChecks(),p=this.isContextMatch(d))}static setupFeatureChecks(){"undefined"!=typeof document?f=document.createElement("canvas"):"undefined"!=typeof OffscreenCanvas&&(f=new OffscreenCanvas(0,0)),f&&(d=f.getContext("webgl")||f.getContext("experimental-webgl"))&&d.getExtension&&(m={OES_texture_float:d.getExtension("OES_texture_float"),OES_texture_float_linear:d.getExtension("OES_texture_float_linear"),OES_element_index_uint:d.getExtension("OES_element_index_uint"),WEBGL_draw_buffers:d.getExtension("WEBGL_draw_buffers")},g=this.getFeatures())}static isContextMatch(t){return"undefined"!=typeof WebGLRenderingContext&&t instanceof WebGLRenderingContext}static getFeatures(){const t=this.getIsDrawBuffers();return Object.freeze({isFloatRead:this.getIsFloatRead(),isIntegerDivisionAccurate:this.getIsIntegerDivisionAccurate(),isTextureFloat:this.getIsTextureFloat(),isDrawBuffers:t,kernelMap:t,channelCount:this.getChannelCount()})}static getIsTextureFloat(){return Boolean(m.OES_texture_float)}static getIsDrawBuffers(){return Boolean(m.WEBGL_draw_buffers)}static getChannelCount(){return m.WEBGL_draw_buffers?m.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL:1}static get testCanvas(){return f}static get testContext(){return d}static get features(){return g}static get fragmentShader(){return h}static get vertexShader(){return l}constructor(t,e){super(t,e),this.textureCache={},this.threadDim={},this.programUniformLocationCache={},this.framebuffer=null,this.buffer=null,this.program=null,this.pipeline=e.pipeline,this.endianness=a.systemEndianness(),this.extensions={},this.subKernelOutputTextures=null,this.argumentsLength=0,this.constantsLength=0,this.compiledFragmentShader=null,this.compiledVertexShader=null,this.fragShader=null,this.vertShader=null,this.drawBuffersMap=null,this.outputTexture=null,this.maxTexSize=null,this.uniform1fCache={},this.uniform1iCache={},this.uniform2fCache={},this.uniform2fvCache={},this.uniform2ivCache={},this.uniform3fvCache={},this.uniform3ivCache={},this.mergeSettings(t.settings||e)}initCanvas(){if("undefined"!=typeof document){const t=document.createElement("canvas");return t.width=2,t.height=2,t}if("undefined"!=typeof OffscreenCanvas)return new OffscreenCanvas(0,0)}initContext(){const t={alpha:!1,depth:!1,antialias:!1};return this.canvas.getContext("webgl",t)||this.canvas.getContext("experimental-webgl",t)}initPlugins(t){const e=[],{source:r}=this;if("string"==typeof r)for(let t=0;t<x.length;t++){const n=x[t];r.match(n.functionMatch)&&e.push(n)}else if("object"==typeof r&&t.pluginNames)for(let r=0;r<x.length;r++){const n=x[r];t.pluginNames.some(t=>t===n.name)&&e.push(n)}return e}initExtensions(){this.extensions={OES_texture_float:this.context.getExtension("OES_texture_float"),OES_texture_float_linear:this.context.getExtension("OES_texture_float_linear"),OES_element_index_uint:this.context.getExtension("OES_element_index_uint"),WEBGL_draw_buffers:this.context.getExtension("WEBGL_draw_buffers"),WEBGL_color_buffer_float:this.context.getExtension("WEBGL_color_buffer_float")}}validateSettings(){if(!this.validate)return void(this.texSize=a.dimToTexSize({floatTextures:this.optimizeFloatMemory,floatOutput:"single"===this.precision},this.output,!0));const{features:t}=this.constructor;if(!0===this.optimizeFloatMemory&&!t.isTextureFloat)throw new Error("Float textures are not supported");if("single"===this.precision&&!0!==this.floatOutputForce&&!t.isFloatRead)throw new Error("Single precision not supported");if(!this.graphical&&null===this.precision&&t.isTextureFloat&&(this.precision=t.isFloatRead?"single":"unsigned"),this.subKernels&&this.subKernels.length>0&&!this.extensions.WEBGL_draw_buffers)throw new Error("could not instantiate draw buffers extension");if(null===this.fixIntegerDivisionAccuracy?this.fixIntegerDivisionAccuracy=!t.isIntegerDivisionAccurate:this.fixIntegerDivisionAccuracy&&t.isIntegerDivisionAccurate&&(this.fixIntegerDivisionAccuracy=!1),this.checkOutput(),!this.output||0===this.output.length){if(1!==arguments.length)throw new Error("Auto output only supported for kernels with only one input");const t=a.getVariableType(arguments[0]);if("Array"===t)this.output=a.getDimensions(t);else{if("NumberTexture"!==t&&"ArrayTexture(4)"!==t)throw new Error("Auto output not supported for input type: "+t);this.output=arguments[0].output}}if(this.graphical){if(2!==this.output.length)throw new Error("Output must have 2 dimensions on graphical mode");return"precision"===this.precision&&(this.precision="unsigned",console.warn("Cannot use graphical mode and single precision at the same time")),void(this.texSize=a.clone(this.output))}null===this.precision&&t.isTextureFloat&&(this.precision="single"),this.texSize=a.dimToTexSize({floatTextures:this.floatTextures,floatOutput:"single"===this.precision},this.output,!0)}updateMaxTexSize(){const{texSize:t,canvas:e}=this;if(null===this.maxTexSize){let r=y.indexOf(e);-1===r&&(r=y.length,y.push(e),T[r]=[t[0],t[1]]),this.maxTexSize=T[r]}this.maxTexSize[0]<t[0]&&(this.maxTexSize[0]=t[0]),this.maxTexSize[1]<t[1]&&(this.maxTexSize[1]=t[1])}_oldtranslateSource(){const t=s.fromKernel(this,i,{fixIntegerDivisionAccuracy:this.fixIntegerDivisionAccuracy}),e=t.getPrototypeString("kernel");this.returnType||(this.returnType=t.getKernelResultType());let r=0;const n=t.getReturnTypes();for(let t=0;t<n.length;t++)switch(n[t]){case"Float":case"Number":case"Integer":r++;break;case"Array(2)":r+=2;break;case"Array(3)":r+=3;break;case"Array(4)":r+=4}if(g&&r>g.channelCount)throw new Error("Too many channels!");return this.translatedSource=e}build(){this.initExtensions(),this.validateSettings(),this.setupConstants(),this.setupArguments(arguments),this.updateMaxTexSize(),this.translateSource(),this.pickRenderStrategy();const t=this.texSize,e=this.context,r=this.canvas;e.enable(e.SCISSOR_TEST),this.pipeline&&this.precision,e.viewport(0,0,this.maxTexSize[0],this.maxTexSize[1]),r.width=this.maxTexSize[0],r.height=this.maxTexSize[1];const n=this.threadDim=Array.from(this.output);for(;n.length<3;)n.push(1);const s=this.getVertexShader(arguments),i=e.createShader(e.VERTEX_SHADER);e.shaderSource(i,s),e.compileShader(i),this.vertShader=i;const o=this.getFragmentShader(arguments),u=e.createShader(e.FRAGMENT_SHADER);if(e.shaderSource(u,o),e.compileShader(u),this.fragShader=u,this.debug&&(console.log("GLSL Shader Output:"),console.log(o)),!e.getShaderParameter(i,e.COMPILE_STATUS))throw new Error("Error compiling vertex shader: "+e.getShaderInfoLog(i));if(!e.getShaderParameter(u,e.COMPILE_STATUS))throw new Error("Error compiling fragment shader: "+e.getShaderInfoLog(u));const h=this.program=e.createProgram();e.attachShader(h,i),e.attachShader(h,u),e.linkProgram(h),this.framebuffer=e.createFramebuffer(),this.framebuffer.width=t[0],this.framebuffer.height=t[1];const l=new Float32Array([-1,-1,1,-1,-1,1,1,1]),c=new Float32Array([0,0,1,0,0,1,1,1]),p=l.byteLength;let f=this.buffer;f?e.bindBuffer(e.ARRAY_BUFFER,f):(f=this.buffer=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,f),e.bufferData(e.ARRAY_BUFFER,l.byteLength+c.byteLength,e.STATIC_DRAW)),e.bufferSubData(e.ARRAY_BUFFER,0,l),e.bufferSubData(e.ARRAY_BUFFER,p,c);const d=e.getAttribLocation(this.program,"aPos");e.enableVertexAttribArray(d),e.vertexAttribPointer(d,2,e.FLOAT,!1,0,0);const m=e.getAttribLocation(this.program,"aTexCoord");e.enableVertexAttribArray(m),e.vertexAttribPointer(m,2,e.FLOAT,!1,0,p),e.bindFramebuffer(e.FRAMEBUFFER,this.framebuffer);for(let t in this.constants){const r=this.constants[t],n=a.getVariableType(r);"Float"!==n&&"Integer"!==n&&"Boolean"!==n&&(e.useProgram(this.program),this.addConstant(this.constants[t],n,t))}this.immutable||(this._setupOutputTexture(),null!==this.subKernels&&this.subKernels.length>0&&this._setupSubOutputTextures(this.subKernels.length))}translateSource(){const t=s.fromKernel(this,i,{fixIntegerDivisionAccuracy:this.fixIntegerDivisionAccuracy});this.translatedSource=t.getPrototypeString("kernel"),this.graphical||this.returnType||(this.returnType=t.getKernelResultType())}run(){null===this.program&&this.build.apply(this,arguments);const t=this.argumentNames,e=this.argumentTypes,r=this.texSize,n=this.context;n.useProgram(this.program),n.scissor(0,0,r[0],r[1]),this.hardcodeConstants||(this.setUniform3iv("uOutputDim",this.threadDim),this.setUniform2iv("uTexSize",r)),this.setUniform2f("ratio",r[0]/this.maxTexSize[0],r[1]/this.maxTexSize[1]),this.argumentsLength=0;for(let r=0;r<t.length;r++)this.addArgument(arguments[r],e[r],t[r]);if(this.plugins)for(let t=0;t<this.plugins.length;t++){const e=this.plugins[t];e.onBeforeRun&&e.onBeforeRun(this)}if(this.graphical)return this.pipeline?(n.bindRenderbuffer(n.RENDERBUFFER,null),n.bindFramebuffer(n.FRAMEBUFFER,this.framebuffer),this.outputTexture&&!this.immutable||this._setupOutputTexture(),n.drawArrays(n.TRIANGLE_STRIP,0,4),new o({texture:this.outputTexture,size:r,dimensions:this.threadDim,output:this.output,context:this.context,gpu:this.gpu,type:this.getReturnTextureType()})):(n.bindRenderbuffer(n.RENDERBUFFER,null),n.bindFramebuffer(n.FRAMEBUFFER,null),void n.drawArrays(n.TRIANGLE_STRIP,0,4));if(n.bindFramebuffer(n.FRAMEBUFFER,this.framebuffer),this.immutable&&this._setupOutputTexture(),null!==this.subKernels&&(this.immutable&&(this.subKernelOutputTextures=[],this._setupSubOutputTextures(this.subKernels.length)),this.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(this.drawBuffersMap)),n.drawArrays(n.TRIANGLE_STRIP,0,4),null!==this.subKernelOutputTextures&&null!==this.subKernels){const t={result:this.renderOutput()};if(this.pipeline)for(let e=0;e<this.subKernels.length;e++)t[this.subKernels[e].property]=new o({texture:this.subKernelOutputTextures[e],size:r,dimensions:this.threadDim,output:this.output,context:this.context,gpu:this.gpu,type:this.getReturnTextureType()});else for(let e=0;e<this.subKernels.length;e++)t[this.subKernels[e].property]=new o({texture:this.subKernelOutputTextures[e],size:r,dimensions:this.threadDim,output:this.output,context:this.context,gpu:this.gpu,type:this.getReturnTextureType()}).toArray();return t}return this.renderOutput()}getOutputTexture(){return this.outputTexture}_setupOutputTexture(){const t=this.context,e=this.texSize,r=this.outputTexture=this.context.createTexture();if(t.activeTexture(t.TEXTURE0+this.constantsLength+this.argumentNames.length),t.bindTexture(t.TEXTURE_2D,r),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),"single"===this.precision)if(this.pipeline)switch(this.returnType){case"Number":case"Float":case"Integer":this.optimizeFloatMemory,t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e[0],e[1],0,t.RGBA,t.FLOAT,null);break;case"Array(2)":case"Array(3)":case"Array(4)":t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e[0],e[1],0,t.RGBA,t.FLOAT,null);break;default:if(!this.graphical)throw new Error("Unhandled return type")}else t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e[0],e[1],0,t.RGBA,t.FLOAT,null);else t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e[0],e[1],0,t.RGBA,t.UNSIGNED_BYTE,null);t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0)}_setupSubOutputTextures(t){const e=this.context,r=this.texSize,n=this.drawBuffersMap=[e.COLOR_ATTACHMENT0],s=this.subKernelOutputTextures=[];for(let i=0;i<t;i++){const t=this.context.createTexture();s.push(t),n.push(e.COLOR_ATTACHMENT0+i+1),e.activeTexture(e.TEXTURE0+this.constantsLength+this.argumentNames.length+i),e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),"single"===this.precision?e.texImage2D(e.TEXTURE_2D,0,e.RGBA,r[0],r[1],0,e.RGBA,e.FLOAT,null):e.texImage2D(e.TEXTURE_2D,0,e.RGBA,r[0],r[1],0,e.RGBA,e.UNSIGNED_BYTE,null),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+i+1,e.TEXTURE_2D,t,0)}}getArgumentTexture(t){return this.getTextureCache(`ARGUMENT_${t}`)}getTextureCache(t){return this.textureCache.hasOwnProperty(t)?this.textureCache[t]:this.textureCache[t]=this.context.createTexture()}detachTextureCache(t){delete this.textureCache[t]}setUniform1f(t,e){if(this.uniform1fCache.hasOwnProperty(t)&&e===this.uniform1fCache[t])return;this.uniform1fCache[t]=e;const r=this.getUniformLocation(t);this.context.uniform1f(r,e)}setUniform1i(t,e){if(this.uniform1iCache.hasOwnProperty(t)&&e===this.uniform1iCache[t])return;this.uniform1iCache[t]=e;const r=this.getUniformLocation(t);this.context.uniform1i(r,e)}setUniform2f(t,e,r){if(this.uniform2fCache.hasOwnProperty(t)){const n=this.uniform2fCache[t];if(e===n[0]&&r===n[1])return}this.uniform2fCache[t]=[e,r];const n=this.getUniformLocation(t);this.context.uniform2f(n,e,r)}setUniform2fv(t,e){if(this.uniform2fvCache.hasOwnProperty(t)){const r=this.uniform2fvCache[t];if(e[0]===r[0]&&e[1]===r[1])return}this.uniform2fvCache[t]=e;const r=this.getUniformLocation(t);this.context.uniform2fv(r,e)}setUniform2iv(t,e){if(this.uniform2ivCache.hasOwnProperty(t)){const r=this.uniform2ivCache[t];if(e[0]===r[0]&&e[1]===r[1])return}this.uniform2ivCache[t]=e;const r=this.getUniformLocation(t);this.context.uniform2iv(r,e)}setUniform3fv(t,e){if(this.uniform3fvCache.hasOwnProperty(t)){const r=this.uniform3fvCache[t];if(e[0]===r[0]&&e[1]===r[1]&&e[2]===r[2])return}this.uniform3fvCache[t]=e;const r=this.getUniformLocation(t);this.context.uniform3fv(r,e)}setUniform3iv(t,e){if(this.uniform3ivCache.hasOwnProperty(t)){const r=this.uniform3ivCache[t];if(e[0]===r[0]&&e[1]===r[1]&&e[2]===r[2])return}this.uniform3ivCache[t]=e;const r=this.getUniformLocation(t);this.context.uniform3iv(r,e)}getUniformLocation(t){return this.programUniformLocationCache.hasOwnProperty(t)?this.programUniformLocationCache[t]:this.programUniformLocationCache[t]=this.context.getUniformLocation(this.program,t)}_getFragShaderArtifactMap(t){return{HEADER:this._getHeaderString(),LOOP_MAX:this._getLoopMaxString(),PLUGINS:this._getPluginsString(),CONSTANTS:this._getConstantsString(),DECODE32_ENDIANNESS:this._getDecode32EndiannessString(),ENCODE32_ENDIANNESS:this._getEncode32EndiannessString(),DIVIDE_WITH_INTEGER_CHECK:this._getDivideWithIntegerCheckString(),MAIN_CONSTANTS:this._getMainConstantsString(),MAIN_ARGUMENTS:this._getMainArgumentsString(t),KERNEL:this.getKernelString(),MAIN_RESULT:this.getMainResultString()}}addArgument(t,e,r){const n=this.context,s=this.getArgumentTexture(r);switch(t instanceof o&&(e=t.type),e){case"Array":case"Array(2)":case"Array(3)":case"Array(4)":case"Array2D":case"Array3D":{const e=a.getDimensions(t,!0),i=this.argumentBitRatios[this.argumentsLength];if("single"===this.precision){const o=a.getMemoryOptimizedFloatTextureSize(e,i);n.activeTexture(n.TEXTURE0+this.constantsLength+this.argumentsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);const u=o[0]*o[1]*i,h=this.formatArrayTransfer(t,u,Float32Array);n.texImage2D(n.TEXTURE_2D,0,n.RGBA,o[0],o[1],0,n.RGBA,n.FLOAT,h),this.hardcodeConstants||(this.setUniform3iv(`user_${r}Dim`,e),this.setUniform2iv(`user_${r}Size`,o)),this.setUniform1i(`user_${r}`,this.argumentsLength)}else{const o=a.getMemoryOptimizedPackedTextureSize(e,i);n.activeTexture(n.TEXTURE0+this.constantsLength+this.argumentsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);const u=o[0]*o[1]*(4/i),h=this.formatArrayTransfer(t,u),l=new Uint8Array(h.buffer);n.texImage2D(n.TEXTURE_2D,0,n.RGBA,o[0],o[1],0,n.RGBA,n.UNSIGNED_BYTE,l),this.hardcodeConstants||(this.setUniform3iv(`user_${r}Dim`,e),this.setUniform2iv(`user_${r}Size`,o)),this.setUniform1i(`user_${r}`,this.argumentsLength)}break}case"Integer":this.setUniform1i(`user_${r}`,t);break;case"Float":case"Number":this.setUniform1f(`user_${r}`,t);break;case"Input":{const e=t,i=a.getDimensions(e,!0),o=this.argumentBitRatios[this.argumentsLength];if("single"===this.precision){const t=a.getMemoryOptimizedFloatTextureSize(i,o);n.activeTexture(n.TEXTURE0+this.constantsLength+this.argumentsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);const u=t[0]*t[1]*o,h=this.formatArrayTransfer(e.value,u,Float32Array);n.texImage2D(n.TEXTURE_2D,0,n.RGBA,t[0],t[1],0,n.RGBA,n.FLOAT,h),this.hardcodeConstants||(this.setUniform3iv(`user_${r}Dim`,i),this.setUniform2iv(`user_${r}Size`,t)),this.setUniform1i(`user_${r}`,this.argumentsLength)}else{const t=a.getMemoryOptimizedPackedTextureSize(i,o);n.activeTexture(n.TEXTURE0+this.constantsLength+this.argumentsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);const u=t[0]*t[1]*(4/o),h=this.formatArrayTransfer(e.value,u),l=new Uint8Array(h.buffer);n.texImage2D(n.TEXTURE_2D,0,n.RGBA,t[0],t[1],0,n.RGBA,n.UNSIGNED_BYTE,l),this.hardcodeConstants||(this.setUniform3iv(`user_${r}Dim`,i),this.setUniform2iv(`user_${r}Size`,t)),this.setUniform1i(`user_${r}`,this.argumentsLength)}break}case"HTMLImage":{const e=t,i=[e.width,e.height,1],a=[e.width,e.height];n.activeTexture(n.TEXTURE0+this.constantsLength+this.argumentsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,!0);const o=0,u=n.RGBA,h=n.RGBA,l=n.UNSIGNED_BYTE;n.texImage2D(n.TEXTURE_2D,o,u,h,l,e),this.setUniform3iv(`user_${r}Dim`,i),this.setUniform2iv(`user_${r}Size`,a),this.setUniform1i(`user_${r}`,this.argumentsLength);break}case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":{const s=t;if(s.context!==this.context)throw new Error(`argument ${r} (${e}) must be from same context`);const i=s.dimensions,a=s.size;n.activeTexture(n.TEXTURE0+this.constantsLength+this.argumentsLength),n.bindTexture(n.TEXTURE_2D,s.texture),this.setUniform3iv(`user_${r}Dim`,i),this.setUniform2iv(`user_${r}Size`,a),this.setUniform1i(`user_${r}`,this.argumentsLength);break}case"MemoryOptimizedNumberTexture":case"NumberTexture":{const s=t;if(s.context!==this.context)throw new Error(`argument ${r} (${e}) must be from same context`);const i=s.dimensions,a=s.size;n.activeTexture(n.TEXTURE0+this.constantsLength+this.argumentsLength),n.bindTexture(n.TEXTURE_2D,s.texture),this.setUniform3iv(`user_${r}Dim`,i),this.setUniform2iv(`user_${r}Size`,a),this.setUniform1i(`user_${r}`,this.argumentsLength);break}case"Boolean":this.setUniform1i(`user_${r}`,t?1:0);break;default:throw new Error("Argument type not supported: "+t)}this.argumentsLength++}addConstant(t,e,r){const n=this.context,s=this.getArgumentTexture(r);switch(t instanceof o&&(e=t.type),e){case"Array":case"Array(2)":case"Array(3)":case"Array(4)":case"Array2D":case"Array3D":{const e=a.getDimensions(t,!0),i=this.constantBitRatios[r];if("single"===this.precision){const o=a.getMemoryOptimizedFloatTextureSize(e,i);n.activeTexture(n.TEXTURE0+this.constantsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);const u=o[0]*o[1]*i,h=this.formatArrayTransfer(t,u,Float32Array);n.texImage2D(n.TEXTURE_2D,0,n.RGBA,o[0],o[1],0,n.RGBA,n.FLOAT,h),this.hardcodeConstants||(this.setUniform3iv(`constants_${r}Dim`,e),this.setUniform2iv(`constants_${r}Size`,o)),this.setUniform1i(`constants_${r}`,this.constantsLength)}else{const o=a.getMemoryOptimizedPackedTextureSize(e,i);n.activeTexture(n.TEXTURE0+this.constantsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);const u=o[0]*o[1]*(4/i),h=this.formatArrayTransfer(t,u),l=new Uint8Array(h.buffer);n.texImage2D(n.TEXTURE_2D,0,n.RGBA,o[0],o[1],0,n.RGBA,n.UNSIGNED_BYTE,l),this.hardcodeConstants||(this.setUniform3iv(`constants_${r}Dim`,e),this.setUniform2iv(`constants_${r}Size`,o)),this.setUniform1i(`constants_${r}`,this.constantsLength)}break}case"Input":{const e=t,i=a.getDimensions(e,!0),o=this.constantBitRatios[r];if("single"===this.precision){const t=a.getMemoryOptimizedFloatTextureSize(i,o);n.activeTexture(n.TEXTURE0+this.constantsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);const u=t[0]*t[1]*o,h=this.formatArrayTransfer(e.value,u,Float32Array);n.texImage2D(n.TEXTURE_2D,0,n.RGBA,t[0],t[1],0,n.RGBA,n.FLOAT,h),this.hardcodeConstants||(this.setUniform3iv(`constants_${r}Dim`,i),this.setUniform2iv(`constants_${r}Size`,t)),this.setUniform1i(`constants_${r}`,this.constantsLength)}else{const t=a.getMemoryOptimizedPackedTextureSize(i,o);n.activeTexture(n.TEXTURE0+this.constantsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);const u=t[0]*t[1]*(4/o),h=this.formatArrayTransfer(e.value,u),l=new Uint8Array(h.buffer);n.texImage2D(n.TEXTURE_2D,0,n.RGBA,t[0],t[1],0,n.RGBA,n.UNSIGNED_BYTE,l),this.hardcodeConstants||(this.setUniform3iv(`constants_${r}Dim`,i),this.setUniform2iv(`constants_${r}Size`,t)),this.setUniform1i(`constants_${r}`,this.argumentsLength)}break}case"HTMLImage":{const e=t,i=[e.width,e.height,1],a=[e.width,e.height];n.activeTexture(n.TEXTURE0+this.constantsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,!0);const o=0,u=n.RGBA,h=n.RGBA,l=n.UNSIGNED_BYTE;n.texImage2D(n.TEXTURE_2D,o,u,h,l,e),this.setUniform3iv(`constants_${r}Dim`,i),this.setUniform2iv(`constants_${r}Size`,a),this.setUniform1i(`constants_${r}`,this.constantsLength);break}case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":{const s=t;if(s.context!==this.context)throw new Error(`constant ${r} (${e}) must be from same context`);const i=s.dimensions,a=s.size;n.activeTexture(n.TEXTURE0+this.constantsLength),n.bindTexture(n.TEXTURE_2D,s.texture),this.setUniform3iv(`constants_${r}Dim`,i),this.setUniform2iv(`constants_${r}Size`,a),this.setUniform1i(`constants_${r}`,this.constantsLength);break}case"MemoryOptimizedNumberTexture":case"NumberTexture":{const s=t;if(s.context!==this.context)throw new Error(`constant ${r} (${e}) must be from same context`);const i=s.dimensions,a=s.size;n.activeTexture(n.TEXTURE0+this.constantsLength),n.bindTexture(n.TEXTURE_2D,s.texture),this.setUniform3iv(`constants_${r}Dim`,i),this.setUniform2iv(`constants_${r}Size`,a),this.setUniform1i(`constants_${r}`,this.constantsLength);break}case"Integer":case"Float":case"Boolean":default:throw new Error("constant type not supported: "+t)}this.constantsLength++}formatArrayTransfer(t,e,r){if(this.floatTextures,a.isArray(t[0])||this.optimizeFloatMemory){const r=new Float32Array(e);return a.flattenTo(t,r),r}switch(t.constructor){case Uint8Array:case Int8Array:case Uint16Array:case Int16Array:case Float32Array:case Int32Array:const n=new(r||t.constructor)(e);return a.flattenTo(t,n),n;default:{const r=new Float32Array(e);return a.flattenTo(t,r),r}}}_getHeaderString(){return null!==this.subKernels?"#extension GL_EXT_draw_buffers : require\n":""}_getLoopMaxString(){return this.loopMaxIterations?` ${parseInt(this.loopMaxIterations)};\n`:" 1000;\n"}_getPluginsString(){return this.plugins?this.plugins.map(t=>t.source&&this.source.match(t.functionMatch)?t.source:"").join("\n"):"\n"}_getConstantsString(){const t=[],{threadDim:e,texSize:r}=this;return this.hardcodeConstants?t.push(`ivec3 uOutputDim = ivec3(${e[0]}, ${e[1]}, ${e[2]})`,`ivec2 uTexSize = ivec2(${r[0]}, ${r[1]})`):t.push("uniform ivec3 uOutputDim","uniform ivec2 uTexSize"),a.linesToString(t)}_getTextureCoordinate(){const t=this.subKernels;return null===t||t.length<1?"varying vec2 vTexCoord;\n":"out vec2 vTexCoord;\n"}_getDecode32EndiannessString(){return"LE"===this.endianness?"":"  texel.rgba = texel.abgr;\n"}_getEncode32EndiannessString(){return"LE"===this.endianness?"":"  texel.rgba = texel.abgr;\n"}_getDivideWithIntegerCheckString(){return this.fixIntegerDivisionAccuracy?"float div_with_int_check(float x, float y) {\n  if (floor(x) == x && floor(y) == y && integerMod(x, y) == 0.0) {\n    return float(int(x)/int(y));\n  }\n  return x / y;\n}":""}_getMainArgumentsString(t){const e=[],{argumentTypes:r,argumentNames:n,hardcodeConstants:s,optimizeFloatMemory:i,precision:o}=this;for(let u=0;u<n.length;u++){const h=t[u],l=n[u],c=r[u];if(s)switch(c){case"Array":case"NumberTexture":case"MemoryOptimizedNumberTexture":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":case"Input":case"HTMLImage":const t=a.getDimensions(h,!0),r=a.dimToTexSize({floatTextures:i,floatOutput:"single"===o},t);e.push(`uniform sampler2D user_${l}`,`ivec2 user_${l}Size = ivec2(${r[0]}, ${r[1]})`,`ivec3 user_${l}Dim = ivec3(${t[0]}, ${t[1]}, ${t[2]})`);break;case"Integer":e.push(`float user_${l} = ${h}.0`);break;case"Float":case"Number":e.push(`float user_${l} = ${Number.isInteger(h)?h+".0":h}`);break;default:throw new Error(`Argument type ${c} not supported in WebGL`)}else switch(c){case"Array":case"NumberTexture":case"MemoryOptimizedNumberTexture":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":case"Input":case"HTMLImage":e.push(`uniform sampler2D user_${l}`,`uniform ivec2 user_${l}Size`,`uniform ivec3 user_${l}Dim`);break;case"Integer":e.push(`uniform int user_${l}`);break;case"Float":case"Number":e.push(`uniform float user_${l}`);break;case"Boolean":e.push(`uniform int user_${l}`);break;default:throw new Error(`Argument type ${c} not supported in WebGL`)}}return a.linesToString(e)}_getMainConstantsString(){const t=[],{constants:e}=this;if(e)for(let r in e){if(!e.hasOwnProperty(r))continue;let n=e[r],s=a.getVariableType(n);switch(s){case"Integer":t.push("const int constants_"+r+" = "+parseInt(n));break;case"Float":t.push("const float constants_"+r+" = "+parseFloat(n));break;case"Array":case"Input":case"HTMLImage":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":case"NumberTexture":t.push(`uniform sampler2D constants_${r}`,`uniform ivec2 constants_${r}Size`,`uniform ivec3 constants_${r}Dim`);break;case"Boolean":t.push("const bool constants_"+r+" = "+(n?"true":"false"));break;default:throw new Error(`Unsupported constant ${r} type ${s}`)}}return a.linesToString(t)}getKernelString(){let t;switch(this.returnType){case"Array(2)":t="vec2 kernelResult";break;case"Array(3)":t="vec3 kernelResult";break;case"Array(4)":t="vec4 kernelResult";break;case"LiteralInteger":case"Float":case"Number":case"Integer":t="float kernelResult";break;default:if(!this.graphical)throw new Error(`unrecognized output type "${this.returnType}"`);t="float kernelResult"}const e=[],r=this.subKernels;if(null!==r){e.push(t);for(let t=0;t<r.length;t++)e.push(`float subKernelResult_${r[t].name} = 0.0`)}else e.push(t);return a.linesToString(e)+this.translatedSource}getMainResultGraphical(){return a.linesToString(["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragColor = actualColor"])}getMainResultPackedPixels(){switch(this.returnType){case"LiteralInteger":case"Number":case"Integer":case"Float":return a.linesToString(this.getMainResultKernelPackedPixels())+a.linesToString(this.getMainResultSubKernelPackedPixels());default:throw new Error(`packed output only usable with Numbers, "${this.returnType}" specified`)}}getMainResultKernelPackedPixels(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragData[0] = encode32(kernelResult)"]}getMainResultSubKernelPackedPixels(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;e++)t.push(`  gl_FragData[${e+1}] = encode32(subKernelResult_${this.subKernels[e].name})`);return t}getMainResultMemoryOptimizedFloats(){const t=["  index *= 4"];switch(this.returnType){case"Number":case"Integer":case"Float":const e=["r","g","b","a"];for(let r=0;r<e.length;r++){const n=e[r];this.getMainResultKernelMemoryOptimizedFloats(t,n),this.getMainResultSubKernelMemoryOptimizedFloats(t,n),r+1<e.length&&t.push("  index += 1")}break;default:throw new Error(`optimized output only usable with Numbers, ${this.returnType} specified`)}return a.linesToString(t)}getMainResultKernelMemoryOptimizedFloats(t,e){t.push("  threadId = indexTo3D(index, uOutputDim)","  kernel()",`  gl_FragData[0].${e} = kernelResult`)}getMainResultSubKernelMemoryOptimizedFloats(t,e){if(!this.subKernels)return t;for(let r=0;r<this.subKernels.length;r++)t.push(`  gl_FragData[${r+1}].${e} = subKernelResult_${this.subKernels[r].name}`)}getMainResultKernelNumberTexture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragData[0][0] = kernelResult"]}getMainResultSubKernelNumberTexture(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;++e)t.push(`  gl_FragData[${e+1}][0] = subKernelResult_${this.subKernels[e].name}`);return t}getMainResultKernelArray2Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragData[0][0] = kernelResult[0]","  gl_FragData[0][1] = kernelResult[1]"]}getMainResultSubKernelArray2Texture(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;++e)t.push(`  gl_FragData[${e+1}][0] = subKernelResult_${this.subKernels[e].name}[0]`,`  gl_FragData[${e+1}][1] = subKernelResult_${this.subKernels[e].name}[1]`);return t}getMainResultKernelArray3Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragData[0][0] = kernelResult[0]","  gl_FragData[0][1] = kernelResult[1]","  gl_FragData[0][2] = kernelResult[2]"]}getMainResultSubKernelArray3Texture(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;++e)t.push(`  gl_FragData[${e+1}][0] = subKernelResult_${this.subKernels[e].name}[0]`,`  gl_FragData[${e+1}][1] = subKernelResult_${this.subKernels[e].name}[1]`,`  gl_FragData[${e+1}][2] = subKernelResult_${this.subKernels[e].name}[2]`);return t}getMainResultKernelArray4Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragData[0] = kernelResult"]}getMainResultSubKernelArray4Texture(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;++e)t.push(`  gl_FragData[${e+1}] = subKernelResult_${this.subKernels[e].name}`);return t}_getMainResultString(){const{subKernels:t,precision:e,floatTextures:r,graphical:n,pipeline:s}=this,i=[];if("single"===e&&i.push("  index *= 4"),n)i.push("  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragColor = actualColor");else if("single"===e){const e=["r","g","b","a"];for(let r=0;r<e.length;++r){if(i.push("  threadId = indexTo3D(index, uOutputDim)"),i.push("  kernel()"),t){i.push(`  gl_FragData[0].${e[r]} = kernelResult`);for(let n=0;n<t.length;++n)i.push(`  gl_FragData[${n+1}].${e[r]} = subKernelResult_${t[n].name}`)}else i.push(`  gl_FragColor.${e[r]} = kernelResult`);r<e.length-1&&i.push("  index += 1")}}else if(null!==t){i.push("  threadId = indexTo3D(index, uOutputDim)"),i.push("  kernel()"),i.push("  gl_FragData[0] = encode32(kernelResult)");for(let e=0;e<t.length;e++)i.push(`  gl_FragData[${e+1}] = encode32(subKernelResult_${t[e].name})`)}else i.push("  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragColor = encode32(kernelResult)");return a.linesToString(i)}replaceArtifacts(t,e){return t.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z])*)__;\n/g,(t,r)=>{if(e.hasOwnProperty(r))return e[r];throw`unhandled artifact ${r}`})}getFragmentShader(t){return null!==this.compiledFragmentShader?this.compiledFragmentShader:this.compiledFragmentShader=this.replaceArtifacts(this.constructor.fragmentShader,this._getFragShaderArtifactMap(t))}getVertexShader(t){return null!==this.compiledVertexShader?this.compiledVertexShader:this.compiledVertexShader=this.constructor.vertexShader}toString(){return c(this)}destroy(t){this.outputTexture&&this.context.deleteTexture(this.outputTexture),this.buffer&&this.context.deleteBuffer(this.buffer),this.framebuffer&&this.context.deleteFramebuffer(this.framebuffer),this.vertShader&&this.context.deleteShader(this.vertShader),this.fragShader&&this.context.deleteShader(this.fragShader),this.program&&this.context.deleteProgram(this.program);const e=Object.keys(this.textureCache);for(let t=0;t<e.length;t++){const r=e[t];this.context.deleteTexture(this.textureCache[r])}if(this.subKernelOutputTextures)for(let t=0;t<this.subKernelOutputTextures.length;t++)this.context.deleteTexture(this.subKernelOutputTextures[t]);if(t){const t=y.indexOf(this.canvas);t>=0&&(y[t]=null,T[t]=null)}this.destroyExtensions(),delete this.context,delete this.canvas}destroyExtensions(){this.extensions.OES_texture_float=null,this.extensions.OES_texture_float_linear=null,this.extensions.OES_element_index_uint=null,this.extensions.WEBGL_draw_buffers=null}static destroyContext(t){const e=t.getExtension("WEBGL_lose_context");e&&e.loseContext()}toJSON(){const t=super.toJSON();return t.functionNodes=s.fromKernel(this,i).toJSON(),t}}}},function(t,e,r){"use strict";r.r(e);var n=r(0),s=Object(n.default)(function(t,e){let r=-1;const n=e.length,s=new Array(n);for(;++r<n;)s[r]=t(e[r],r,e);return s});function i(t){return new t.constructor}var a=r(8),o=Object(n.default)(function(t,e){const r=Object(a.a)(e);let n=-1;const s=r.length,o=i(e);for(;++n<s;)o[r[n]]=t(e[r[n]],r[n],e);return o}),u=Object(n.default)(function(t,e){const r=i(e);return e.forEach((e,n,s)=>{r.set(n,t(e,n,s))}),r}),h=Object(n.default)(function(t,e){let r=-1;const n=e.length;let s="";for(;++r<n;)s+=t(e.charAt(r),r,e);return s}),l=Object(n.default)(function(t,e){let r=[];for(let n=e.next();!0!==n.done;n=e.next())r.push(t(e.value()));return r}),c=r(3),p=r(1);const f=Object(p.a)("Function");e.default=Object(n.default)(function(t,e){switch(Object(c.a)(e)){case"Function":return Object(n.default)(function(){return t.call(this,e.apply(this,arguments))});case"Object":return o(t,e);case"String":return h(t,e);case"Map":return u(t,e);case"Array":return s(t,e);default:return f(e[Symbol.iterator])?l(t,e):s(t,e)}})},function(t,e,r){"use strict";var n=r(0);e.a=Object(n.default)(function(t){return Object.keys(Object(t))})},function(t,e){class r{constructor(t,e){if(this.value=t,this.size=new Int32Array(3),Array.isArray(e))for(let t=0;t<this.size.length;t++)this.size[t]=e[t]||1;else e.z?this.size=new Int32Array([e.x,e.y,e.z]):e.y?this.size=new Int32Array([e.x,e.y,1]):this.size=new Int32Array([e.x,1,1]);const[r,n,s]=this.size;if(this.value.length!==r*n*s)throw new Error(`Input size ${this.value.length} does not match ${n} * ${r} * ${s} = ${r*n*s}`)}}t.exports={Input:r,input:function(t,e){return new r(t,e)}}},function(t,e,r){const{utils:n}=r(2),{Input:s}=r(9);t.exports={Kernel:class{static get isSupported(){throw new Error(`"isSupported" not implemented on ${this.name}`)}static isContextMatch(t){throw new Error(`"isContextMatch" not implemented on ${this.name}`)}static getFeatures(){throw new Error(`"getFeatures" not implemented on ${this.name}`)}static destroyContext(t){throw new Error(`"destroyContext" called on ${this.name}`)}static nativeFunctionArguments(){throw new Error(`"nativeFunctionArguments" called on ${this.name}`)}static nativeFunctionReturnType(){throw new Error(`"nativeFunctionReturnType" called on ${this.name}`)}static combineKernels(){throw new Error(`"combineKernels" called on ${this.name}`)}constructor(t,e){if("object"!=typeof t){if("string"!=typeof t)throw new Error("source not a string");if(!n.isFunctionString(t))throw new Error("source not a function string")}this.onRequestFallback=null,this.argumentNames="string"==typeof t?n.getArgumentNamesFromString(t):null,this.argumentTypes=null,this.argumentSizes=null,this.argumentBitRatios=null,this.argumentsLength=0,this.constantsLength=0,this.source=t,this.output=null,this.debug=!1,this.graphical=!1,this.loopMaxIterations=0,this.constants=null,this.constantTypes=null,this.constantBitRatios=null,this.hardcodeConstants=!1,this.canvas=null,this.context=null,this.gpu=null,this.functions=null,this.nativeFunctions=null,this.subKernels=null,this.validate=!0,this.immutable=!1,this.pipeline=!1,this.precision=null,this.plugins=null,this.returnType=null,this.leadingReturnStatement=null,this.followingReturnStatement=null}mergeSettings(t){for(let e in t)if(t.hasOwnProperty(e)&&this.hasOwnProperty(e)){if("output"===e){if(!Array.isArray(t.output)){this.setOutput(t.output);continue}}else if("functions"===e&&"function"==typeof t.functions[0]){this.functions=t.functions.map(t=>n.functionToIFunction(t));continue}this[e]=t[e]}this.canvas||(this.canvas=this.initCanvas()),this.context||(this.context=this.initContext()),this.plugins||(this.plugins=this.initPlugins(t))}build(){throw new Error(`"build" not defined on ${this.constructor.name}`)}run(){throw new Error(`"run" not defined on ${this.constructor.name}`)}initCanvas(){throw new Error(`"initCanvas" not defined on ${this.constructor.name}`)}initContext(){throw new Error(`"initContext" not defined on ${this.constructor.name}`)}initPlugins(t){throw new Error(`"initPlugins" not defined on ${this.constructor.name}`)}setupArguments(t){if(!this.argumentTypes){this.argumentTypes=[];for(let e=0;e<t.length;e++){const r=n.getVariableType(t[e]);this.argumentTypes.push("Integer"===r?"Number":r)}}this.argumentSizes=new Array(t.length),this.argumentBitRatios=new Int32Array(t.length);for(let e=0;e<t.length;e++){const r=t[e];this.argumentSizes[e]=r.constructor===s?r.size:null,this.argumentBitRatios[e]=this.getBitRatio(r)}if(this.argumentNames.length!==t.length)throw new Error("arguments are miss-aligned")}setupConstants(){if(this.constantTypes={},this.constantBitRatios={},this.constants)for(let t in this.constants)this.constantTypes[t]=n.getVariableType(this.constants[t]),this.constantBitRatios[t]=this.getBitRatio(this.constants[t])}setOptimizeFloatMemory(t){return this.optimizeFloatMemory=t,this}setOutput(t){return t.hasOwnProperty("x")?t.hasOwnProperty("y")?t.hasOwnProperty("z")?this.output=[t.x,t.y,t.z]:this.output=[t.x,t.y]:this.output=[t.x]:this.output=t,this}setDebug(t){return this.debug=t,this}setGraphical(t){return this.graphical=t,this}setLoopMaxIterations(t){return this.loopMaxIterations=t,this}setConstants(t){return this.constants=t,this}setFunctions(t){return"function"==typeof t[0]?this.functions=t.map(t=>n.functionToIFunction(t)):this.functions=t,this}setPipeline(t){return this.pipeline=t,this}setPrecision(t){return this.precision=t,this}setOutputToTexture(t){return n.warnDeprecated("method","setOutputToTexture","setPipeline"),this.pipeline=t,this}setImmutable(t){return this.immutable=t,this}setCanvas(t){return this.canvas=t,this}getCanvas(){return n.warnDeprecated("method","getCanvas"),this.canvas}getWebGl(){return n.warnDeprecated("method","getWebGl"),this.context}setContext(t){return this.context=t,this}setArgumentTypes(t){return this.argumentTypes=t,this}requestFallback(t){if(!this.onRequestFallback)throw new Error(`"onRequestFallback" not defined on ${this.constructor.name}`);return this.onRequestFallback(t)}validateSettings(){throw new Error(`"validateSettings" not defined on ${this.constructor.name}`)}exec(){const t=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);return new Promise((e,r)=>{try{e(this.run.apply(this,t))}catch(t){r(t)}})}addSubKernel(t){if(null===this.subKernels&&(this.subKernels=[]),!t.source)throw new Error('subKernel missing "source" property');if(!t.property&&isNaN(t.property))throw new Error('subKernel missing "property" property');if(!t.name)throw new Error('subKernel missing "name" property');return this.subKernels.push(t),this}destroy(t){throw new Error(`"destroy" called on ${this.constructor.name}`)}getBitRatio(t){if("single"===this.precision)return 4;if(Array.isArray(t[0]))return this.getBitRatio(t[0]);if(t.constructor===s)return this.getBitRatio(t.value);switch(t.constructor){case Uint8Array:case Int8Array:return 1;case Uint16Array:case Int16Array:return 2;case Float32Array:case Int32Array:default:return 4}}getPixels(){throw new Error(`"getPixels" called on ${this.constructor.name}`)}checkOutput(){if(!this.output||!Array.isArray(this.output))throw new Error("kernel.output not an array");if(this.output.length<1)throw new Error("kernel.output is empty, needs at least 1 value");for(let t=0;t<this.output.length;t++)if(isNaN(this.output[t])||this.output[t]<1)throw new Error(`${this.constructor.name}.output[${t}] incorrectly defined as \`${this.output[t]}\`, needs to be numeric, and greater than 0`)}toJSON(){return{settings:{output:this.output,threadDim:this.threadDim,pipeline:this.pipeline,argumentNames:this.argumentNames,argumentsTypes:this.argumentTypes,argumentsLength:this.argumentsLength,constants:this.constants,constantsLength:this.constantsLength,pluginNames:this.plugins?this.plugins.map(t=>t.name):null,returnType:this.returnType}}}}}},function(t,e,r){const{utils:n}=r(2),s=r(25);const i={Array:"Number","Array(2)":"Number","Array(3)":"Number","Array(4)":"Number",Array2D:"Number",Array3D:"Number",Input:"Number",HTMLImage:"Array(4)",HTMLImageArray:"Array(4)",NumberTexture:"Number",MemoryOptimizedNumberTexture:"Number","ArrayTexture(1)":"Number","ArrayTexture(2)":"Array(2)","ArrayTexture(3)":"Array(3)","ArrayTexture(4)":"Array(4)"};t.exports={FunctionNode:class{constructor(t,e){if(!t)throw new Error("source parameter is missing");if(e=e||{},this.source=t,this.name="string"==typeof t?e.isRootKernel?"kernel":e.name||n.getFunctionNameFromString(t):null,this.calledFunctions=[],this.calledFunctionsArguments={},this.constants={},this.constantTypes={},this.constantBitRatios={},this.isRootKernel=!1,this.isSubKernel=!1,this.debug=null,this.declarations={},this.states=[],this.lookupReturnType=null,this.lookupArgumentType=null,this.lookupFunctionArgumentTypes=null,this.lookupFunctionArgumentBitRatio=null,this.triggerImplyArgumentType=null,this.triggerTrackArgumentSynonym=null,this.lookupArgumentSynonym=null,this.onNestedFunction=null,this.onFunctionCall=null,this.optimizeFloatMemory=null,this.precision=null,this.loopMaxIterations=null,this.argumentNames="string"==typeof this.source?n.getArgumentNamesFromString(this.source):null,this.argumentTypes=[],this.argumentSizes=[],this.argumentBitRatios=null,this.returnType=null,this.output=[],this.plugins=null,this.leadingReturnStatement=null,this.followingReturnStatement=null,e)for(const t in e)e.hasOwnProperty(t)&&this.hasOwnProperty(t)&&(this[t]=e[t]);this.synonymIndex=-1,this.synonymUseIndex=0,this.argumentSynonym={},this.literalTypes={},this.isRootKernel&&!this.returnType&&(this.returnType="Number"),this.validate(),this._string=null,this._internalVariableNames={}}validate(){if("string"!=typeof this.source)throw new Error("this.source not a string");if(!n.isFunctionString(this.source))throw new Error("this.source not a function string");if(!this.name)throw new Error("this.name could not be set");if(this.argumentTypes.length>0&&this.argumentTypes.length!==this.argumentNames.length)throw new Error(`argumentTypes count of ${this.argumentTypes.length} exceeds ${this.argumentNames.length}`);if(this.output.length<1)throw new Error("this.output is not big enough")}isIdentifierConstant(t){return!!this.constants&&this.constants.hasOwnProperty(t)}isInput(t){return"Input"===this.argumentTypes[this.argumentNames.indexOf(t)]}pushState(t){this.states.push(t)}popState(t){if(this.state!==t)throw new Error(`Cannot popState ${t} when in ${this.state}`);this.states.pop()}isState(t){return this.state===t}get state(){return this.states[this.states.length-1]}astMemberExpressionUnroll(t){if("Identifier"===t.type)return t.name;if("ThisExpression"===t.type)return"this";if("MemberExpression"===t.type&&t.object&&t.property)return t.object.hasOwnProperty("name")&&"_"===t.object.name[0]?this.astMemberExpressionUnroll(t.property):this.astMemberExpressionUnroll(t.object)+"."+this.astMemberExpressionUnroll(t.property);if(t.hasOwnProperty("expressions")){const e=t.expressions[0];if("Literal"===e.type&&0===e.value&&2===t.expressions.length)return this.astMemberExpressionUnroll(t.expressions[1])}throw this.astErrorOutput("Unknown astMemberExpressionUnroll",t)}getJsAST(t){if("object"==typeof this.source)return this.ast=this.source;if(this.ast)return this.ast;if(null===(t=t||s))throw"Missing JS to AST parser";const e=Object.freeze(t.parse(`const parser_${this.name} = ${this.source};`,{locations:!0})),r=e.body[0].declarations[0].init;if(!e)throw new Error("Failed to parse JS code");return this.ast=r}getVariableType(t){let e=null;const r=this.argumentNames.indexOf(t);if(-1===r){if(this.declarations[t])return this.declarations[t].type}else{const n=this.argumentTypes[r];n?e=n:this.lookupArgumentType&&(e=this.argumentTypes[r]=this.lookupArgumentType(t,this))}return e}getConstantType(t){if(this.constantTypes[t]){const e=this.constantTypes[t];return"Float"===e?"Number":e}throw new Error(`Type for constant "${t}" not declared`)}getKernelArgumentName(t){return this.lookupArgumentSynonym?-1===this.argumentNames.indexOf(t)?null:this.lookupArgumentSynonym("kernel",this.name,t):null}toString(){return this._string?this._string:this._string=this.astGeneric(this.getJsAST(),[]).join("").trim()}toJSON(){const t={source:this.source,name:this.name,constants:this.constants,constantTypes:this.constantTypes,isRootKernel:this.isRootKernel,isSubKernel:this.isSubKernel,debug:this.debug,output:this.output,loopMaxIterations:this.loopMaxIterations,argumentNames:this.argumentNames,argumentTypes:this.argumentTypes,argumentSizes:this.argumentSizes,returnType:this.returnType,leadingReturnStatement:this.leadingReturnStatement,followingReturnStatement:this.followingReturnStatement};return{ast:this.ast,settings:t}}getType(t){if(Array.isArray(t))return this.getType(t[t.length-1]);switch(t.type){case"BlockStatement":return this.getType(t.body);case"ArrayExpression":return`Array(${t.elements.length})`;case"Literal":const e=`${t.start},${t.end}`;return this.literalTypes[e]?this.literalTypes[e]:Number.isInteger(t.value)?"LiteralInteger":!0===t.value||!1===t.value?"Boolean":"Number";case"CallExpression":if(this.isAstMathFunction(t))return"Number";if(!t.callee||!t.callee.name){if("SequenceExpression"===t.callee.type&&t.callee.expressions[t.callee.expressions.length-1].property.name)return this.lookupReturnType(t.callee.expressions[t.callee.expressions.length-1].property.name,t,this);throw this.astErrorOutput("Unknown call expression",t)}if(t.callee&&t.callee.name)return this.lookupReturnType(t.callee.name,t,this);throw this.astErrorOutput(`Unhandled getType Type "${t.type}"`,t);case"BinaryExpression":switch(t.operator){case"%":return"Number";case">":case"<":return"Boolean"}const r=this.getType(t.left);return i[r]||r;case"UpdateExpression":case"UnaryExpression":return this.getType(t.argument);case"VariableDeclaration":return this.getType(t.declarations[0]);case"VariableDeclarator":return this.getType(t.id);case"Identifier":if(this.isAstVariable(t)&&"value"===this.getVariableSignature(t)){if(this.argumentNames.indexOf(t.name)>-1)return this.getVariableType(t.name);if(this.declarations[t.name])return this.declarations[t.name].type}if("Infinity"===t.name)return"Number";const n=this.findIdentifierOrigin(t);return n&&n.init?this.getType(n.init):null;case"ReturnStatement":return this.getType(t.argument);case"MemberExpression":if(this.isAstMathFunction(t)){switch(t.property.name){case"ceil":case"floor":case"round":return"Integer"}return"Number"}if(this.isAstVariable(t)){switch(this.getVariableSignature(t)){case"value[]":return i[this.getVariableType(t.object.name)];case"value[][]":return i[this.getVariableType(t.object.object.name)];case"value[][][]":return i[this.getVariableType(t.object.object.object.name)];case"value[][][][]":return i[this.getVariableType(t.object.object.object.object.name)];case"this.thread.value":return"Integer";case"this.output.value":return"LiteralInteger";case"this.constants.value":return this.getConstantType(t.property.name);case"this.constants.value[]":return i[this.getConstantType(t.object.property.name)];case"this.constants.value[][]":return i[this.getConstantType(t.object.object.property.name)];case"this.constants.value[][][]":return i[this.getConstantType(t.object.object.object.property.name)];case"this.constants.value[][][][]":return i[this.getConstantType(t.object.object.object.object.property.name)];case"fn()[]":case"fn()[][]":case"fn()[][][]":return i[this.getType(t.object)];case"value.value":if(this.isAstMathVariable(t))return"Number";switch(t.property.name){case"r":case"g":case"b":case"a":return i[this.getVariableType(t.object.name)]}case"[][]":return"Number"}throw this.astErrorOutput("Unhandled getType MemberExpression",t)}throw this.astErrorOutput("Unhandled getType MemberExpression",t);case"ConditionalExpression":return this.getType(t.consequent);case"FunctionDeclaration":case"FunctionExpression":const s=this.findLastReturn(t.body);return s?this.getType(s):null;case"IfStatement":return this.getType(t.consequent);default:throw this.astErrorOutput(`Unhandled getType Type "${t.type}"`,t)}}isAstMathVariable(t){return"MemberExpression"===t.type&&t.object&&"Identifier"===t.object.type&&"Math"===t.object.name&&t.property&&"Identifier"===t.property.type&&["E","PI","SQRT2","SQRT1_2","LN2","LN10","LOG2E","LOG10E"].indexOf(t.property.name)>-1}isAstMathFunction(t){return"CallExpression"===t.type&&t.callee&&"MemberExpression"===t.callee.type&&t.callee.object&&"Identifier"===t.callee.object.type&&"Math"===t.callee.object.name&&t.callee.property&&"Identifier"===t.callee.property.type&&["abs","acos","asin","atan","atan2","ceil","cos","exp","floor","log","log2","max","min","pow","random","round","sign","sin","sqrt","tan"].indexOf(t.callee.property.name)>-1}isAstVariable(t){return"Identifier"===t.type||"MemberExpression"===t.type}isSafe(t){return this.isSafeDependencies(this.getDependencies(t))}isSafeDependencies(t){return!t||!t.every||t.every(t=>t.isSafe)}getDependencies(t,e,r){if(e||(e=[]),!t)return null;if(Array.isArray(t)){for(let n=0;n<t.length;n++)this.getDependencies(t[n],e,r);return e}switch(t.type){case"Literal":e.push({origin:"literal",value:t.value,isSafe:!0!==r&&t.value>-1/0&&t.value<1/0&&!isNaN(t.value)});break;case"VariableDeclarator":return this.getDependencies(t.init,e,r);case"Identifier":this.declarations[t.name]?e.push({name:t.name,origin:"declaration",isSafe:!r&&this.isSafeDependencies(this.declarations[t.name].dependencies)}):this.argumentNames.indexOf(t.name)>-1&&e.push({name:t.name,origin:"argument",isSafe:!1});break;case"FunctionDeclaration":return this.getDependencies(t.body.body[t.body.body.length-1],e,r);case"ReturnStatement":return this.getDependencies(t.argument,e);case"BinaryExpression":return r="/"===t.operator||"*"===t.operator,this.getDependencies(t.left,e,r),this.getDependencies(t.right,e,r),e;case"UnaryExpression":case"UpdateExpression":return this.getDependencies(t.argument,e,r);case"VariableDeclaration":return this.getDependencies(t.declarations,e,r);case"ArrayExpression":return e.push({origin:"declaration",isSafe:!0}),e;case"CallExpression":return e.push({origin:"function",isSafe:!0}),e;case"MemberExpression":const n=this.getMemberExpressionDetails(t);if(n)return n.type;default:throw this.astErrorOutput(`Unhandled type ${t.type} in getAllVariables`,t)}return e}getVariableSignature(t){if(!this.isAstVariable(t))throw new Error(`ast of type "${t.type}" is not a variable signature`);if("Identifier"===t.type)return"value";const e=[];for(;t;)t.computed?e.push("[]"):"ThisExpression"===t.type?e.unshift("this"):t.property&&t.property.name?"x"===t.property.name||"y"===t.property.name||"z"===t.property.name?e.unshift(".value"):"constants"===t.property.name||"thread"===t.property.name||"output"===t.property.name?e.unshift("."+t.property.name):e.unshift(".value"):t.name?e.unshift("value"):t.callee&&t.callee.name?e.unshift("fn()"):t.elements?e.unshift("[]"):e.unshift("unknown"),t=t.object;const r=e.join("");return["value","value[]","value[][]","value[][][]","value[][][][]","value.value","this.thread.value","this.output.value","this.constants.value","this.constants.value[]","this.constants.value[][]","this.constants.value[][][]","this.constants.value[][][][]","fn()[]","fn()[][]","fn()[][][]","[][]"].indexOf(r)>-1?r:null}build(){return this.toString().length>0}astGeneric(t,e){if(null===t)throw this.astErrorOutput("NULL ast",t);if(Array.isArray(t)){for(let r=0;r<t.length;r++)this.astGeneric(t[r],e);return e}switch(t.type){case"FunctionDeclaration":return this.astFunctionDeclaration(t,e);case"FunctionExpression":return this.astFunctionExpression(t,e);case"ReturnStatement":return this.astReturnStatement(t,e);case"Literal":return this.astLiteral(t,e);case"BinaryExpression":return this.astBinaryExpression(t,e);case"Identifier":return this.astIdentifierExpression(t,e);case"AssignmentExpression":return this.astAssignmentExpression(t,e);case"ExpressionStatement":return this.astExpressionStatement(t,e);case"EmptyStatement":return this.astEmptyStatement(t,e);case"BlockStatement":return this.astBlockStatement(t,e);case"IfStatement":return this.astIfStatement(t,e);case"BreakStatement":return this.astBreakStatement(t,e);case"ContinueStatement":return this.astContinueStatement(t,e);case"ForStatement":return this.astForStatement(t,e);case"WhileStatement":return this.astWhileStatement(t,e);case"DoWhileStatement":return this.astDoWhileStatement(t,e);case"VariableDeclaration":return this.astVariableDeclaration(t,e);case"VariableDeclarator":return this.astVariableDeclarator(t,e);case"ThisExpression":return this.astThisExpression(t,e);case"SequenceExpression":return this.astSequenceExpression(t,e);case"UnaryExpression":return this.astUnaryExpression(t,e);case"UpdateExpression":return this.astUpdateExpression(t,e);case"LogicalExpression":return this.astLogicalExpression(t,e);case"MemberExpression":return this.astMemberExpression(t,e);case"CallExpression":return this.astCallExpression(t,e);case"ArrayExpression":return this.astArrayExpression(t,e);case"DebuggerStatement":return this.astDebuggerStatement(t,e);case"ConditionalExpression":return this.astConditionalExpression(t,e)}throw this.astErrorOutput("Unknown ast type : "+t.type,t)}astErrorOutput(t,e){if("string"!=typeof this.source)return new Error(t);const r=n.getAstString(this.source,e),s=this.source.substr(e.start).split(/\n/),i=s.length>0?s[s.length-1]:0;return new Error(`${t} on line ${s.length}, position ${i.length}:\n ${r}`)}astDebuggerStatement(t,e){return e}astConditionalExpression(t,e){if("ConditionalExpression"!==t.type)throw this.astErrorOutput("Not a conditional expression",t);return e.push("("),this.astGeneric(t.test,e),e.push("?"),this.astGeneric(t.consequent,e),e.push(":"),this.astGeneric(t.alternate,e),e.push(")"),e}astFunctionDeclaration(t,e){if(this.onNestedFunction){let e=this.getType(t);"LiteralInteger"===e&&(e="Number"),this.onNestedFunction(n.getAstString(this.source,t),e)}return e}astFunctionExpression(t,e){return e}astReturnStatement(t,e){return e}astLiteral(t,e){return this.literalTypes[`${t.start},${t.end}`]="Number",e}astBinaryExpression(t,e){return e}astIdentifierExpression(t,e){return e}astAssignmentExpression(t,e){return e}astExpressionStatement(t,e){return this.astGeneric(t.expression,e),e.push(";"),e}astEmptyStatement(t,e){return e}astBlockStatement(t,e){return e}astIfStatement(t,e){return e}astBreakStatement(t,e){return e.push("break;"),e}astContinueStatement(t,e){return e.push("continue;\n"),e}astForStatement(t,e){return e}astWhileStatement(t,e){return e}astDoWhileStatement(t,e){return e}astVariableDeclaration(t,e){const r=t.declarations;if(!r||!r[0]||!r[0].init)throw this.astErrorOutput("Unexpected expression",t);const n=[],s=r[0],i=s.init;let a=this.isState("in-for-loop-init")?"Integer":this.getType(i);"LiteralInteger"===a&&(a="Number");const o=typeMap[a];if(!o)throw this.astErrorOutput(`Markup type ${o} not handled`,t);let u=this.getDependencies(s.init);this.declarations[s.id.name]=Object.freeze({type:a,dependencies:u,isSafe:u.every(t=>t.isSafe)});const h=[`${a} user_${s.id.name}=`];this.astGeneric(i,h),n.push(h.join(""));for(let t=1;t<r.length;t++){const e=r[t];u=this.getDependencies(e),this.declarations[e.id.name]=Object.freeze({type:a,dependencies:u,isSafe:!1}),this.astGeneric(e,n)}return e.push(e,n.join(",")),e.push(";"),e}astVariableDeclarator(t,e){return this.astGeneric(t.id,e),null!==t.init&&(e.push("="),this.astGeneric(t.init,e)),e}astThisExpression(t,e){return e}astSequenceExpression(t,e){for(let r=0;r<t.expressions.length;r++)r>0&&e.push(","),this.astGeneric(t.expressions,e);return e}astUnaryExpression(t,e){return t.prefix?(e.push(t.operator),this.astGeneric(t.argument,e)):(this.astGeneric(t.argument,e),e.push(t.operator)),e}astUpdateExpression(t,e){return t.prefix?(e.push(t.operator),this.astGeneric(t.argument,e)):(this.astGeneric(t.argument,e),e.push(t.operator)),e}astLogicalExpression(t,e){return e.push("("),this.astGeneric(t.left,e),e.push(t.operator),this.astGeneric(t.right,e),e.push(")"),e}astMemberExpression(t,e){return e}astCallExpression(t,e){return e}astArrayExpression(t,e){return e}getMemberExpressionDetails(t){if("MemberExpression"!==t.type)throw this.astErrorOutput(`Expression ${t.type} not a MemberExpression`,t);let e=null,r=null;const n=this.getVariableSignature(t);switch(n){case"value":return null;case"this.thread.value":case"this.output.value":return{signature:n,type:"Integer",name:t.property.name};case"value[]":if("string"!=typeof t.object.name)throw this.astErrorOutput("Unexpected expression",t);return{name:e=t.object.name,origin:"user",signature:n,type:this.getVariableType(e),xProperty:t.property};case"value[][]":if("string"!=typeof t.object.object.name)throw this.astErrorOutput("Unexpected expression",t);return{name:e=t.object.object.name,origin:"user",signature:n,type:this.getVariableType(e),yProperty:t.object.property,xProperty:t.property};case"value[][][]":if("string"!=typeof t.object.object.object.name)throw this.astErrorOutput("Unexpected expression",t);return{name:e=t.object.object.object.name,origin:"user",signature:n,type:this.getVariableType(e),zProperty:t.object.object.property,yProperty:t.object.property,xProperty:t.property};case"value[][][][]":if("string"!=typeof t.object.object.object.object.name)throw this.astErrorOutput("Unexpected expression",t);return{name:e=t.object.object.object.object.name,origin:"user",signature:n,type:this.getVariableType(e),zProperty:t.object.object.property,yProperty:t.object.property,xProperty:t.property};case"value.value":if("string"!=typeof t.property.name)throw this.astErrorOutput("Unexpected expression",t);if(this.isAstMathVariable(t))return{name:e=t.property.name,origin:"Math",type:"Number",signature:n};switch(t.property.name){case"r":case"g":case"b":case"a":return{name:e=t.object.name,property:t.property.name,origin:"user",signature:n,type:"Number"};default:throw this.astErrorOutput("Unexpected expression",t)}case"this.constants.value":if("string"!=typeof t.property.name)throw this.astErrorOutput("Unexpected expression",t);if(e=t.property.name,!(r=this.getConstantType(e)))throw this.astErrorOutput("Constant has no type",t);return{name:e,type:r,origin:"constants",signature:n};case"this.constants.value[]":if("string"!=typeof t.object.property.name)throw this.astErrorOutput("Unexpected expression",t);if(e=t.object.property.name,!(r=this.getConstantType(e)))throw this.astErrorOutput("Constant has no type",t);return{name:e,type:r,origin:"constants",signature:n,xProperty:t.property};case"this.constants.value[][]":if("string"!=typeof t.object.object.property.name)throw this.astErrorOutput("Unexpected expression",t);if(e=t.object.object.property.name,!(r=this.getConstantType(e)))throw this.astErrorOutput("Constant has no type",t);return{name:e,type:r,origin:"constants",signature:n,yProperty:t.object.property,xProperty:t.property};case"this.constants.value[][][]":if("string"!=typeof t.object.object.object.property.name)throw this.astErrorOutput("Unexpected expression",t);if(e=t.object.object.object.property.name,!(r=this.getConstantType(e)))throw this.astErrorOutput("Constant has no type",t);return{name:e,type:r,origin:"constants",signature:n,zProperty:t.object.object.property,yProperty:t.object.property,xProperty:t.property};case"fn()[]":case"[][]":return{signature:n,property:t.property};default:throw this.astErrorOutput("Unexpected expression",t)}}findIdentifierOrigin(t){const e=[this.ast];for(;e.length>0;){const r=e[0];if("VariableDeclarator"===r.type&&r.id&&r.id.name&&r.id.name===t.name)return r;if(e.shift(),r.argument)e.push(r.argument);else if(r.body)e.push(r.body);else if(r.declarations)e.push(r.declarations);else if(Array.isArray(r))for(let t=0;t<r.length;t++)e.push(r[t])}return null}findLastReturn(t){const e=[t||this.ast];for(;e.length>0;){const t=e.pop();if("ReturnStatement"===t.type)return t;if(t.argument)e.push(t.argument);else if(t.body)e.push(t.body);else if(t.declarations)e.push(t.declarations);else if(Array.isArray(t))for(let r=0;r<t.length;r++)e.push(t[r]);else t.consequent&&e.push(t.consequent)}return null}getInternalVariableName(t){return this._internalVariableNames.hasOwnProperty(t)||(this._internalVariableNames[t]=0),this._internalVariableNames[t]++,1===this._internalVariableNames[t]?t:t+this._internalVariableNames[t]}varWarn(){console.warn("var declarations are deprecated, weird things happen when falling back to CPU because var scope differs in javascript than in most languages.  Use const or let")}}}},function(t,e,r){const{utils:n}=r(2);t.exports={kernelRunShortcut:function(t){const e=function(){return t.run.apply(t,arguments)};return n.allPropertiesOf(t).forEach(r=>{if("_"!==r[0]||"_"!==r[1])if("function"==typeof t[r])if("add"===r.substring(0,3)||"set"===r.substring(0,3))e[r]=function(){return t[r].apply(t,arguments),e};else if("requestFallback"===r){const n=t[r].bind(t);e[r]=(()=>{t=n()})}else e[r]=t[r].bind(t);else e.__defineGetter__(r,()=>t[r]),e.__defineSetter__(r,e=>{t[r]=e})}),e.kernel=t,e}}},function(t,e,r){const{FunctionNode:n}=r(11),s="Math.",i="this.";const a={Array:"sampler2D","Array(2)":"vec2","Array(3)":"vec3","Array(4)":"vec4",Array2D:"sampler2D",Array3D:"sampler2D",Boolean:"bool",Float:"float",Input:"sampler2D",Integer:"int",Number:"float",LiteralInteger:"float",NumberTexture:"sampler2D",MemoryOptimizedNumberTexture:"sampler2D","ArrayTexture(1)":"sampler2D","ArrayTexture(2)":"sampler2D","ArrayTexture(3)":"sampler2D","ArrayTexture(4)":"sampler2D"},o={"===":"==","!==":"!="};t.exports={WebGLFunctionNode:class extends n{constructor(t,e){super(t,e),this.fixIntegerDivisionAccuracy=null,e&&e.hasOwnProperty("fixIntegerDivisionAccuracy")&&(this.fixIntegerDivisionAccuracy=e.fixIntegerDivisionAccuracy)}astFunctionExpression(t,e){if(this.isRootKernel)e.push("void");else{this.returnType||this.findLastReturn()&&(this.returnType=this.getType(t.body),"LiteralInteger"===this.returnType&&(this.returnType="Number"));const{returnType:r}=this;if(r){const t=a[r];if(!t)throw new Error(`unknown type ${r}`);e.push(t)}else e.push("void")}if(e.push(" "),e.push(this.name),e.push("("),!this.isRootKernel)for(let r=0;r<this.argumentNames.length;++r){const n=this.argumentNames[r];r>0&&e.push(", ");let s=this.getVariableType(n);s&&"LiteralInteger"!==s||(s="Number");const i=a[s];if(!i)throw this.astErrorOutput("Unexpected expression",t);e.push(i),e.push(" "),e.push("user_"),e.push(n)}e.push(") {\n");for(let r=0;r<t.body.body.length;++r)this.astGeneric(t.body.body[r],e),e.push("\n");return e.push("}\n"),e}astReturnStatement(t,e){if(!t.argument)throw this.astErrorOutput("Unexpected return statement",t);const r=this.getType(t.argument),n=[];switch(this.returnType||(this.isRootKernel?this.returnType="Number":this.returnType=r),this.returnType){case"LiteralInteger":case"Number":case"Float":switch(r){case"Integer":n.push("float("),this.astGeneric(t.argument,n),n.push(")");break;case"LiteralInteger":this.pushState("casting-to-float"),this.astGeneric(t.argument,n),this.popState("casting-to-float"),"Integer"===this.getType(t)&&(n.unshift("float("),n.push(")"));break;default:this.astGeneric(t.argument,n)}break;case"Integer":switch(r){case"Number":this.pushState("casting-to-integer"),n.push("int("),this.astGeneric(t.argument,n),n.push(")"),this.popState("casting-to-integer");break;case"LiteralInteger":this.pushState("casting-to-integer"),this.astGeneric(t.argument,n),this.popState("casting-to-integer");break;default:this.astGeneric(t.argument,n)}break;case"Array(4)":case"Array(3)":case"Array(2)":case"Input":this.astGeneric(t.argument,n);break;default:throw this.astErrorOutput(`unhandled return type ${this.returnType}`,t)}return this.isRootKernel?(e.push(`kernelResult = ${n.join("")};`),e.push("return;")):this.isSubKernel?(e.push(`subKernelResult_${this.name} = ${n.join("")};`),e.push(`return subKernelResult_${this.name};`)):e.push(`return ${n.join("")};`),e}astLiteral(t,e){if(isNaN(t.value))throw this.astErrorOutput("Non-numeric literal not supported : "+t.value,t);return Number.isInteger(t.value)?this.isState("in-for-loop-init")||this.isState("casting-to-integer")?(this.literalTypes[`${t.start},${t.end}`]="Integer",e.push(`${t.value}`)):(this.isState("casting-to-float"),this.literalTypes[`${t.start},${t.end}`]="Number",e.push(`${t.value}.0`)):this.isState("casting-to-integer")?(this.literalTypes[`${t.start},${t.end}`]="Integer",e.push(parseInt(t.raw))):(this.literalTypes[`${t.start},${t.end}`]="Number",e.push(`${t.value}`)),e}astBinaryExpression(t,e){if("%"===t.operator){e.push("mod(");const r=this.getType(t.left);"Integer"===r?(e.push("float("),this.astGeneric(t.left,e),e.push(")")):"LiteralInteger"===r?(this.pushState("casting-to-float"),this.astGeneric(t.left,e),this.popState("casting-to-float")):this.astGeneric(t.left,e),e.push(",");const n=this.getType(t.right);return"Integer"===n?(e.push("float("),this.astGeneric(t.right,e),e.push(")")):"LiteralInteger"===n?(this.pushState("casting-to-float"),this.astGeneric(t.right,e),this.popState("casting-to-float")):this.astGeneric(t.right,e),e.push(")"),e}if(e.push("("),this.fixIntegerDivisionAccuracy&&"/"===t.operator){switch(e.push("div_with_int_check("),this.getType(t.left)){case"Integer":e.push("float("),this.pushState("casting-to-float"),this.astGeneric(t.left,e),this.popState("casting-to-float"),e.push(")");break;case"LiteralInteger":this.pushState("casting-to-float"),this.astGeneric(t.left,e),this.popState("casting-to-float");break;default:this.astGeneric(t.left,e)}switch(e.push(", "),this.getType(t.right)){case"Integer":e.push("float("),this.pushState("casting-to-float"),this.astGeneric(t.right,e),this.popState("casting-to-float"),e.push(")");break;case"LiteralInteger":this.pushState("casting-to-float"),this.astGeneric(t.right,e),this.popState("casting-to-float");break;default:this.astGeneric(t.right,e)}e.push(")")}else{const r=this.getType(t.left)||"Number",n=this.getType(t.right)||"Number";if(!r||!n)throw this.astErrorOutput("Unhandled binary expression",t);const s=r+" & "+n;switch(s){case"Integer & Integer":this.astGeneric(t.left,e),e.push(o[t.operator]||t.operator),this.astGeneric(t.right,e);break;case"Number & Float":case"Float & Number":case"Float & Float":case"Number & Number":this.astGeneric(t.left,e),e.push(o[t.operator]||t.operator),this.astGeneric(t.right,e);break;case"LiteralInteger & LiteralInteger":this.pushState("casting-to-float"),this.astGeneric(t.left,e),e.push(o[t.operator]||t.operator),this.astGeneric(t.right,e),this.popState("casting-to-float");break;case"Integer & Float":case"Integer & Number":if((">"===t.operator||"<"===t.operator&&"Literal"===t.right.type)&&!Number.isInteger(t.right.value)){this.pushState("casting-to-float"),e.push("float("),this.astGeneric(t.left,e),e.push(")"),this.popState("casting-to-float"),e.push(o[t.operator]||t.operator),this.astGeneric(t.right,e);break}if(this.astGeneric(t.left,e),e.push(o[t.operator]||t.operator),this.pushState("casting-to-integer"),"Literal"===t.right.type){const r=[];if(this.astGeneric(t.right,r),"Integer"!==this.getType(t.right))throw this.astErrorOutput("Unhandled binary expression with literal",t);e.push(r.join(""))}else e.push("int("),this.astGeneric(t.right,e),e.push(")");this.popState("casting-to-integer");break;case"Integer & LiteralInteger":this.astGeneric(t.left,e),e.push(o[t.operator]||t.operator),this.pushState("casting-to-integer"),this.astGeneric(t.right,e),this.popState("casting-to-integer");break;case"Number & Integer":this.astGeneric(t.left,e),e.push(o[t.operator]||t.operator),this.pushState("casting-to-float"),e.push("float("),this.astGeneric(t.right,e),e.push(")"),this.popState("casting-to-float");break;case"Float & LiteralInteger":case"Number & LiteralInteger":this.isState("in-for-loop-test")?(e.push("int("),this.astGeneric(t.left,e),e.push(")"),e.push(o[t.operator]||t.operator),this.pushState("casting-to-integer"),this.astGeneric(t.right,e),this.popState("casting-to-integer")):(this.astGeneric(t.left,e),e.push(o[t.operator]||t.operator),this.pushState("casting-to-float"),this.astGeneric(t.right,e),this.popState("casting-to-float"));break;case"LiteralInteger & Float":case"LiteralInteger & Number":this.isState("in-for-loop-test")||this.isState("in-for-loop-init")||this.isState("casting-to-integer")?(this.pushState("casting-to-integer"),this.astGeneric(t.left,e),e.push(o[t.operator]||t.operator),e.push("int("),this.astGeneric(t.right,e),e.push(")"),this.popState("casting-to-integer")):(this.astGeneric(t.left,e),e.push(o[t.operator]||t.operator),this.pushState("casting-to-float"),this.astGeneric(t.right,e),this.popState("casting-to-float"));break;case"LiteralInteger & Integer":this.pushState("casting-to-integer"),this.astGeneric(t.left,e),this.popState("casting-to-integer"),e.push(o[t.operator]||t.operator),this.astGeneric(t.right,e);break;case"Boolean & Boolean":this.astGeneric(t.left,e),e.push(o[t.operator]||t.operator),this.astGeneric(t.right,e);break;default:throw this.astErrorOutput(`Unhandled binary expression between ${s}`,t)}}return e.push(")"),e}astIdentifierExpression(t,e){if("Identifier"!==t.type)throw this.astErrorOutput("IdentifierExpression - not an Identifier",t);const r=this.getType(t);if("Infinity"===t.name)e.push("3.402823466e+38");else if("Boolean"===r)this.argumentNames.indexOf(t.name)>-1?e.push(`bool(user_${t.name})`):e.push(`user_${t.name}`);else{const r=this.getKernelArgumentName(t.name);r?e.push(`user_${r}`):e.push(`user_${t.name}`)}return e}astForStatement(t,e){if("ForStatement"!==t.type)throw this.astErrorOutput("Invalid for statement",t);const r=[],n=[],s=[],i=[];let a=null;if(t.init){this.pushState("in-for-loop-init"),this.astGeneric(t.init,r);for(let t=0;t<r.length;t++)r[t].includes&&r[t].includes(",")&&(a=!1);this.popState("in-for-loop-init")}else a=!1;if(t.test?(this.pushState("in-for-loop-test"),this.astGeneric(t.test,n),this.popState("in-for-loop-test")):a=!1,t.update?this.astGeneric(t.update,s):a=!1,t.body&&(this.pushState("loop-body"),this.astGeneric(t.body,i),this.popState("loop-body")),null===a&&(a=this.isSafe(t.init)&&this.isSafe(t.test)),a)e.push(`for (${r.join("")};${n.join("")};${s.join("")}){\n`),e.push(i.join("")),e.push("}\n");else{const t=this.getInternalVariableName("safeI");r.length>0&&e.push(r.join(""),";\n"),e.push(`for (int ${t}=0;${t}<LOOP_MAX;${t}++){\n`),n.length>0&&e.push(`if (!${n.join("")}) break;\n`),e.push(i.join("")),e.push(`\n${s.join("")};`),e.push("}\n")}return e}astWhileStatement(t,e){if("WhileStatement"!==t.type)throw this.astErrorOutput("Invalid while statement",t);const r=this.getInternalVariableName("safeI");return e.push(`for (int ${r}=0;${r}<LOOP_MAX;${r}++){\n`),e.push("if (!"),this.astGeneric(t.test,e),e.push(") break;\n"),this.astGeneric(t.body,e),e.push("}\n"),e}astDoWhileStatement(t,e){if("DoWhileStatement"!==t.type)throw this.astErrorOutput("Invalid while statement",t);const r=this.getInternalVariableName("safeI");return e.push(`for (int ${r}=0;${r}<LOOP_MAX;${r}++){\n`),this.astGeneric(t.body,e),e.push("if (!"),this.astGeneric(t.test,e),e.push(") break;\n"),e.push("}\n"),e}astAssignmentExpression(t,e){if("%="!==t.operator){const r=this.getType(t.left),n=this.getType(t.right);return this.astGeneric(t.left,e),e.push(t.operator),"Integer"!==r&&"Integer"===n?(e.push("float("),this.astGeneric(t.right,e),e.push(")")):this.astGeneric(t.right,e),e}this.astGeneric(t.left,e),e.push("="),e.push("mod("),this.astGeneric(t.left,e),e.push(","),this.astGeneric(t.right,e),e.push(")")}astBlockStatement(t,e){if(this.isState("loop-body")){this.pushState("block-body");for(let r=0;r<t.body.length;r++)this.astGeneric(t.body[r],e);this.popState("block-body")}else{e.push("{\n");for(let r=0;r<t.body.length;r++)this.astGeneric(t.body[r],e);e.push("}\n")}return e}astVariableDeclaration(t,e){"var"===t.kind&&this.varWarn();const r=t.declarations;if(!r||!r[0]||!r[0].init)throw this.astErrorOutput("Unexpected expression",t);const n=[],s=r[0],i=s.init,o=this.getType(i),u=this.isState("in-for-loop-init");let h=u?"Integer":o;"LiteralInteger"===h&&(h="Number");const l=a[h];if(!l)throw this.astErrorOutput(`Markup type ${l} not handled`,t);let c=this.getDependencies(s.init);const p=[];"Integer"!==o||"Integer"!==h||u?(this.declarations[s.id.name]=Object.freeze({type:h,dependencies:c,isSafe:this.isSafeDependencies(c)}),p.push(`${l} `),p.push(`user_${s.id.name}=`),"Number"===o&&"Integer"===h?(p.push("int("),this.astGeneric(i,p),p.push(")")):this.astGeneric(i,p)):(this.declarations[s.id.name]=Object.freeze({type:"Number",dependencies:c,isSafe:this.isSafeDependencies(c)}),p.push("float "),p.push(`user_${s.id.name}=`),p.push("float("),this.astGeneric(i,p),p.push(")")),n.push(p.join(""));let f=h;for(let t=1;t<r.length;t++){const e=r[t],s=[];if(u)s.push(",");else{let t=this.getType(e.init);"LiteralInteger"===t&&(t="Number"),t!==f?(s.push(";"),s.push(a[t]," "),f=t):s.push(",")}c=this.getDependencies(e),this.declarations[e.id.name]=Object.freeze({type:f,dependencies:c,isSafe:this.isSafeDependencies(c)}),this.astGeneric(e,s),n.push(s.join(""))}return e.push(n.join("")),u||e.push(";"),e}astIfStatement(t,e){return e.push("if ("),this.astGeneric(t.test,e),e.push(")"),"BlockStatement"===t.consequent.type?this.astGeneric(t.consequent,e):(e.push(" {\n"),this.astGeneric(t.consequent,e),e.push("\n}\n")),t.alternate&&(e.push("else "),"BlockStatement"===t.alternate.type?this.astGeneric(t.alternate,e):(e.push(" {\n"),this.astGeneric(t.alternate,e),e.push("\n}\n"))),e}astThisExpression(t,e){return e.push("this"),e}astMemberExpression(t,e){const{property:r,name:n,signature:s,origin:i,type:a,xProperty:o,yProperty:u,zProperty:h}=this.getMemberExpressionDetails(t);switch(s){case"this.thread.value":if("x"!==n&&"y"!==n&&"z"!==n)throw this.astErrorOutput("Unexpected expression, expected `this.thread.x`, `this.thread.y`, or `this.thread.z`",t);return e.push(`threadId.${n}`),e;case"this.output.value":switch(n){case"x":this.isState("casting-to-integer")?e.push(this.output[0]):e.push(this.output[0],".0");break;case"y":this.isState("casting-to-integer")?e.push(this.output[1]):e.push(this.output[1],".0");break;case"z":this.isState("casting-to-integer")?e.push(this.output[2]):e.push(this.output[2],".0");break;default:throw this.astErrorOutput("Unexpected expression",t)}return e;case"value":throw this.astErrorOutput("Unexpected expression",t);case"value[]":case"value[][]":case"value[][][]":case"value[][][][]":case"value.value":if("Math"===i)return e.push(Math[n]),e;switch(r){case"r":return e.push(`user_${n}.r`),e;case"g":return e.push(`user_${n}.g`),e;case"b":return e.push(`user_${n}.b`),e;case"a":return e.push(`user_${n}.a`),e}break;case"this.constants.value":case"this.constants.value[]":case"this.constants.value[][]":case"this.constants.value[][][]":case"this.constants.value[][][][]":break;case"fn()[]":return this.astCallExpression(t.object,e),e.push("["),e.push(this.memberExpressionPropertyMarkup(r)),e.push("]"),e;case"[][]":return this.astArrayExpression(t.object,e),e.push("["),e.push(this.memberExpressionPropertyMarkup(r)),e.push("]"),e;default:throw this.astErrorOutput("Unexpected expression",t)}switch(a){case"Number":case"Integer":case"Float":return e.push(`${i}_${n}`),e;case"Boolean":return e.push(`bool(${i}_${n})`),e}const l=`${i}_${this.getKernelArgumentName(n)||n}`;switch(a){case"Array(2)":case"Array(3)":case"Array(4)":this.astGeneric(t.object,e),e.push("["),e.push(this.memberExpressionPropertyMarkup(o)),e.push("]");break;case"HTMLImageArray":e.push(`getImage3D(${l}, ${l}Size, ${l}Dim, `),this.memberExpressionXYZ(o,u,h,e),e.push(")");break;case"ArrayTexture(1)":e.push(`getFloatFromSampler2D(${l}, ${l}Size, ${l}Dim, `),this.memberExpressionXYZ(o,u,h,e),e.push(")");break;case"ArrayTexture(2)":e.push(`getVec2FromSampler2D(${l}, ${l}Size, ${l}Dim, `),this.memberExpressionXYZ(o,u,h,e),e.push(")");break;case"ArrayTexture(3)":e.push(`getVec3FromSampler2D(${l}, ${l}Size, ${l}Dim, `),this.memberExpressionXYZ(o,u,h,e),e.push(")");break;case"ArrayTexture(4)":case"HTMLImage":e.push(`getVec4FromSampler2D(${l}, ${l}Size, ${l}Dim, `),this.memberExpressionXYZ(o,u,h,e),e.push(")");break;case"NumberTexture":case"Array":case"Array2D":case"Array3D":case"Array4D":case"Input":if("single"===this.precision)e.push(`getMemoryOptimized32(${l}, ${l}Size, ${l}Dim, `),this.memberExpressionXYZ(o,u,h,e),e.push(")");else{const t="user"===i?this.lookupFunctionArgumentBitRatio(this.name,n):this.constantBitRatios[n];switch(t){case 1:e.push(`get8(${l}, ${l}Size, ${l}Dim, `);break;case 2:e.push(`get16(${l}, ${l}Size, ${l}Dim, `);break;case 4:case 0:e.push(`get32(${l}, ${l}Size, ${l}Dim, `);break;default:throw new Error(`unhandled bit ratio of ${t}`)}this.memberExpressionXYZ(o,u,h,e),e.push(")")}break;case"MemoryOptimizedNumberTexture":e.push(`getMemoryOptimized32(${l}, ${l}Size, ${l}Dim, `),this.memberExpressionXYZ(o,u,h,e),e.push(")");break;default:throw new Error(`unhandled member expression "${a}"`)}return e}astCallExpression(t,e){if(!t.callee)throw this.astErrorOutput("Unknown CallExpression",t);let r=this.astMemberExpressionUnroll(t.callee);const n=0===r.indexOf(s);if(n&&(r=r.slice(s.length)),0===r.indexOf(i)&&(r=r.slice(i.length)),"atan2"===r&&(r="atan"),this.calledFunctions.indexOf(r)<0&&this.calledFunctions.push(r),"random"===r&&this.plugins&&this.plugins.length>0)for(let t=0;t<this.plugins.length;t++){const r=this.plugins[t];if("Math.random()"===r.functionMatch&&r.functionReplace)return e.push(r.functionReplace),e}if(this.onFunctionCall&&this.onFunctionCall(this.name,r),e.push(r),e.push("("),n)for(let r=0;r<t.arguments.length;++r){const n=t.arguments[r],s=this.getType(n);switch(r>0&&e.push(", "),s){case"Integer":this.pushState("casting-to-float"),e.push("float("),this.astGeneric(n,e),e.push(")"),this.popState("casting-to-float");break;default:this.astGeneric(n,e)}}else{const n=this.lookupFunctionArgumentTypes(r)||[];for(let s=0;s<t.arguments.length;++s){const i=t.arguments[s];let a=n[s];s>0&&e.push(", ");const o=this.getType(i);switch(a||(this.triggerImplyArgumentType(r,s,o,this),a=o),o){case"Number":case"Float":if("Integer"===a){e.push("int("),this.astGeneric(i,e),e.push(")");continue}if("Number"===a||"Float"===a){this.astGeneric(i,e);continue}if("LiteralInteger"===a){this.pushState("casting-to-float"),this.astGeneric(i,e),this.popState("casting-to-float");continue}break;case"Integer":if("Number"===a||"Float"===a){e.push("float("),this.astGeneric(i,e),e.push(")");continue}if("Integer"===a){this.astGeneric(i,e);continue}break;case"LiteralInteger":if("Integer"===a){this.pushState("casting-to-integer"),this.astGeneric(i,e),this.popState("casting-to-integer");continue}if("Number"===a||"Float"===a){this.pushState("casting-to-float"),this.astGeneric(i,e),this.popState("casting-to-float");continue}if("LiteralInteger"===a){this.astGeneric(i,e);continue}break;case"Array(2)":case"Array(3)":case"Array(4)":if(a===o){this.astGeneric(i,e);continue}break;case"Array":case"Input":if(a===o){this.triggerTrackArgumentSynonym(this.name,i.name,r,s),this.astGeneric(i,e);continue}}throw new Error(`Unhandled argument combination of ${o} and ${a}`)}}return e.push(")"),e}astArrayExpression(t,e){const r=t.elements.length;e.push("vec"+r+"(");for(let n=0;n<r;++n){n>0&&e.push(", ");const r=t.elements[n];this.astGeneric(r,e)}return e.push(")"),e}memberExpressionXYZ(t,e,r,n){return r?n.push(this.memberExpressionPropertyMarkup(r),", "):n.push("0, "),e?n.push(this.memberExpressionPropertyMarkup(e),", "):n.push("0, "),n.push(this.memberExpressionPropertyMarkup(t)),n}memberExpressionPropertyMarkup(t){if(!t)throw new Error("Property not set");const e=this.getType(t),r=[];return"Number"===e?(this.pushState("casting-to-integer"),r.push("int("),this.astGeneric(t,r),r.push(")"),this.popState("casting-to-integer")):"LiteralInteger"===e?(this.pushState("casting-to-integer"),this.astGeneric(t,r),this.popState("casting-to-integer")):this.astGeneric(t,r),r.join("")}}}},function(t,e,r){const{Kernel:n}=r(10),{FunctionBuilder:s}=r(5),{CPUFunctionNode:i}=r(15),{utils:a}=r(2),{cpuKernelString:o}=r(26);t.exports={CPUKernel:class extends n{static getFeatures(){return this.features}static get features(){return Object.freeze({kernelMap:!0,isIntegerDivisionAccurate:!0})}static get isSupported(){return!0}static isContextMatch(t){return!1}static get mode(){return"cpu"}static nativeFunctionArguments(){return null}static nativeFunctionReturnType(){return null}static combineKernels(t){return t}constructor(t,e){super(t,e),this.mergeSettings(t.settings||e),this._imageData=null,this._colorData=null,this._kernelString=null,this.thread={x:0,y:0,z:0},this.translatedSources=null,this.run=function(){return this.run=null,this.build.apply(this,arguments),this.run.apply(this,arguments)}.bind(this)}initCanvas(){return"undefined"!=typeof document?document.createElement("canvas"):"undefined"!=typeof OffscreenCanvas?new OffscreenCanvas(0,0):void 0}initContext(){return this.canvas?this.canvas.getContext("2d"):null}initPlugins(t){return[]}validateSettings(){if(!this.output||0===this.output.length){if(1!==arguments.length)throw"Auto dimensions only supported for kernels with only one input";const t=a.getVariableType(arguments[0]);if("Array"===t)this.output=a.getDimensions(t);else{if("NumberTexture"!==t&&"ArrayTexture(4)"!==t)throw"Auto dimensions not supported for input type: "+t;this.output=arguments[0].output}}if(this.graphical&&2!==this.output.length)throw new Error("Output must have 2 dimensions on graphical mode");this.checkOutput()}translateSource(){if(this.leadingReturnStatement=this.output.length>1?"resultX[x] = ":"result[x] = ",this.subKernels){const t=[];for(let e=0;e<this.subKernels.length;e++){const{name:r}=this.subKernels[e];t.push(this.output.length>1?`resultX_${r}[x] = subKernelResult_${r};\n`:`result_${r}[x] = subKernelResult_${r};\n`)}this.followingReturnStatement=t.join("")}const t=s.fromKernel(this,i);this.translatedSources=t.getPrototypes("kernel"),this.graphical||this.returnType||(this.returnType=t.getKernelResultType())}build(){if(this.setupConstants(),this.setupArguments(arguments),this.validateSettings(),this.translateSource(),this.graphical){const{canvas:t,output:e}=this;if(!t)throw new Error("no canvas available for using graphical output");const r=e[0],n=e[1]||1;t.width=r,t.height=n,this._imageData=this.context.createImageData(r,n),this._colorData=new Uint8ClampedArray(r*n*4)}const t=this.getKernelString();this.kernelString=t,this.debug&&(console.log("Function output:"),console.log(t));try{this.run=new Function([],t).bind(this)()}catch(t){console.error("An error occurred compiling the javascript: ",t)}}color(t,e,r,n){void 0===n&&(n=1),t=Math.floor(255*t),e=Math.floor(255*e),r=Math.floor(255*r),n=Math.floor(255*n);const s=this.output[0],i=this.output[1],a=this.thread.x+(i-this.thread.y-1)*s;this._colorData[4*a+0]=t,this._colorData[4*a+1]=e,this._colorData[4*a+2]=r,this._colorData[4*a+3]=n}getKernelString(){if(null!==this._kernelString)return this._kernelString;let t=null,{translatedSources:e}=this;return e.length>1?e=e.filter(e=>/^function/.test(e)?e:(t=e,!1)):t=e.shift(),this._kernelString=`  const LOOP_MAX = ${this._getLoopMaxString()}\n  const constants = this.constants;\n  const _this = this;\n  return (${this.argumentNames.map(t=>"user_"+t).join(", ")}) => {\n    ${this._processConstants()}\n    ${this._processArguments()}\n    ${this.graphical?this._graphicalKernelBody(t):this._resultKernelBody(t)}\n    ${e.length>0?e.join("\n"):""}\n  };`}toString(){return o(this)}_getLoopMaxString(){return this.loopMaxIterations?` ${parseInt(this.loopMaxIterations)};`:" 1000;"}_processConstants(){if(!this.constants)return"";const t=[];for(let e in this.constants)switch(this.constantTypes[e]){case"HTMLImage":t.push(`    const constants_${e} = this._imageTo2DArray(this.constants.${e});\n`);break;case"HTMLImageArray":t.push(`    const constants_${e} = this._imageTo3DArray(this.constants.${e});\n`);break;case"Input":t.push(`    const constants_${e} = this.constants.${e}.value;\n`);break;default:t.push(`    const constants_${e} = this.constants.${e};\n`)}return t.join("")}_processArguments(){const t=[];for(let e=0;e<this.argumentTypes.length;e++)switch(this.argumentTypes[e]){case"HTMLImage":t.push(`    user_${this.argumentNames[e]} = this._imageTo2DArray(user_${this.argumentNames[e]});\n`);break;case"HTMLImageArray":t.push(`    user_${this.argumentNames[e]} = this._imageTo3DArray(user_${this.argumentNames[e]});\n`);break;case"Input":t.push(`    user_${this.argumentNames[e]} = user_${this.argumentNames[e]}.value;\n`)}return t.join("")}_imageTo2DArray(t){const e=this.canvas;e.width<t.width&&(e.width=t.width),e.height<t.height&&(e.height=t.height);const r=this.context;r.drawImage(t,0,0,t.width,t.height);const n=r.getImageData(0,0,t.width,t.height).data,s=new Array(t.height);let i=0;for(let e=t.height-1;e>=0;e--){const r=s[e]=new Array(t.width);for(let e=0;e<t.width;e++){const t=new Float32Array(4);t[0]=n[i++]/255,t[1]=n[i++]/255,t[2]=n[i++]/255,t[3]=n[i++]/255,r[e]=t}}return s}getPixels(){const[t,e]=this.output,r=e/2|0,n=4*t,s=new Uint8Array(4*t),i=this._imageData.data.slice(0);for(let t=0;t<r;++t){var a=t*n,o=(e-t-1)*n;s.set(i.subarray(a,a+n)),i.copyWithin(a,o,o+n),i.set(s,o)}return i}_imageTo3DArray(t){const e=new Array(t.length);for(let r=0;r<t.length;r++)e[r]=this._imageTo2DArray(t[r]);return e}_resultKernelBody(t){switch(this.output.length){case 1:return this._resultKernel1DLoop(t)+this._kernelOutput();case 2:return this._resultKernel2DLoop(t)+this._kernelOutput();case 3:return this._resultKernel3DLoop(t)+this._kernelOutput();default:throw new Error("unsupported size kernel")}}_graphicalKernelBody(t){switch(this.output.length){case 2:return this._graphicalKernel2DLoop(t)+this._graphicalOutput();default:throw new Error("unsupported size kernel")}}_graphicalOutput(){return"\n    this._imageData.data.set(this._colorData);\n    this.context.putImageData(this._imageData, 0, 0);\n    return;"}_getKernelResultTypeConstructorString(){switch(this.returnType){case"LiteralInteger":case"Number":case"Integer":case"Float":return"Float32Array";case"Array(2)":case"Array(3)":case"Array(4)":return"Array";default:if(this.graphical)return"Float32Array";throw new Error(`unhandled returnType ${this.returnType}`)}}_resultKernel1DLoop(t){const{output:e}=this,r=this._getKernelResultTypeConstructorString();return`const result = new ${r}(${e[0]});\n    ${this._mapSubKernels(t=>`const result_${t.name} = new ${r}(${e[0]});\n`).join("    ")}\n    ${this._mapSubKernels(t=>`let subKernelResult_${t.name};\n`).join("    ")}\n    for (let x = 0; x < ${e[0]}; x++) {\n      this.thread.x = x;\n      this.thread.y = 0;\n      this.thread.z = 0;\n      ${t}\n    }`}_resultKernel2DLoop(t){const{output:e}=this,r=this._getKernelResultTypeConstructorString();return`const result = new Array(${e[1]});\n\t\t${this._mapSubKernels(t=>`const result_${t.name} = new Array(${e[1]});\n`).join("    ")}\n\t\t${this._mapSubKernels(t=>`let subKernelResult_${t.name};\n`).join("    ")}\n    for (let y = 0; y < ${e[1]}; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      const resultX = result[y] = new ${r}(${e[0]});\n      ${this._mapSubKernels(t=>`const resultX_${t.name} = result_${t.name}[y] = new ${r}(${e[0]});\n`).join("")}\n      for (let x = 0; x < ${e[0]}; x++) {\n      \tthis.thread.x = x;\n        ${t}\n      }\n    }`}_graphicalKernel2DLoop(t){const{output:e}=this,r=this._getKernelResultTypeConstructorString();return`  ${this._mapSubKernels(t=>`const result_${t.name} = new Array(${e[1]});\n`).join("    ")}\n\t\t${this._mapSubKernels(t=>`let subKernelResult_${t.name};\n`).join("    ")}\n    for (let y = 0; y < ${e[1]}; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      ${this._mapSubKernels(t=>`const resultX_${t.name} = result_${t.name}[y] = new ${r}(${e[0]});\n`).join("")}\n      for (let x = 0; x < ${e[0]}; x++) {\n      \tthis.thread.x = x;\n        ${t}\n      }\n    }`}_resultKernel3DLoop(t){const{output:e}=this,r=this._getKernelResultTypeConstructorString();return`const result = new Array(${e[2]});\n    ${this._mapSubKernels(t=>`const result_${t.name} = new Array(${e[2]});\n`).join("    ")}\n    ${this._mapSubKernels(t=>`let subKernelResult_${t.name};\n`).join("    ")}\n    for (let z = 0; z < ${e[2]}; z++) {\n      this.thread.z = z;\n      const resultY = result[z] = new Array(${e[1]});\n      ${this._mapSubKernels(t=>`const resultY_${t.name} = result_${t.name}[z] = new Array(${e[1]});\n`).join("      ")}\n      for (let y = 0; y < ${e[1]}; y++) {\n        this.thread.y = y;\n        const resultX = resultY[y] = new ${r}(${e[0]});\n        ${this._mapSubKernels(t=>`const resultX_${t.name} = resultY_${t.name}[y] = new ${r}(${e[0]});\n`).join("        ")}\n        for (let x = 0; x < ${e[0]}; x++) {\n        \tthis.thread.x = x;\n          ${t}\n        }\n      }\n    }`}_kernelOutput(){return this.subKernels?`\n    return {\n      result: result,\n      ${this.subKernels.map(t=>`${t.property}: result_${t.name}`).join(",\n      ")}\n    };`:"\n    return result;"}_mapSubKernels(t){return null===this.subKernels?[""]:this.subKernels.map(t)}destroy(t){t&&delete this.canvas}static destroyContext(t){}toJSON(){const t=super.toJSON();return t.functionNodes=s.fromKernel(this,i).toJSON(),t}}}},function(t,e,r){const{FunctionNode:n}=r(11);t.exports={CPUFunctionNode:class extends n{astFunctionExpression(t,e){if(!this.isRootKernel){e.push("function"),e.push(" "),e.push(this.name),e.push("(");for(let t=0;t<this.argumentNames.length;++t){const r=this.argumentNames[t];t>0&&e.push(", "),e.push("user_"),e.push(r)}e.push(") {\n")}for(let r=0;r<t.body.body.length;++r)this.astGeneric(t.body.body[r],e),e.push("\n");return this.isRootKernel||e.push("}\n"),e}astReturnStatement(t,e){return this.isRootKernel?(e.push(this.leadingReturnStatement),this.astGeneric(t.argument,e),e.push(";\n"),e.push(this.followingReturnStatement),e.push("continue;\n")):this.isSubKernel?(e.push(`subKernelResult_${this.name} = `),this.astGeneric(t.argument,e),e.push(";"),e.push(`return subKernelResult_${this.name};`)):(e.push("return "),this.astGeneric(t.argument,e),e.push(";")),e}astLiteral(t,e){if(isNaN(t.value))throw this.astErrorOutput("Non-numeric literal not supported : "+t.value,t);return e.push(t.value),e}astBinaryExpression(t,e){return e.push("("),this.astGeneric(t.left,e),e.push(t.operator),this.astGeneric(t.right,e),e.push(")"),e}astIdentifierExpression(t,e){if("Identifier"!==t.type)throw this.astErrorOutput("IdentifierExpression - not an Identifier",t);switch(t.name){case"Infinity":e.push("Infinity");break;default:if(this.constants&&this.constants.hasOwnProperty(t.name))e.push("constants_"+t.name);else{const r=this.getKernelArgumentName(t.name);r?e.push("user_"+r):e.push("user_"+t.name)}}return e}astForStatement(t,e){if("ForStatement"!==t.type)throw this.astErrorOutput("Invalid for statement",t);const r=[],n=[],s=[],i=[];let a=null;if(t.init){this.pushState("in-for-loop-init"),this.astGeneric(t.init,r);for(let t=0;t<r.length;t++)r[t].includes&&r[t].includes(",")&&(a=!1);this.popState("in-for-loop-init")}else a=!1;if(t.test?this.astGeneric(t.test,n):a=!1,t.update?this.astGeneric(t.update,s):a=!1,t.body&&(this.pushState("loop-body"),this.astGeneric(t.body,i),this.popState("loop-body")),null===a&&(a=this.isSafe(t.init)&&this.isSafe(t.test)),a)e.push(`for (${r.join("")};${n.join("")};${s.join("")}){\n`),e.push(i.join("")),e.push("}\n");else{const t=this.getInternalVariableName("safeI");r.length>0&&e.push(r.join(""),";\n"),e.push(`for (let ${t}=0;${t}<LOOP_MAX;${t}++){\n`),n.length>0&&e.push(`if (!${n.join("")}) break;\n`),e.push(i.join("")),e.push(`\n${s.join("")};`),e.push("}\n")}return e}astWhileStatement(t,e){if("WhileStatement"!==t.type)throw this.astErrorOutput("Invalid while statement",t);return e.push("for (let i = 0; i < LOOP_MAX; i++) {"),e.push("if ("),this.astGeneric(t.test,e),e.push(") {\n"),this.astGeneric(t.body,e),e.push("} else {\n"),e.push("break;\n"),e.push("}\n"),e.push("}\n"),e}astDoWhileStatement(t,e){if("DoWhileStatement"!==t.type)throw this.astErrorOutput("Invalid while statement",t);return e.push("for (let i = 0; i < LOOP_MAX; i++) {"),this.astGeneric(t.body,e),e.push("if (!"),this.astGeneric(t.test,e),e.push(") {\n"),e.push("break;\n"),e.push("}\n"),e.push("}\n"),e}astAssignmentExpression(t,e){return this.astGeneric(t.left,e),e.push(t.operator),this.astGeneric(t.right,e),e}astBlockStatement(t,e){if(this.isState("loop-body")){this.pushState("block-body");for(let r=0;r<t.body.length;r++)this.astGeneric(t.body[r],e);this.popState("block-body")}else{e.push("{\n");for(let r=0;r<t.body.length;r++)this.astGeneric(t.body[r],e);e.push("}\n")}return e}astVariableDeclaration(t,e){"var"===t.kind&&this.varWarn(),e.push(`${t.kind} `);const r=t.declarations[0],n=this.getType(r.init);for(let r=0;r<t.declarations.length;r++)this.declarations[t.declarations[r].id.name]={type:"LiteralInteger"===n?"Number":n,dependencies:{constants:[],arguments:[]},isUnsafe:!1},r>0&&e.push(","),this.astGeneric(t.declarations[r],e);return this.isState("in-for-loop-init")||e.push(";"),e}astIfStatement(t,e){return e.push("if ("),this.astGeneric(t.test,e),e.push(")"),"BlockStatement"===t.consequent.type?this.astGeneric(t.consequent,e):(e.push(" {\n"),this.astGeneric(t.consequent,e),e.push("\n}\n")),t.alternate&&(e.push("else "),"BlockStatement"===t.alternate.type?this.astGeneric(t.alternate,e):(e.push(" {\n"),this.astGeneric(t.alternate,e),e.push("\n}\n"))),e}astThisExpression(t,e){return e.push("_this"),e}astMemberExpression(t,e){const{signature:r,type:n,property:s,xProperty:i,yProperty:a,zProperty:o,name:u,origin:h}=this.getMemberExpressionDetails(t);switch(r){case"this.thread.value":return e.push(`_this.thread.${u}`),e;case"this.output.value":switch(u){case"x":e.push(this.output[0]);break;case"y":e.push(this.output[1]);break;case"z":e.push(this.output[2]);break;default:throw this.astErrorOutput("Unexpected expression",t)}return e;case"value":throw this.astErrorOutput("Unexpected expression",t);case"value[]":case"value[][]":case"value[][][]":case"value.value":if("Math"===h)return e.push(Math[u]),e;switch(s){case"r":return e.push(`user_${u}[0]`),e;case"g":return e.push(`user_${u}[1]`),e;case"b":return e.push(`user_${u}[2]`),e;case"a":return e.push(`user_${u}[3]`),e}break;case"this.constants.value":case"this.constants.value[]":case"this.constants.value[][]":case"this.constants.value[][][]":break;case"fn()[]":return this.astGeneric(t.object,e),e.push("["),this.astGeneric(t.property,e),e.push("]"),e;default:throw this.astErrorOutput("Unexpected expression",t)}switch(n){case"Number":case"Integer":case"Float":case"Boolean":return e.push(`${h}_${u}`),e}const l=this.getKernelArgumentName(u),c=`${h}_${l||u}`;switch(n){case"Array(2)":case"Array(3)":case"Array(4)":case"HTMLImageArray":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":case"HTMLImage":default:const t=this.isInput(l||u);if(e.push(`${c}`),o&&a)if(t){const t=this.argumentSizes[this.argumentNames.indexOf(u)];e.push("[("),this.astGeneric(o,e),e.push(`*${t[1]*t[0]})+(`),this.astGeneric(a,e),e.push(`*${t[0]})+`),this.astGeneric(i,e),e.push("]")}else e.push("["),this.astGeneric(o,e),e.push("]"),e.push("["),this.astGeneric(a,e),e.push("]"),e.push("["),this.astGeneric(i,e),e.push("]");else if(a)if(t){const t=this.argumentSizes[this.argumentNames.indexOf(u)];e.push("[("),this.astGeneric(a,e),e.push(`*${t[0]})+`),this.astGeneric(i,e),e.push("]")}else e.push("["),this.astGeneric(a,e),e.push("]"),e.push("["),this.astGeneric(i,e),e.push("]");else e.push("["),this.astGeneric(i,e),e.push("]")}return e}astCallExpression(t,e){if(t.callee){let r=this.astMemberExpressionUnroll(t.callee);this.calledFunctions.indexOf(r)<0&&this.calledFunctions.push(r),this.calledFunctionsArguments[r]||(this.calledFunctionsArguments[r]=[]);const n=[];this.calledFunctionsArguments[r].push(n),e.push(r),e.push("(");for(let r=0;r<t.arguments.length;++r){const s=t.arguments[r];r>0&&e.push(", "),this.astGeneric(s,e);const i=this.getType(s);i?n.push({name:s.name||null,type:i}):n.push(null)}return e.push(")"),e}throw this.astErrorOutput("Unknown CallExpression",t)}astArrayExpression(t,e){const r=t.elements.length;e.push("[");for(let n=0;n<r;++n){n>0&&e.push(", ");const r=t.elements[n];this.astGeneric(r,e)}return e.push("]"),e}astDebuggerStatement(t,e){return e.push("debugger;"),e}}}},function(t,e,r){const n=r(27),{WebGLKernel:s}=r(6);let i=null,a=null,o=null,u=null,h=null;t.exports={HeadlessGLKernel:class extends s{static get isSupported(){return null!==i?i:(this.setupFeatureChecks(),i=null!==o)}static setupFeatureChecks(){if(a=null,u=null,"function"==typeof n)try{if(!(o=n(2,2,{preserveDrawingBuffer:!0}))||!o.getExtension)return;u={STACKGL_resize_drawingbuffer:o.getExtension("STACKGL_resize_drawingbuffer"),STACKGL_destroy_context:o.getExtension("STACKGL_destroy_context"),OES_texture_float:o.getExtension("OES_texture_float"),OES_texture_float_linear:o.getExtension("OES_texture_float_linear"),OES_element_index_uint:o.getExtension("OES_element_index_uint"),WEBGL_draw_buffers:o.getExtension("WEBGL_draw_buffers")},h=this.getFeatures()}catch(t){}}static isContextMatch(t){try{return"ANGLE"===t.getParameter(t.RENDERER)}catch(t){return!1}}static getFeatures(){const t=this.getIsDrawBuffers();return Object.freeze({isFloatRead:this.getIsFloatRead(),isIntegerDivisionAccurate:this.getIsIntegerDivisionAccurate(),isTextureFloat:this.getIsTextureFloat(),isDrawBuffers:t,kernelMap:t})}static getIsTextureFloat(){return Boolean(u.OES_texture_float)}static getIsDrawBuffers(){return Boolean(u.WEBGL_draw_buffers)}static get testCanvas(){return a}static get testContext(){return o}static get features(){return h}initCanvas(){return{}}initContext(){return n(2,2,{preserveDrawingBuffer:!0})}initExtensions(){this.extensions={STACKGL_resize_drawingbuffer:this.context.getExtension("STACKGL_resize_drawingbuffer"),STACKGL_destroy_context:this.context.getExtension("STACKGL_destroy_context"),OES_texture_float:this.context.getExtension("OES_texture_float"),OES_texture_float_linear:this.context.getExtension("OES_texture_float_linear"),OES_element_index_uint:this.context.getExtension("OES_element_index_uint"),WEBGL_draw_buffers:this.context.getExtension("WEBGL_draw_buffers")}}destroyExtensions(){this.extensions.STACKGL_resize_drawingbuffer=null,this.extensions.STACKGL_destroy_context=null,this.extensions.OES_texture_float=null,this.extensions.OES_texture_float_linear=null,this.extensions.OES_element_index_uint=null,this.extensions.WEBGL_draw_buffers=null}static destroyContext(t){const e=t.getExtension("STACKGL_destroy_context");e&&e.destroy&&e.destroy()}}}},function(t,e,r){const{Kernel:n}=r(10),{Texture:s}=r(4),{utils:i}=r(2);const a=Object.freeze({PackedPixelToUint8Array:Symbol("PackedPixelToUint8Array"),PackedPixelToFloat:Symbol("PackedPixelToFloat"),PackedPixelTo2DFloat:Symbol("PackedPixelTo2DFloat"),PackedPixelTo3DFloat:Symbol("PackedPixelTo3DFloat"),PackedTexture:Symbol("PackedTexture"),FloatPixelToFloat32Array:Symbol("FloatPixelToFloat32Array"),FloatPixelToFloat:Symbol("FloatPixelToFloat"),FloatPixelTo2DFloat:Symbol("FloatPixelTo2DFloat"),FloatPixelTo3DFloat:Symbol("FloatPixelTo3DFloat"),FloatPixelToArray2:Symbol("FloatPixelToArray2"),FloatPixelTo2DArray2:Symbol("FloatPixelTo2DArray2"),FloatPixelTo3DArray2:Symbol("FloatPixelTo3DArray2"),FloatPixelToArray3:Symbol("FloatPixelToArray3"),FloatPixelTo2DArray3:Symbol("FloatPixelTo2DArray3"),FloatPixelTo3DArray3:Symbol("FloatPixelTo3DArray3"),FloatPixelToArray4:Symbol("FloatPixelToArray4"),FloatPixelTo2DArray4:Symbol("FloatPixelTo2DArray4"),FloatPixelTo3DArray4:Symbol("FloatPixelTo3DArray4"),FloatTexture:Symbol("FloatTexture"),MemoryOptimizedFloatPixelToMemoryOptimizedFloat:Symbol("MemoryOptimizedFloatPixelToFloat"),MemoryOptimizedFloatPixelToMemoryOptimized2DFloat:Symbol("MemoryOptimizedFloatPixelTo2DFloat"),MemoryOptimizedFloatPixelToMemoryOptimized3DFloat:Symbol("MemoryOptimizedFloatPixelTo3DFloat")}),o={int:"Integer",float:"Number",vec2:"Array(2)",vec3:"Array(3)",vec4:"Array(4)"};t.exports={GLKernel:class extends n{static get mode(){return"gpu"}static getIsFloatRead(){const t=new this("function kernelFunction() {\n\t\t\treturn 1;\n\t\t}",{context:this.testContext,canvas:this.testCanvas,validate:!1,output:[1],precision:"single",floatOutputForce:!0,returnType:"Number"}),e=t.run();return t.destroy(!0),1===e[0]}static getIsIntegerDivisionAccurate(){const t=new this(function(t,e){return t[this.thread.x]/e[this.thread.x]}.toString(),{context:this.testContext,canvas:this.testCanvas,validate:!1,output:[2],returnType:"Number",precision:"unsigned"}),e=t.run([6,6030401],[3,3991]);return t.destroy(!0),2===e[0]&&1511===e[1]}static get testCanvas(){throw new Error(`"testCanvas" not defined on ${this.name}`)}static get testContext(){throw new Error(`"testContext" not defined on ${this.name}`)}static get features(){throw new Error(`"features" not defined on ${this.name}`)}static setupFeatureChecks(){throw new Error(`"setupFeatureChecks" not defined on ${this.name}`)}setFixIntegerDivisionAccuracy(t){return this.fixIntegerDivisionAccuracy=t,this}setPrecision(t){return this.precision=t,this}setFloatOutputForce(t){return this.floatOutputForce=t,this}setFloatTextures(t){return i.warnDeprecated("method","setFloatTextures","setOptimizeFloatMemory"),this.floatTextures=t,this}setOptimizeFloatMemory(t){return this.optimizeFloatMemory=t,this}static nativeFunctionArguments(t){const e=[],r=[],n=[],s=/^[a-zA-Z_]/,i=/[a-zA-Z_0-9]/;let a=0,u=null,h=null;for(;a<t.length;){const l=t[a],c=t[a+1],p=n.length>0?n[n.length-1]:null;if("FUNCTION_ARGUMENTS"!==p||"/"!==l||"*"!==c)if("MULTI_LINE_COMMENT"!==p||"*"!==l||"/"!==c)if("FUNCTION_ARGUMENTS"!==p||"/"!==l||"/"!==c)if("COMMENT"!==p||"\n"!==l)if(null!==p||"("!==l){if("FUNCTION_ARGUMENTS"===p){if(")"===l){n.pop();break}if("f"===l&&"l"===c&&"o"===t[a+2]&&"a"===t[a+3]&&"t"===t[a+4]&&" "===t[a+5]){n.push("DECLARE_VARIABLE"),h="float",u="",a+=6;continue}if("i"===l&&"n"===c&&"t"===t[a+2]&&" "===t[a+3]){n.push("DECLARE_VARIABLE"),h="int",u="",a+=4;continue}if("v"===l&&"e"===c&&"c"===t[a+2]&&"2"===t[a+3]&&" "===t[a+4]){n.push("DECLARE_VARIABLE"),h="vec2",u="",a+=5;continue}if("v"===l&&"e"===c&&"c"===t[a+2]&&"3"===t[a+3]&&" "===t[a+4]){n.push("DECLARE_VARIABLE"),h="vec3",u="",a+=5;continue}if("v"===l&&"e"===c&&"c"===t[a+2]&&"4"===t[a+3]&&" "===t[a+4]){n.push("DECLARE_VARIABLE"),h="vec4",u="",a+=5;continue}}else if("DECLARE_VARIABLE"===p){if(""===u){if(" "===l){a++;continue}if(!s.test(l))throw new Error("variable name is not expected string")}u+=l,i.test(c)||(n.pop(),r.push(u),e.push(o[h]))}a++}else n.push("FUNCTION_ARGUMENTS"),a++;else n.pop(),a++;else n.push("COMMENT"),a+=2;else n.pop(),a+=2;else n.push("MULTI_LINE_COMMENT"),a+=2}if(n.length>0)throw new Error("GLSL function was not parsable");return{argumentNames:r,argumentTypes:e}}static nativeFunctionReturnType(t){return o[t.match(/int|float|vec[2-4]/)[0]]}static combineKernels(t,e){t.apply(null,arguments);const{texSize:r,context:n,threadDim:s}=e.texSize;let a;if("single"===e.precision){const t=r[0],e=Math.ceil(r[1]/4);a=new Float32Array(t*e*4*4),n.readPixels(0,0,t,4*e,n.RGBA,n.FLOAT,a)}else{const t=new Uint8Array(r[0]*r[1]*4);n.readPixels(0,0,r[0],r[1],n.RGBA,n.UNSIGNED_BYTE,t),a=new Float32Array(t.buffer)}return a=a.subarray(0,s[0]*s[1]*s[2]),1===e.output.length?a:2===e.output.length?i.splitArray(a,e.output[0]):3===e.output.length?i.splitArray(a,e.output[0]*e.output[1]).map(function(t){return i.splitArray(t,e.output[0])}):void 0}constructor(t,e){super(t,e),this.texSize=null,this.floatOutputForce=null,this.fixIntegerDivisionAccuracy=null,this.translatedSource=null,this.renderStrategy=null,this.compiledFragmentShader=null,this.compiledVertexShader=null,this.optimizeFloatMemory=null}translateSource(){throw new Error(`"translateSource" not defined on ${this.constructor.name}`)}pickRenderStrategy(t){if(!this.graphical){if("unsigned"===this.precision)switch(this.returnType){case"LiteralInteger":case"Float":case"Number":case"Integer":return this.pipeline?(this.renderStrategy=a.PackedTexture,this.renderOutput=this.renderTexture):this.output[2]>0?(this.renderStrategy=a.PackedPixelTo3DFloat,this.renderOutput=this.render3DPackedFloat):this.output[1]>0?(this.renderStrategy=a.PackedPixelTo2DFloat,this.renderOutput=this.render2DPackedFloat):(this.renderStrategy=a.PackedPixelToFloat,this.renderOutput=this.renderPackedFloat),!0;case"Array(2)":case"Array(3)":case"Array(4)":return this.onRequestFallback(t),!1}else{if("single"!==this.precision)throw new Error(`unhandled precision of "${this.precision}"`);if(this.pipeline)return this.renderStrategy=a.FloatTexture,this.renderOutput=this.renderTexture,!0;switch(this.returnType){case"LiteralInteger":case"Float":case"Number":case"Integer":return this.output[2]>0?this.optimizeFloatMemory?(this.renderStrategy=a.MemoryOptimizedFloatPixelToMemoryOptimized3DFloat,this.renderOutput=this.renderMemoryOptimized3DFloat):(this.renderStrategy=a.FloatPixelTo3DFloat,this.renderOutput=this.render3DFloat):this.output[1]>0?this.optimizeFloatMemory?(this.renderStrategy=a.MemoryOptimizedFloatPixelToMemoryOptimized2DFloat,this.renderOutput=this.renderMemoryOptimized2DFloat):(this.renderStrategy=a.FloatPixelTo2DFloat,this.renderOutput=this.render2DFloat):this.optimizeFloatMemory?(this.renderStrategy=a.MemoryOptimizedFloatPixelToMemoryOptimizedFloat,this.renderOutput=this.renderMemoryOptimizedFloat):(this.renderStrategy=a.FloatPixelToFloat,this.renderOutput=this.renderFloat),!0;case"Array(2)":return this.output[2]>0?(this.renderStrategy=a.FloatPixelTo3DArray2,this.renderOutput=this.render3DArray2):this.output[1]>0?(this.renderStrategy=a.FloatPixelTo2DArray2,this.renderOutput=this.render2DArray2):(this.renderStrategy=a.FloatPixelToArray2,this.renderOutput=this.renderArray2),!0;case"Array(3)":return this.output[2]>0?(this.renderStrategy=a.FloatPixelTo3DArray3,this.renderOutput=this.render3DArray3):this.output[1]>0?(this.renderStrategy=a.FloatPixelTo2DArray3,this.renderOutput=this.render2DArray3):(this.renderStrategy=a.FloatPixelToArray3,this.renderOutput=this.renderArray3),!0;case"Array(4)":return this.output[2]>0?(this.renderStrategy=a.FloatPixelTo3DArray4,this.renderOutput=this.render3DArray4):this.output[1]>0?(this.renderStrategy=a.FloatPixelTo2DArray4,this.renderOutput=this.render2DArray4):(this.renderStrategy=a.FloatPixelToArray4,this.renderOutput=this.renderArray4),!0}}throw new Error(`unhandled return type "${this.returnType}"`)}}getKernelString(){throw new Error("abstract method call")}getMainResultTexture(){switch(this.returnType){case"LiteralInteger":case"Float":case"Integer":case"Number":return this.getMainResultNumberTexture();case"Array(2)":return this.getMainResultArray2Texture();case"Array(3)":return this.getMainResultArray3Texture();case"Array(4)":return this.getMainResultArray4Texture();default:throw new Error(`unhandled returnType type ${this.returnType}`)}}getMainResultKernelNumberTexture(){throw new Error("abstract method call")}getMainResultSubKernelNumberTexture(){throw new Error("abstract method call")}getMainResultKernelArray2Texture(){throw new Error("abstract method call")}getMainResultSubKernelArray2Texture(){throw new Error("abstract method call")}getMainResultKernelArray3Texture(){throw new Error("abstract method call")}getMainResultSubKernelArray3Texture(){throw new Error("abstract method call")}getMainResultKernelArray4Texture(){throw new Error("abstract method call")}getMainResultSubKernelArray4Texture(){throw new Error("abstract method call")}getMainResultGraphical(){throw new Error("abstract method call")}getMainResultMemoryOptimizedFloats(){throw new Error("abstract method call")}getMainResultPackedPixels(){throw new Error("abstract method call")}getMainResultString(){return this.graphical?this.getMainResultGraphical():"single"===this.precision?this.optimizeFloatMemory?this.getMainResultMemoryOptimizedFloats():this.getMainResultTexture():this.getMainResultPackedPixels()}getMainResultNumberTexture(){return i.linesToString(this.getMainResultKernelNumberTexture())+i.linesToString(this.getMainResultSubKernelNumberTexture())}getMainResultArray2Texture(){return i.linesToString(this.getMainResultKernelArray2Texture())+i.linesToString(this.getMainResultSubKernelArray2Texture())}getMainResultArray3Texture(){return i.linesToString(this.getMainResultKernelArray3Texture())+i.linesToString(this.getMainResultSubKernelArray3Texture())}getMainResultArray4Texture(){return i.linesToString(this.getMainResultKernelArray4Texture())+i.linesToString(this.getMainResultSubKernelArray4Texture())}getReturnTextureType(){if(this.graphical)return"ArrayTexture(4)";if("single"===this.precision)switch(this.returnType){case"Float":case"Number":case"Integer":return this.optimizeFloatMemory?"MemoryOptimizedNumberTexture":"ArrayTexture(1)";case"Array(2)":return"ArrayTexture(2)";case"Array(3)":return"ArrayTexture(3)";case"Array(4)":return"ArrayTexture(4)";default:throw new Error(`unsupported returnType ${this.returnType}`)}else switch(this.returnType){case"Float":case"Number":case"Integer":return"NumberTexture";case"Array(2)":case"Array(3)":case"Array(4)":default:throw new Error(`unsupported returnType ${this.returnType}`)}}renderTexture(){return new s({texture:this.outputTexture,size:this.texSize,dimensions:this.threadDim,output:this.output,context:this.context,gpu:this.gpu,type:this.getReturnTextureType()})}readPackedPixelsToUint8Array(){if("unsigned"!==this.precision)throw new Error('Requires this.precision to be "unsigned"');const{texSize:t,context:e}=this,r=new Uint8Array(t[0]*t[1]*4);return e.readPixels(0,0,t[0],t[1],e.RGBA,e.UNSIGNED_BYTE,r),r}readPackedPixelsToFloat32Array(){return new Float32Array(this.readPackedPixelsToUint8Array().buffer)}readFloatPixelsToFloat32Array(){if("single"!==this.precision)throw new Error('Requires this.precision to be "single"');const{texSize:t,context:e}=this,r=t[0],n=t[1],s=new Float32Array(r*n*4);return e.readPixels(0,0,r,n,e.RGBA,e.FLOAT,s),s}readMemoryOptimizedFloatPixelsToFloat32Array(){if("single"!==this.precision)throw new Error('Requires this.precision to be "single"');const{texSize:t,context:e}=this,r=t[0],n=t[1],s=new Float32Array(r*n*4);return e.readPixels(0,0,r,n,e.RGBA,e.FLOAT,s),s}renderPackedFloat(){const[t]=this.output;return this.readPackedPixelsToFloat32Array().subarray(0,t)}render2DPackedFloat(){const t=this.readPackedPixelsToFloat32Array(),[e,r]=this.output,n=new Array(r);for(let s=0;s<r;s++){const r=s*e,i=r+e;n[s]=t.subarray(r,i)}return n}render3DPackedFloat(){const t=this.readPackedPixelsToFloat32Array(),[e,r,n]=this.output,s=new Array(n);for(let i=0;i<n;i++){const n=new Array(r);for(let s=0;s<r;s++){const a=i*r*e+s*e,o=a+e;n[s]=t.subarray(a,o)}s[i]=n}return s}renderFloat(){const t=this.readFloatPixelsToFloat32Array(),[e]=this.output,r=new Float32Array(e);let n=0;for(let s=0;s<e;s++)r[s]=t[n],n+=4;return r}renderMemoryOptimizedFloat(){const t=this.readMemoryOptimizedFloatPixelsToFloat32Array(),[e]=this.output;return t.subarray(0,e)}render2DFloat(){const t=this.readFloatPixelsToFloat32Array(),[e,r]=this.output,n=new Array(r);let s=0;for(let i=0;i<r;i++){const r=new Float32Array(e);for(let n=0;n<e;n++)r[n]=t[s],s+=4;n[i]=r}return n}renderMemoryOptimized2DFloat(){const t=this.readFloatPixelsToFloat32Array(),[e,r]=this.output,n=new Array(r);for(let s=0;s<r;s++){const r=s*e;n[s]=t.subarray(r,r+e)}return n}render3DFloat(){const t=this.readFloatPixelsToFloat32Array(),[e,r,n]=this.output,s=new Array(n);let i=0;for(let a=0;a<n;a++){const n=new Array(r);for(let s=0;s<r;s++){const r=new Float32Array(e);for(let n=0;n<e;n++)r[n]=t[i],i+=4;n[s]=r}s[a]=n}return s}renderMemoryOptimized3DFloat(){const t=this.readFloatPixelsToFloat32Array(),[e,r,n]=this.output,s=new Array(n);for(let i=0;i<n;i++){const n=new Array(r);for(let s=0;s<r;s++){const a=i*r*e+s*e;n[s]=t.subarray(a,a+e)}s[i]=n}return s}renderArray2(){const t=this.readFloatPixelsToFloat32Array(),[e]=this.output,r=new Array(e),n=4*e;let s=0;for(let e=0;e<n;e+=4)r[s++]=t.subarray(e,e+2);return r}render2DArray2(){const t=this.readFloatPixelsToFloat32Array(),[e,r]=this.output,n=new Array(r),s=4*e;for(let i=0;i<r;i++){const r=new Array(e);let a=0;for(let e=0;e<s;e+=4)r[a++]=t.subarray(e,e+2);n[i]=r}return n}render3DArray2(){const t=this.readFloatPixelsToFloat32Array(),[e,r,n]=this.output,s=4*e,i=new Array(n);for(let a=0;a<n;a++){const n=new Array(r);for(let i=0;i<r;i++){const r=new Array(e);let a=0;for(let e=0;e<s;e+=4)r[a++]=t.subarray(e,e+2);n[i]=r}i[a]=n}return i}renderArray3(){const t=this.readFloatPixelsToFloat32Array(),[e]=this.output,r=new Array(e),n=4*e;let s=0;for(let e=0;e<n;e+=4)r[s++]=t.subarray(e,e+3);return r}render2DArray3(){const t=this.readFloatPixelsToFloat32Array(),[e,r]=this.output,n=4*e,s=new Array(r);for(let i=0;i<r;i++){const r=new Array(e);let a=0;for(let e=0;e<n;e+=4)r[a++]=t.subarray(e,e+3);s[i]=r}return s}render3DArray3(){const t=this.readFloatPixelsToFloat32Array(),[e,r,n]=this.output,s=4*e,i=new Array(n);for(let a=0;a<n;a++){const n=new Array(r);for(let i=0;i<r;i++){const r=new Array(e);let a=0;for(let e=0;e<s;e+=4)r[a++]=t.subarray(e,e+3);n[i]=r}i[a]=n}return i}renderArray4(){const t=this.readFloatPixelsToFloat32Array(),[e]=this.output,r=new Array(e),n=4*e;let s=0;for(let e=0;e<n;e+=4)r[s++]=t.subarray(e,e+4);return r}render2DArray4(){const t=this.readFloatPixelsToFloat32Array(),[e,r]=this.output,n=4*e,s=new Array(r);for(let i=0;i<r;i++){const r=new Array(e);let a=0;for(let e=0;e<n;e+=4)r[a++]=t.subarray(e,e+4);s[i]=r}return s}render3DArray4(){const t=this.readFloatPixelsToFloat32Array(),[e,r,n]=this.output,s=4*e,i=new Array(n);for(let a=0;a<n;a++){const n=new Array(r);for(let i=0;i<r;i++){const r=new Array(e);let a=0;for(let e=0;e<s;e+=4)r[a++]=t.subarray(e,e+4);n[i]=r}i[a]=n}return i}getPixels(){const{context:t,output:e}=this,[r,n]=e,s=new Uint8Array(r*n*4);return t.readPixels(0,0,r,n,t.RGBA,t.UNSIGNED_BYTE,s),s}},renderStrategy:a}},function(t,e,r){const{WebGLKernel:n}=r(6),{WebGL2FunctionNode:s}=r(19),{FunctionBuilder:i}=r(5),{utils:a}=r(2),{Texture:o}=r(4),{fragmentShader:u}=r(32),{vertexShader:h}=r(33);let l=null,c=null,p=null,f=null,d=null;t.exports={WebGL2Kernel:class extends n{static get isSupported(){return null!==l?l:(this.setupFeatureChecks(),l=this.isContextMatch(p))}static setupFeatureChecks(){"undefined"!=typeof document?c=document.createElement("canvas"):"undefined"!=typeof OffscreenCanvas&&(c=new OffscreenCanvas(0,0)),c&&(p=c.getContext("webgl2"))&&p.getExtension&&(f={EXT_color_buffer_float:p.getExtension("EXT_color_buffer_float"),OES_texture_float_linear:p.getExtension("OES_texture_float_linear")},d=this.getFeatures())}static isContextMatch(t){return"undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext}static getFeatures(){return Object.freeze({isFloatRead:this.getIsFloatRead(),isIntegerDivisionAccurate:this.getIsIntegerDivisionAccurate(),kernelMap:!0,isTextureFloat:!0})}static getIsTextureFloat(){return!0}static getIsIntegerDivisionAccurate(){return super.getIsIntegerDivisionAccurate()}static get testCanvas(){return c}static get testContext(){return p}static get features(){return d}static get fragmentShader(){return u}static get vertexShader(){return h}initContext(){return this.canvas.getContext("webgl2",{alpha:!1,depth:!1,antialias:!1})}initExtensions(){this.extensions={EXT_color_buffer_float:this.context.getExtension("EXT_color_buffer_float"),OES_texture_float_linear:this.context.getExtension("OES_texture_float_linear")}}validateSettings(){if(!this.validate)return void(this.texSize=a.dimToTexSize({floatTextures:this.optimizeFloatMemory,floatOutput:"single"===this.precision},this.output,!0));const t=this.constructor.features;if("single"===this.precision&&!0!==this.floatOutputForce&&!t.isFloatRead)throw new Error("Float texture outputs are not supported");if(this.graphical||null!==this.precision||(this.precision=t.isFloatRead?"single":"unsigned"),null===this.fixIntegerDivisionAccuracy?this.fixIntegerDivisionAccuracy=!t.isIntegerDivisionAccurate:this.fixIntegerDivisionAccuracy&&t.isIntegerDivisionAccurate&&(this.fixIntegerDivisionAccuracy=!1),this.checkOutput(),!this.output||0===this.output.length){if(1!==arguments.length)throw new Error("Auto output only supported for kernels with only one input");const t=a.getVariableType(arguments[0]);switch(t){case"Array":this.output=a.getDimensions(t);break;case"NumberTexture":case"MemoryOptimizedNumberTexture":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":this.output=arguments[0].output;break;default:throw new Error("Auto output not supported for input type: "+t)}}if(this.graphical){if(2!==this.output.length)throw new Error("Output must have 2 dimensions on graphical mode");return"single"===this.precision&&(console.warn("Cannot use graphical mode and single precision at the same time"),this.precision="unsigned"),void(this.texSize=a.clone(this.output))}!this.graphical&&null===this.precision&&t.isTextureFloat&&(this.precision="single"),this.texSize=a.dimToTexSize({floatTextures:!this.optimizeFloatMemory,floatOutput:"single"===this.precision},this.output,!0),("single"===this.precision||this.floatOutputForce)&&this.context.getExtension("EXT_color_buffer_float")}translateSource(){const t=i.fromKernel(this,s,{fixIntegerDivisionAccuracy:this.fixIntegerDivisionAccuracy});this.translatedSource=t.getPrototypeString("kernel"),this.graphical||this.returnType||(this.returnType=t.getKernelResultType())}run(){null===this.program&&this.build.apply(this,arguments);const{argumentNames:t,argumentTypes:e,texSize:r}=this,n=this.context;n.useProgram(this.program),n.scissor(0,0,r[0],r[1]),this.hardcodeConstants||(this.setUniform3iv("uOutputDim",new Int32Array(this.threadDim)),this.setUniform2iv("uTexSize",r)),this.setUniform2f("ratio",r[0]/this.maxTexSize[0],r[1]/this.maxTexSize[1]),this.argumentsLength=0;for(let r=0;r<t.length;r++)this.addArgument(arguments[r],e[r],t[r]);if(this.plugins)for(let t=0;t<this.plugins.length;t++){const e=this.plugins[t];e.onBeforeRun&&e.onBeforeRun(this)}if(this.graphical)return this.pipeline?(n.bindRenderbuffer(n.RENDERBUFFER,null),n.bindFramebuffer(n.FRAMEBUFFER,this.framebuffer),this.outputTexture&&!this.immutable||this._setupOutputTexture(),n.drawArrays(n.TRIANGLE_STRIP,0,4),new o({texture:this.outputTexture,size:r,dimensions:this.threadDim,output:this.output,context:this.context,gpu:this.gpu,type:this.getReturnTextureType()})):(n.bindRenderbuffer(n.RENDERBUFFER,null),n.bindFramebuffer(n.FRAMEBUFFER,null),void n.drawArrays(n.TRIANGLE_STRIP,0,4));if(n.bindFramebuffer(n.FRAMEBUFFER,this.framebuffer),this.immutable&&this._setupOutputTexture(),null!==this.subKernels&&(this.immutable&&(this.subKernelOutputTextures=[],this._setupSubOutputTextures(this.subKernels.length)),n.drawBuffers(this.drawBuffersMap)),n.drawArrays(n.TRIANGLE_STRIP,0,4),null!==this.subKernelOutputTextures&&null!==this.subKernels){const t={result:this.renderOutput()};if(this.pipeline)for(let e=0;e<this.subKernels.length;e++)t[this.subKernels[e].property]=new o({texture:this.subKernelOutputTextures[e],size:r,dimensions:this.threadDim,output:this.output,context:this.context,gpu:this.gpu,type:this.getReturnTextureType()});else for(let e=0;e<this.subKernels.length;e++)t[this.subKernels[e].property]=new o({texture:this.subKernelOutputTextures[e],size:r,dimensions:this.threadDim,output:this.output,context:this.context,gpu:this.gpu,type:this.getReturnTextureType()}).toArray();return t}return this.renderOutput()}drawBuffers(){this.context.drawBuffers(this.drawBuffersMap)}getOutputTexture(){return this.outputTexture}_setupOutputTexture(){const{texSize:t}=this,e=this.context,r=this.outputTexture=e.createTexture();if(e.activeTexture(e.TEXTURE0+this.constantsLength+this.argumentNames.length),e.bindTexture(e.TEXTURE_2D,r),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),"single"===this.precision)if(this.pipeline)switch(this.returnType){case"Number":case"Float":case"Integer":this.optimizeFloatMemory?e.texImage2D(e.TEXTURE_2D,0,e.RGBA32F,t[0],t[1],0,e.RGBA,e.FLOAT,null):e.texImage2D(e.TEXTURE_2D,0,e.R32F,t[0],t[1],0,e.RED,e.FLOAT,null);break;case"Array(2)":e.texImage2D(e.TEXTURE_2D,0,e.RG32F,t[0],t[1],0,e.RG,e.FLOAT,null);break;case"Array(3)":e.texImage2D(e.TEXTURE_2D,0,e.RGB32F,t[0],t[1],0,e.RGB,e.FLOAT,null);break;case"Array(4)":e.texImage2D(e.TEXTURE_2D,0,e.RGBA32F,t[0],t[1],0,e.RGBA,e.FLOAT,null);break;default:throw new Error("Unhandled return type")}else e.texImage2D(e.TEXTURE_2D,0,e.RGBA32F,t[0],t[1],0,e.RGBA,e.FLOAT,null);else e.texImage2D(e.TEXTURE_2D,0,e.RGBA,t[0],t[1],0,e.RGBA,e.UNSIGNED_BYTE,null);e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0)}_setupSubOutputTextures(t){const{texSize:e}=this,r=this.context,n=this.drawBuffersMap=[r.COLOR_ATTACHMENT0],s=this.subKernelOutputTextures=[];for(let i=0;i<t;i++){const t=this.context.createTexture();s.push(t),n.push(r.COLOR_ATTACHMENT0+i+1),r.activeTexture(r.TEXTURE0+this.constantsLength+this.argumentNames.length+i),r.bindTexture(r.TEXTURE_2D,t),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST),"single"===this.precision?r.texImage2D(r.TEXTURE_2D,0,r.RGBA32F,e[0],e[1],0,r.RGBA,r.FLOAT,null):r.texImage2D(r.TEXTURE_2D,0,r.RGBA,e[0],e[1],0,r.RGBA,r.UNSIGNED_BYTE,null),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+i+1,r.TEXTURE_2D,t,0)}}addArgument(t,e,r){const n=this.context,s=this.getArgumentTexture(r);switch(t instanceof o&&(e=t.type),e){case"Array":case"Array(2)":case"Array(3)":case"Array(4)":case"Array2D":case"Array3D":{const e=a.getDimensions(t,!0),i=this.argumentBitRatios[this.argumentsLength];if("single"===this.precision){const o=a.getMemoryOptimizedFloatTextureSize(e,i);n.activeTexture(n.TEXTURE0+this.constantsLength+this.argumentsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);const u=o[0]*o[1]*i,h=this.formatArrayTransfer(t,u,Float32Array);n.texImage2D(n.TEXTURE_2D,0,n.RGBA32F,o[0],o[1],0,n.RGBA,n.FLOAT,h),this.hardcodeConstants||(this.setUniform3iv(`user_${r}Dim`,e),this.setUniform2iv(`user_${r}Size`,o)),this.setUniform1i(`user_${r}`,this.argumentsLength)}else{const o=a.getMemoryOptimizedPackedTextureSize(e,i);n.activeTexture(n.TEXTURE0+this.constantsLength+this.argumentsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);const u=o[0]*o[1]*(4/i),h=this.formatArrayTransfer(t,u),l=new Uint8Array(h.buffer);n.texImage2D(n.TEXTURE_2D,0,n.RGBA,o[0],o[1],0,n.RGBA,n.UNSIGNED_BYTE,l),this.hardcodeConstants||(this.setUniform3iv(`user_${r}Dim`,e),this.setUniform2iv(`user_${r}Size`,o)),this.setUniform1i(`user_${r}`,this.argumentsLength)}break}case"Integer":case"Float":case"Number":this.setUniform1f(`user_${r}`,t);break;case"Input":{const e=t,i=a.getDimensions(e,!0),o=this.argumentBitRatios[this.argumentsLength];if("single"===this.precision){const t=a.getMemoryOptimizedFloatTextureSize(i,o);n.activeTexture(n.TEXTURE0+this.constantsLength+this.argumentsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);const u=t[0]*t[1]*o,h=this.formatArrayTransfer(e.value,u,Float32Array);n.texImage2D(n.TEXTURE_2D,0,n.RGBA32F,t[0],t[1],0,n.RGBA,n.FLOAT,h),this.hardcodeConstants||(this.setUniform3iv(`user_${r}Dim`,i),this.setUniform2iv(`user_${r}Size`,t)),this.setUniform1i(`user_${r}`,this.argumentsLength)}else{const t=a.getMemoryOptimizedPackedTextureSize(i,o);n.activeTexture(n.TEXTURE0+this.constantsLength+this.argumentsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);const u=t[0]*t[1]*(4/o),h=this.formatArrayTransfer(e.value,u),l=new Uint8Array(h.buffer);n.texImage2D(n.TEXTURE_2D,0,n.RGBA,t[0],t[1],0,n.RGBA,n.UNSIGNED_BYTE,l),this.hardcodeConstants||(this.setUniform3iv(`user_${r}Dim`,i),this.setUniform2iv(`user_${r}Size`,t)),this.setUniform1i(`user_${r}`,this.argumentsLength)}break}case"HTMLImage":{const e=t,i=[e.width,e.height,1],a=[e.width,e.height];n.activeTexture(n.TEXTURE0+this.constantsLength+this.argumentsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,!0);const o=0,u=n.RGBA,h=n.RGBA,l=n.UNSIGNED_BYTE;n.texImage2D(n.TEXTURE_2D,o,u,h,l,e),this.setUniform3iv(`user_${r}Dim`,i),this.setUniform2iv(`user_${r}Size`,a),this.setUniform1i(`user_${r}`,this.argumentsLength);break}case"HTMLImageArray":{const e=t,i=[e[0].width,e[0].height,e.length],a=[e[0].width,e[0].height];n.activeTexture(n.TEXTURE0+this.constantsLength+this.argumentsLength),n.bindTexture(n.TEXTURE_2D_ARRAY,s),n.texParameteri(n.TEXTURE_2D_ARRAY,n.TEXTURE_MAG_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D_ARRAY,n.TEXTURE_MIN_FILTER,n.NEAREST),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,!0);const o=0,u=n.RGBA,h=e[0].width,l=e[0].height,c=e.length,p=0,f=n.RGBA,d=n.UNSIGNED_BYTE;n.texImage3D(n.TEXTURE_2D_ARRAY,o,u,h,l,c,p,f,d,null);for(let t=0;t<e.length;t++){const r=0,s=0,i=1;n.texSubImage3D(n.TEXTURE_2D_ARRAY,o,r,s,t,e[t].width,e[t].height,i,f,d,e[t])}this.setUniform3iv(`user_${r}Dim`,i),this.setUniform2iv(`user_${r}Size`,a),this.setUniform1i(`user_${r}`,this.argumentsLength);break}case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":{const s=t;if(s.context!==this.context)throw new Error(`argument ${r} (${e}) must be from same context`);const i=s.dimensions,a=s.size;n.activeTexture(n.TEXTURE0+this.constantsLength+this.argumentsLength),n.bindTexture(n.TEXTURE_2D,s.texture),this.setUniform3iv(`user_${r}Dim`,i),this.setUniform2iv(`user_${r}Size`,a),this.setUniform1i(`user_${r}`,this.argumentsLength);break}case"MemoryOptimizedNumberTexture":case"NumberTexture":{const s=t;if(s.context!==this.context)throw new Error(`argument ${r} (${e}) must be from same context`);const i=s.dimensions,a=s.size;n.activeTexture(n.TEXTURE0+this.constantsLength+this.argumentsLength),n.bindTexture(n.TEXTURE_2D,s.texture),this.setUniform3iv(`user_${r}Dim`,i),this.setUniform2iv(`user_${r}Size`,a),this.setUniform1i(`user_${r}`,this.argumentsLength);break}case"Boolean":this.setUniform1i(`user_${r}`,t?1:0);break;default:throw new Error("Argument type not supported: "+t)}this.argumentsLength++}_getMainConstantsString(){const t=[];if(this.constants)for(let e in this.constants){if(!this.constants.hasOwnProperty(e))continue;let r=this.constants[e],n=a.getVariableType(r);switch(n){case"Integer":t.push("const int constants_"+e+" = "+parseInt(r));break;case"Float":t.push("const float constants_"+e+" = "+parseFloat(r));break;case"Array":case"Input":case"HTMLImage":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":case"NumberTexture":t.push(`uniform highp sampler2D constants_${e}`,`uniform highp ivec2 constants_${e}Size`,`uniform highp ivec3 constants_${e}Dim`);break;case"HTMLImageArray":t.push(`uniform highp sampler2DArray constants_${e}`,`uniform highp ivec2 constants_${e}Size`,`uniform highp ivec3 constants_${e}Dim`);break;case"Boolean":t.push("const bool constants_"+e+" = "+(r?"true":"false"));break;default:throw new Error(`Unsupported constant ${e} type ${n}`)}}return a.linesToString(t)}addConstant(t,e,r){const n=this.context,s=this.getArgumentTexture(r);switch(t instanceof o&&(e=t.type),e){case"Array":case"Array(2)":case"Array(3)":case"Array(4)":case"Array2D":case"Array3D":{const e=a.getDimensions(t,!0),i=this.constantBitRatios[r];if("single"===this.precision){const o=a.getMemoryOptimizedFloatTextureSize(e,i);n.activeTexture(n.TEXTURE0+this.constantsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);const u=o[0]*o[1]*i,h=this.formatArrayTransfer(t,u,Float32Array);n.texImage2D(n.TEXTURE_2D,0,n.RGBA32F,o[0],o[1],0,n.RGBA,n.FLOAT,h),this.hardcodeConstants||(this.setUniform3iv(`constants_${r}Dim`,e),this.setUniform2iv(`constants_${r}Size`,o)),this.setUniform1i(`constants_${r}`,this.constantsLength)}else{const o=a.getMemoryOptimizedPackedTextureSize(e,i);n.activeTexture(n.TEXTURE0+this.constantsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);const u=o[0]*o[1]*(4/i),h=this.formatArrayTransfer(t,u),l=new Uint8Array(h.buffer);n.texImage2D(n.TEXTURE_2D,0,n.RGBA,o[0],o[1],0,n.RGBA,n.UNSIGNED_BYTE,l),this.hardcodeConstants||(this.setUniform3iv(`constants_${r}Dim`,e),this.setUniform2iv(`constants_${r}Size`,o)),this.setUniform1i(`constants_${r}`,this.constantsLength)}}break;case"Input":{const e=t,i=a.getDimensions(e,!0),o=this.constantBitRatios[r];if("single"===this.precision){const t=a.getMemoryOptimizedFloatTextureSize(i,o);n.activeTexture(n.TEXTURE0+this.constantsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);const u=t[0]*t[1]*o,h=this.formatArrayTransfer(e.value,u,Float32Array);n.texImage2D(n.TEXTURE_2D,0,n.RGBA32F,t[0],t[1],0,n.RGBA,n.FLOAT,h),this.hardcodeConstants||(this.setUniform3iv(`constants_${r}Dim`,i),this.setUniform2iv(`constants_${r}Size`,t)),this.setUniform1i(`constants_${r}`,this.constantsLength)}else{const t=a.getMemoryOptimizedPackedTextureSize(i,o);n.activeTexture(n.TEXTURE0+this.constantsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST);const u=t[0]*t[1]*(4/o),h=this.formatArrayTransfer(e.value,u),l=new Uint8Array(h.buffer);n.texImage2D(n.TEXTURE_2D,0,n.RGBA,t[0],t[1],0,n.RGBA,n.UNSIGNED_BYTE,l),this.hardcodeConstants||(this.setUniform3iv(`constants_${r}Dim`,i),this.setUniform2iv(`constants_${r}Size`,t)),this.setUniform1i(`constants_${r}`,this.argumentsLength)}break}case"HTMLImage":{const e=t,i=[e.width,e.height,1],a=[e.width,e.height];n.activeTexture(n.TEXTURE0+this.constantsLength),n.bindTexture(n.TEXTURE_2D,s),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,!0);const o=0,u=n.RGBA,h=n.RGBA,l=n.UNSIGNED_BYTE;n.texImage2D(n.TEXTURE_2D,o,u,h,l,e),this.setUniform3iv(`constants_${r}Dim`,i),this.setUniform2iv(`constants_${r}Size`,a),this.setUniform1i(`constants_${r}`,this.constantsLength);break}case"HTMLImageArray":{const e=t,i=[e[0].width,e[0].height,e.length],a=[e[0].width,e[0].height];n.activeTexture(n.TEXTURE0+this.constantsLength),n.bindTexture(n.TEXTURE_2D_ARRAY,s),n.texParameteri(n.TEXTURE_2D_ARRAY,n.TEXTURE_MAG_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D_ARRAY,n.TEXTURE_MIN_FILTER,n.NEAREST),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,!0);const o=0,u=n.RGBA,h=e[0].width,l=e[0].height,c=e.length,p=0,f=n.RGBA,d=n.UNSIGNED_BYTE;n.texImage3D(n.TEXTURE_2D_ARRAY,o,u,h,l,c,p,f,d,null);for(let t=0;t<e.length;t++){const r=0,s=0,i=1;n.texSubImage3D(n.TEXTURE_2D_ARRAY,o,r,s,t,e[t].width,e[t].height,i,f,d,e[t])}this.setUniform3iv(`constants_${r}Dim`,i),this.setUniform2iv(`constants_${r}Size`,a),this.setUniform1i(`constants_${r}`,this.constantsLength);break}case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":{const s=t;if(s.context!==this.context)throw new Error(`constant ${r} (${e}) must be from same context`);const i=s.dimensions,a=s.size;n.activeTexture(n.TEXTURE0+this.constantsLength),n.bindTexture(n.TEXTURE_2D,s.texture),this.setUniform3iv(`constants_${r}Dim`,i),this.setUniform2iv(`constants_${r}Size`,a),this.setUniform1i(`constants_${r}`,this.constantsLength);break}case"MemoryOptimizedNumberTexture":case"NumberTexture":{const s=t;if(s.context!==this.context)throw new Error(`constant ${r} (${e}) must be from same context`);const i=s.dimensions,a=s.size;n.activeTexture(n.TEXTURE0+this.constantsLength),n.bindTexture(n.TEXTURE_2D,s.texture),this.setUniform3iv(`constants_${r}Dim`,i),this.setUniform2iv(`constants_${r}Size`,a),this.setUniform1i(`constants_${r}`,this.constantsLength);break}case"Integer":case"Float":default:throw new Error("constant type not supported: "+t)}this.constantsLength++}_getHeaderString(){return""}_getTextureCoordinate(){const t=this.subKernels;return null===t||t.length<1?"in highp vec2 vTexCoord;\n":"out highp vec2 vTexCoord;\n"}_getMainArgumentsString(t){const e=[],r=this.argumentTypes,n=this.argumentNames;for(let s=0;s<n.length;s++){const i=t[s],o=n[s],u=r[s];if(this.hardcodeConstants)switch(u){case"Array":case"NumberTexture":case"MemoryOptimizedNumberTexture":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":case"Input":case"HTMLImage":const t=a.getDimensions(i,!0),r=a.dimToTexSize({floatTextures:this.optimizeFloatMemory,floatOutput:"single"===this.precision},t);e.push(`uniform highp sampler2D user_${o}`,`highp ivec2 user_${o}Size = ivec2(${r[0]}, ${r[1]})`,`highp ivec3 user_${o}Dim = ivec3(${t[0]}, ${t[1]}, ${t[2]})`);break;case"Integer":e.push(`highp float user_${o} = ${i}.0`);break;case"Float":case"Number":e.push(`highp float user_${o} = ${Number.isInteger(i)?i+".0":i}`);break;case"Boolean":e.push(`uniform int user_${o}`);break;default:throw new Error(`Argument type ${u} not supported in WebGL2`)}else switch(u){case"Array":case"NumberTexture":case"MemoryOptimizedNumberTexture":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":case"Input":case"HTMLImage":e.push(`uniform highp sampler2D user_${o}`,`uniform highp ivec2 user_${o}Size`,`uniform highp ivec3 user_${o}Dim`);break;case"HTMLImageArray":e.push(`uniform highp sampler2DArray user_${o}`,`uniform highp ivec2 user_${o}Size`,`uniform highp ivec3 user_${o}Dim`);break;case"Integer":case"Float":case"Number":e.push(`uniform float user_${o}`);break;case"Boolean":e.push(`uniform int user_${o}`);break;default:throw new Error(`Argument type ${u} not supported in WebGL2`)}}return a.linesToString(e)}getKernelString(){let t;switch(this.returnType){case"Array(2)":t="vec2 kernelResult";break;case"Array(3)":t="vec3 kernelResult";break;case"Array(4)":t="vec4 kernelResult";break;case"LiteralInteger":case"Float":case"Number":case"Integer":t="float kernelResult";break;default:if(!this.graphical)throw new Error(`unrecognized output type "${this.returnType}"`);t="float kernelResult"}const e=[],r=this.subKernels;if(null!==r){e.push(t,"layout(location = 0) out vec4 data0");for(let t=0;t<r.length;t++)e.push(`float subKernelResult_${r[t].name} = 0.0`,`layout(location = ${t+1}) out vec4 data${t+1}`)}else e.push("out vec4 data0",t);return a.linesToString(e)+this.translatedSource}getMainResultGraphical(){return a.linesToString(["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0 = actualColor"])}getMainResultPackedPixels(){switch(this.returnType){case"LiteralInteger":case"Number":case"Integer":case"Float":return a.linesToString(this.getMainResultKernelPackedPixels())+a.linesToString(this.getMainResultSubKernelPackedPixels());default:throw new Error(`packed output only usable with Numbers, "${this.returnType}" specified`)}}getMainResultKernelPackedPixels(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0 = encode32(kernelResult)"]}getMainResultSubKernelPackedPixels(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;e++)t.push(`  data${e+1} = encode32(subKernelResult_${this.subKernels[e].name})`);return t}getMainResultMemoryOptimizedFloats(){const t=["  index *= 4"];switch(this.returnType){case"Number":case"Integer":case"Float":const e=["r","g","b","a"];for(let r=0;r<e.length;r++){const n=e[r];this.getMainResultKernelMemoryOptimizedFloats(t,n),this.getMainResultSubKernelMemoryOptimizedFloats(t,n),r+1<e.length&&t.push("  index += 1")}break;default:throw new Error(`optimized output only usable with Numbers, ${this.returnType} specified`)}return a.linesToString(t)}getMainResultKernelMemoryOptimizedFloats(t,e){t.push("  threadId = indexTo3D(index, uOutputDim)","  kernel()",`  data0.${e} = kernelResult`)}getMainResultSubKernelMemoryOptimizedFloats(t,e){if(!this.subKernels)return t;for(let r=0;r<this.subKernels.length;r++)t.push(`  data${r+1}.${e} = subKernelResult_${this.subKernels[r].name}`)}getMainResultKernelNumberTexture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0[0] = kernelResult"]}getMainResultSubKernelNumberTexture(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;++e)t.push(`  data${e+1}[0] = subKernelResult_${this.subKernels[e].name}`);return t}getMainResultKernelArray2Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0[0] = kernelResult[0]","  data0[1] = kernelResult[1]"]}getMainResultSubKernelArray2Texture(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;++e)t.push(`  data${e+1}[0] = subKernelResult_${this.subKernels[e].name}[0]`,`  data${e+1}[1] = subKernelResult_${this.subKernels[e].name}[1]`);return t}getMainResultKernelArray3Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0[0] = kernelResult[0]","  data0[1] = kernelResult[1]","  data0[2] = kernelResult[2]"]}getMainResultSubKernelArray3Texture(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;++e)t.push(`  data${e+1}[0] = subKernelResult_${this.subKernels[e].name}[0]`,`  data${e+1}[1] = subKernelResult_${this.subKernels[e].name}[1]`,`  data${e+1}[2] = subKernelResult_${this.subKernels[e].name}[2]`);return t}getMainResultKernelArray4Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0 = kernelResult"]}getMainResultSubKernelArray4Texture(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;++e)t.push(`  data${e+1} = subKernelResult_${this.subKernels[e].name}`);return t}getFragmentShader(t){return null!==this.compiledFragmentShader?this.compiledFragmentShader:this.compiledFragmentShader=this.replaceArtifacts(this.constructor.fragmentShader,this._getFragShaderArtifactMap(t))}getVertexShader(t){return null!==this.compiledVertexShader?this.compiledVertexShader:this.compiledVertexShader=this.constructor.vertexShader}destroyExtensions(){this.extensions.EXT_color_buffer_float=null,this.extensions.OES_texture_float_linear=null}toJSON(){const t=super.toJSON();return t.functionNodes=i.fromKernel(this,s).toJSON(),t}}}},function(t,e,r){const{WebGLFunctionNode:n}=r(13);t.exports={WebGL2FunctionNode:class extends n{astIdentifierExpression(t,e){if("Identifier"!==t.type)throw this.astErrorOutput("IdentifierExpression - not an Identifier",t);const r=this.getType(t);if("Infinity"===t.name)e.push("intBitsToFloat(2139095039)");else if("Boolean"===r)this.argumentNames.indexOf(t.name)>-1?e.push(`bool(user_${t.name})`):e.push(`user_${t.name}`);else{const r=this.getKernelArgumentName(t.name);r?e.push(`user_${r}`):e.push(`user_${t.name}`)}return e}}}},function(t,e,r){"use strict";r.r(e);var n=r(0),s=Object(n.default)(function(t,e,r){let n=-1;const s=r.length;let i=e;for(;++n<s;)i=t(i,r[n],n,r);return i}),i=r(8),a=Object(n.default)(function(t,e,r){const n=Object(i.a)(r);let s=-1;const a=n.length;let o=Object(e);for(;++s<a;)o=t(o,r[n[s]],n[s],r);return o}),o=r(3);e.default=Object(n.default)(function(t,e,r){return{Object:a,Array:s}[Object(o.a)(r)](t,e,r)})},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=r(22),s=m(r(0)),i=m(r(7)),a=m(r(20)),o=m(r(43)),u=m(r(35)),h=m(r(36)),l=m(r(37)),c=m(r(39)),p=m(r(40)),f=m(r(41)),d=m(r(42));function m(t){return t&&t.__esModule?t:{default:t}}var g=function(t){this.__value=t,this.gpu=new n.GPU};g.of=function(t){return t instanceof g?t:this instanceof g?(this.__value=t,this):new g(t)},g.prototype.type="Matrix",g.prototype.precision=4,g.prototype.setPrecision=function(t){this.precision=t},g.prototype.isSymmetric=function(){var t=this.__value,e=g.transpose(this).__value;return(0,o.default)(t,e)},g.prototype.isSquare=function(){return(0,o.default)(this.getCols(),this.getRows())},g.prototype.isOrthogonal=function(){var t=this.dot(this.transpose()),e=this.identity();return(0,o.default)(t,e)},g.prototype.getCols=function(){return this.__value[0].length},g.prototype.equals=function(t){return(0,o.default)(this.__value,t.__value||t)},g.prototype.getRows=function(){return this.__value.length},g.prototype.getShape=function(){return[this.getRows(),this.getCols()]},g.prototype.map=function(t){return g.of((0,i.default)(t)(this.__value))},g.map=(0,s.default)(function(t,e){return g.of(e).map(t)}),g.prototype.gpumap=function(t){var e=(0,d.default)(this.gpu,t,this.__value);return g.of(e)},g.gpumap=(0,s.default)(function(t,e){return g.of(e).gpumap(t)}),g.prototype.fold=function(t){return g.of((0,a.default)(t,[])(this.__value))},g.fold=(0,s.default)(function(t,e){return g.of(e).fold(t)}),g.prototype.ap=function(t){return g.of(t).map(this.__value)},g.ap=(0,s.default)(function(t,e){return g.of(t).ap(e)}),g.prototype.concat=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:u.default;return g.of(this).map(e(t))},g.concat=(0,s.default)(function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u.default;return g.of(t).map(r(e))}),g.prototype.empty=function(){return g.of(this).map(h.default)},g.empty=(0,s.default)(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(0,f.default)(t,e);return g.of(r).map(h.default)}),g.prototype.identity=function(){return g.of(c.default).ap(this)},g.identity=function(t,e){var r=(0,f.default)(t,e);return g.of(c.default).ap(r)},g.prototype.combine=function(t){return g.of(this).concat(g.of(t),u.default)},g.combine=function(t,e){return g.of(t).concat(g.of(e),u.default)},g.prototype.dot=function(t){return g.of(this).concat(g.of(t),(0,l.default)(this.precision))},g.dot=function(t,e){return g.of(t).dot(g.of(e))},g.prototype.fill=function(t){return g.of(this).map((0,i.default)(function(e){return t(e)}))},g.prototype.zeros=function(){return g.of(this).fill(function(t){return 0})},g.zeros=function(t,e){var r=(0,f.default)(t,e);return g.of(r).fill(function(t){return 0})},g.prototype.ones=function(){return g.of(this).fill(function(t){return 1})},g.ones=function(t,e){var r=(0,f.default)(t,e);return g.of(r).fill(function(t){return 1})},g.prototype.random=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return 2*Math.random()-1};return g.of(this).fill(t)},g.random=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return 2*Math.random()-1},e=arguments[1],r=arguments[2],n=(0,f.default)(e,r);return g.of(n).fill(t)},g.prototype.toArray=function(){return this.__value.map(function(t){return t.map(function(t){return t})})},g.prototype.clone=function(){return g.fromArray(this.__value)},g.fromArray=function(t){return g.of((0,i.default)(function(t){return(0,i.default)(function(t){return t})(t)})(t))},g.prototype.transpose=function(){return g.of((0,a.default)(p.default,[],this.__value))},g.transpose=function(t){return g.of(t).transpose()},g.prototype.add=function(t){if(t instanceof g){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot add");return this.map(function(e,r){return(0,i.default)(function(e,n){return e+t.__value[r][n]})(e)})}return this.map((0,i.default)(function(e){return e+t}))},g.prototype.subtract=function(t){if(t instanceof g){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot subtract");return this.map(function(e,r){return(0,i.default)(function(e,n){return e-t.__value[r][n]})(e)})}return this.map((0,i.default)(function(e){return e-t}))},g.prototype.multiply=function(t){if(t instanceof g){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw console.log("Use static method 'dot' to do matrix multiplication"),new Error("Matrices do not match, cannot create hadamard product");return this.map(function(e,r){return(0,i.default)(function(e,n){return e*t.__value[r][n]})(e)})}return this.map((0,i.default)(function(e){return e*t}))},g.prototype.additiveinverse=function(){return g.of(this).multiply(-1)},g.prototype.hadamard=function(t){return g.of(this).multiply(t)},g.prototype.lu=function(){for(var t=this.getRows(),e=this.clone(),r=this.zeros(),n=this.zeros(),s=0;s<t;++s){if(Math.abs(e.__value[s][s])<1e-6)throw Error("Cannot proceed without a row exchange");r.__value[s][s]=1;for(var i=s+1;i<t;++i){r.__value[i][s]=e.__value[i][s]/e.__value[s][s];for(var a=s+1;a<t;++a)e.__value[i][a]=e.__value[i][a]-r.__value[i][s]*e.__value[s][a]}for(var o=s;o<t;++o)n.__value[s][o]=e.__value[s][o]}return[r,n]},g.prototype.rref=function(){for(var t=0,e=this.clone(),r=0;r<this.getRows();++r){if(this.getCols()<=t)return e;for(var n=r;0===e.__value[n][t];)if(++n,this.getRows()===n&&(n=r,++t,this.getCols()===t))return e;var s=e.__value[n];e.__value[n]=e.__value[r],e.__value[r]=s;for(var i=e.__value[r][t],a=0;a<this.getCols();++a)e.__value[r][a]/=i;for(var o=0;o<this.getRows();++o)if(o!==r){i=e.__value[o][t];for(var u=0;u<this.getCols();++u)e.__value[o][u]-=i*e.__value[r][u]}t++}return e},g.prototype.solve=function(t){for(var e=this.clone().lu(),r=e[0],n=e[1],s=this.getRows(),i=0,a=[],o=[],u=0;u<s;++u){for(var h=0;h<u;++h)i+=r.__value[u][h]*a[h];a[u]=t[u]-i,i=0}for(var l=s-1;l>-1;--l){for(var c=0,p=l+1;p<s;++p)c+=n.__value[l][p]*o[p];o[l]=(a[l]-c)/n.__value[l][l]}return o},g.prototype.inverse=function(){var t=this.clone(),e=t.identity(),r=t.concat(e).rref().__value.reduce(function(t,e,r){var n=e.length/2;return t.push(e.slice(n,e.length)),t},[]);return g.of(r)},g.prototype.rank=function(){for(var t=this.rref(),e=0,r=0;r<t.getCols();++r)e+=t.__value[r][r];return e},g.prototype.dimension=function(){return this.rank()},g.prototype.diag=function(){return(0,a.default)(function(t,e,r){return t.concat(e[r])})([])(this.__value)},g.diag=function(t){return g.of(t).diag()},g.prototype.diagproduct=function(){return(0,a.default)(function(t,e,r){return t*=e[r]})(1)(this.__value)},g.diagproduct=function(t){return g.of(t).diagproduct()},g.prototype.sum=function(){return(0,a.default)(function(t,e){return t+=(0,a.default)(function(t,e){return t+e})(0)(e)})(0)(this.__value)},g.sum=function(t){return g.of(t).sum()},g.prototype.kronecker=function(t){for(var e=this.getRows(),r=this.getCols(),n=t.getRows(),s=t.getCols(),i=this.__value,a=t.__value,o=(0,f.default)(e*n,r*s),u=0;u<e;u++)for(var h=0;h<r;h++)for(var l=0;l<n;l++)for(var c=0;c<s;c++)o[n*u+l][s*h+c]=i[u][h]*a[l][c];return g.of(o)},g.kronecker=function(t,e){return g.of(t).kronecker(e)};var x=g;e.default=x,t.exports=e.default},function(t,e,r){const{GPU:n}=r(23),{alias:s}=r(34),{utils:i}=r(2),{Input:a,input:o}=r(9),{Texture:u}=r(4),{FunctionBuilder:h}=r(5),{FunctionNode:l}=r(11),{CPUFunctionNode:c}=r(15),{CPUKernel:p}=r(14),{HeadlessGLKernel:f}=r(16),{WebGLFunctionNode:d}=r(13),{WebGLKernel:m}=r(6),{WebGL2FunctionNode:g}=r(19),{WebGL2Kernel:x}=r(18),{GLKernel:y}=r(17),{Kernel:T}=r(10);t.exports={alias:s,CPUFunctionNode:c,CPUKernel:p,GPU:n,FunctionBuilder:h,FunctionNode:l,HeadlessGLKernel:f,Input:a,input:o,Texture:u,utils:i,WebGL2FunctionNode:g,WebGL2Kernel:x,WebGLFunctionNode:d,WebGLKernel:m,GLKernel:y,Kernel:T}},function(t,e,r){const n=r(24),{utils:s}=r(2),{CPUKernel:i}=r(14),{HeadlessGLKernel:a}=r(16),{WebGL2Kernel:o}=r(18),{WebGLKernel:u}=r(6),{kernelRunShortcut:h}=r(12),l=[a,o,u],c=["gpu","cpu"],p={headlessgl:a,webgl2:o,webgl:u};let f=!0;function d(t){if(!t)return;const e=Object.assign({},t);return t.hasOwnProperty("floatOutput")&&(s.warnDeprecated("setting","floatOutput","precision"),e.precision=t.floatOutput?"single":"unsigned"),t.hasOwnProperty("outputToTexture")&&(s.warnDeprecated("setting","outputToTexture","pipeline"),e.pipeline=Boolean(t.outputToTexture)),t.hasOwnProperty("outputImmutable")&&(s.warnDeprecated("setting","outputImmutable","immutable"),e.immutable=Boolean(t.outputImmutable)),t.hasOwnProperty("floatTextures")&&(s.warnDeprecated("setting","floatTextures","optimizeFloatMemory"),e.optimizeFloatMemory=Boolean(t.floatTextures)),e}t.exports={GPU:class{static disableValidation(){f=!1}static enableValidation(){f=!0}static get isGPUSupported(){return l.some(t=>t.isSupported)}static get isKernelMapSupported(){return l.some(t=>t.isSupported&&t.features.kernelMap)}static get isOffscreenCanvasSupported(){return"undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas||"undefined"!=typeof importScripts}static get isWebGLSupported(){return u.isSupported}static get isWebGL2Supported(){return o.isSupported}static get isHeadlessGLSupported(){return a.isSupported}static get isCanvasSupported(){return"undefined"!=typeof HTMLCanvasElement}static get isGPUHTMLImageArraySupported(){return o.isSupported}static get isSinglePrecisionSupported(){return l.some(t=>t.isSupported&&t.features.isFloatRead&&t.features.isTextureFloat)}constructor(t){if(t=t||{},this.canvas=t.canvas||null,this.context=t.context||null,this.mode=t.mode,"dev"!==this.mode){if(this.Kernel=null,this.kernels=[],this.functions=[],this.nativeFunctions=[],this.chooseKernel(),t.functions)for(let e=0;e<t.functions.length;e++)this.addFunction(t.functions[e]);if(t.nativeFunctions)for(const e in t.nativeFunctions)this.addNativeFunction(e,t.nativeFunctions[e])}}chooseKernel(){if(this.Kernel)return;let t=null;if(this.context){for(let e=0;e<l.length;e++){const r=l[e];if(r.isContextMatch(this.context)){if(!r.isSupported)throw new Error(`Kernel type ${r.name} not supported`);t=r;break}}if(null===t)throw new Error("unknown Context")}else if(this.mode){if(this.mode in p)p[this.mode].isSupported&&(t=p[this.mode]);else if("gpu"===this.mode){for(let e=0;e<l.length;e++)if(l[e].isSupported){t=l[e];break}}else"cpu"===this.mode&&(t=i);if(!t)throw new Error(`A requested mode of "${this.mode}" and is not supported`)}else{for(let e=0;e<l.length;e++)if(l[e].isSupported){t=l[e];break}t||(t=i)}this.mode||(this.mode=t.mode),this.Kernel=t}createKernel(t,e){if(void 0===t)throw new Error("Missing source parameter");if("object"!=typeof t&&!s.isFunction(t)&&"string"!=typeof t)throw new Error("source parameter not a function");if("dev"===this.mode)return n(t,d(e));t="function"==typeof t?t.toString():t;const r=Object.assign({context:this.context,canvas:this.canvas,functions:this.functions,nativeFunctions:this.nativeFunctions,gpu:this,validate:f,onRequestFallback:e=>{const n=new i(t,r);return n.apply(n,e)}},d(e)||{}),a=h(new this.Kernel(t,r));return this.canvas||(this.canvas=a.canvas),this.context||(this.context=a.context),this.kernels.push(a),a}createKernelMap(){let t,e;if("function"==typeof arguments[arguments.length-2]?(t=arguments[arguments.length-2],e=arguments[arguments.length-1]):t=arguments[arguments.length-1],(!this.Kernel.isSupported||!this.Kernel.features.kernelMap)&&this.mode&&c.indexOf(this.mode)<0)throw new Error(`kernelMap not supported on ${this.Kernel.name}`);const r=this.createKernel(t,d(e));if(Array.isArray(arguments[0])){const t=arguments[0];for(let e=0;e<t.length;e++){const n=t[e].toString(),i=s.getFunctionNameFromString(n);r.addSubKernel({name:i,source:n,property:e})}}else{const t=arguments[0];for(let e in t){if(!t.hasOwnProperty(e))continue;const n=t[e].toString(),i=s.getFunctionNameFromString(n);r.addSubKernel({name:i||e,source:n,property:e})}}return r}combineKernels(){const t=arguments[0],e=arguments[arguments.length-1];if("cpu"===t.kernel.constructor.mode)return e;const r=arguments[0].canvas,n=arguments[0].context,s=arguments.length-1;for(let t=0;t<s;t++)arguments[t].setCanvas(r).setContext(n).setPipeline(!0);return function(){const t=e.apply(this,arguments);return t.toArray?t.toArray():t}}addFunction(t,e){return this.functions.push(s.functionToIFunction(t,e)),this}addNativeFunction(t,e,r){if(this.kernels.length>0)throw new Error('Cannot call "addNativeFunction" after "createKernels" has been called.');r=r||{};const{argumentTypes:n,argumentNames:s}=this.Kernel.nativeFunctionArguments(e)||{};return this.nativeFunctions.push({name:t,source:e,settings:r,argumentTypes:n,argumentNames:s,returnType:r.returnType||this.Kernel.nativeFunctionReturnType(e)}),this}destroy(){setTimeout(()=>{for(let t=0;t<this.kernels.length;t++)this.kernels[t].destroy(!0);this.kernels[0].kernel.constructor.destroyContext(this.context)},0)}},kernelOrder:l,kernelTypes:c}},function(t,e,r){"use strict";t.exports=function(t,e){let r=null;r=e.output.length?3===e.output.length?{x:e.output[0],y:e.output[1],z:e.output[2]}:2===e.output.length?{x:e.output[0],y:e.output[1]}:{x:e.output[0]}:e.output;const n={_fn:t,constants:e.constants,output:r,thread:{x:0,y:0,z:0}};return r.z?function(){const t=[];for(let e=0;e<this.output.z;e++){const r=[];for(let t=0;t<this.output.y;t++){const n=[];for(let r=0;r<this.output.x;r++)this.thread.x=r,this.thread.y=t,this.thread.z=e,n.push(this._fn.apply(this,arguments));r.push(n)}t.push(r)}return t}.bind(n):r.y?function(){const t=[];for(let e=0;e<this.output.y;e++){const r=[];for(let t=0;t<this.output.x;t++)this.thread.x=t,this.thread.y=e,this.thread.z=0,r.push(this._fn.apply(this,arguments));t.push(r)}return t}.bind(n):function(){const t=[];for(let e=0;e<this.output.x;e++)this.thread.x=e,this.thread.y=0,this.thread.z=0,t.push(this._fn.apply(this,arguments));return t}.bind(n)}},function(t,e,r){"use strict";r.r(e),r.d(e,"version",function(){return kt}),r.d(e,"parse",function(){return Ft}),r.d(e,"parseExpressionAt",function(){return It}),r.d(e,"tokenizer",function(){return Nt}),r.d(e,"Parser",function(){return X}),r.d(e,"defaultOptions",function(){return L}),r.d(e,"Position",function(){return C}),r.d(e,"SourceLocation",function(){return O}),r.d(e,"getLineInfo",function(){return P}),r.d(e,"Node",function(){return ot}),r.d(e,"TokenType",function(){return g}),r.d(e,"tokTypes",function(){return b}),r.d(e,"keywordTypes",function(){return _}),r.d(e,"TokContext",function(){return lt}),r.d(e,"tokContexts",function(){return ct}),r.d(e,"isIdentifierChar",function(){return m}),r.d(e,"isIdentifierStart",function(){return d}),r.d(e,"Token",function(){return At}),r.d(e,"isNewLine",function(){return A}),r.d(e,"lineBreak",function(){return v}),r.d(e,"lineBreakG",function(){return S}),r.d(e,"nonASCIIwhitespace",function(){return R});var n={3:"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",5:"class enum extends super const export import",6:"enum",strict:"implements interface let package private protected public static yield",strictBind:"eval arguments"},s="break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this",i={5:s,6:s+" const class extends export import super"},a=/^in(stanceof)?$/,o="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿯ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞹꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",u="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿",h=new RegExp("["+o+"]"),l=new RegExp("["+o+u+"]");o=u=null;var c=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,190,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,26,230,43,117,63,32,0,257,0,11,39,8,0,22,0,12,39,3,3,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,68,12,0,67,12,65,1,31,6129,15,754,9486,286,82,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541],p=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,280,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239];function f(t,e){for(var r=65536,n=0;n<e.length;n+=2){if((r+=e[n])>t)return!1;if((r+=e[n+1])>=t)return!0}}function d(t,e){return t<65?36===t:t<91||(t<97?95===t:t<123||(t<=65535?t>=170&&h.test(String.fromCharCode(t)):!1!==e&&f(t,c)))}function m(t,e){return t<48?36===t:t<58||!(t<65)&&(t<91||(t<97?95===t:t<123||(t<=65535?t>=170&&l.test(String.fromCharCode(t)):!1!==e&&(f(t,c)||f(t,p)))))}var g=function(t,e){void 0===e&&(e={}),this.label=t,this.keyword=e.keyword,this.beforeExpr=!!e.beforeExpr,this.startsExpr=!!e.startsExpr,this.isLoop=!!e.isLoop,this.isAssign=!!e.isAssign,this.prefix=!!e.prefix,this.postfix=!!e.postfix,this.binop=e.binop||null,this.updateContext=null};function x(t,e){return new g(t,{beforeExpr:!0,binop:e})}var y={beforeExpr:!0},T={startsExpr:!0},_={};function E(t,e){return void 0===e&&(e={}),e.keyword=t,_[t]=new g(t,e)}var b={num:new g("num",T),regexp:new g("regexp",T),string:new g("string",T),name:new g("name",T),eof:new g("eof"),bracketL:new g("[",{beforeExpr:!0,startsExpr:!0}),bracketR:new g("]"),braceL:new g("{",{beforeExpr:!0,startsExpr:!0}),braceR:new g("}"),parenL:new g("(",{beforeExpr:!0,startsExpr:!0}),parenR:new g(")"),comma:new g(",",y),semi:new g(";",y),colon:new g(":",y),dot:new g("."),question:new g("?",y),arrow:new g("=>",y),template:new g("template"),invalidTemplate:new g("invalidTemplate"),ellipsis:new g("...",y),backQuote:new g("`",T),dollarBraceL:new g("${",{beforeExpr:!0,startsExpr:!0}),eq:new g("=",{beforeExpr:!0,isAssign:!0}),assign:new g("_=",{beforeExpr:!0,isAssign:!0}),incDec:new g("++/--",{prefix:!0,postfix:!0,startsExpr:!0}),prefix:new g("!/~",{beforeExpr:!0,prefix:!0,startsExpr:!0}),logicalOR:x("||",1),logicalAND:x("&&",2),bitwiseOR:x("|",3),bitwiseXOR:x("^",4),bitwiseAND:x("&",5),equality:x("==/!=/===/!==",6),relational:x("</>/<=/>=",7),bitShift:x("<</>>/>>>",8),plusMin:new g("+/-",{beforeExpr:!0,binop:9,prefix:!0,startsExpr:!0}),modulo:x("%",10),star:x("*",10),slash:x("/",10),starstar:new g("**",{beforeExpr:!0}),_break:E("break"),_case:E("case",y),_catch:E("catch"),_continue:E("continue"),_debugger:E("debugger"),_default:E("default",y),_do:E("do",{isLoop:!0,beforeExpr:!0}),_else:E("else",y),_finally:E("finally"),_for:E("for",{isLoop:!0}),_function:E("function",T),_if:E("if"),_return:E("return",y),_switch:E("switch"),_throw:E("throw",y),_try:E("try"),_var:E("var"),_const:E("const"),_while:E("while",{isLoop:!0}),_with:E("with"),_new:E("new",{beforeExpr:!0,startsExpr:!0}),_this:E("this",T),_super:E("super",T),_class:E("class",T),_extends:E("extends",y),_export:E("export"),_import:E("import"),_null:E("null",T),_true:E("true",T),_false:E("false",T),_in:E("in",{beforeExpr:!0,binop:7}),_instanceof:E("instanceof",{beforeExpr:!0,binop:7}),_typeof:E("typeof",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_void:E("void",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_delete:E("delete",{beforeExpr:!0,prefix:!0,startsExpr:!0})},v=/\r\n?|\n|\u2028|\u2029/,S=new RegExp(v.source,"g");function A(t,e){return 10===t||13===t||!e&&(8232===t||8233===t)}var R=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/,w=/(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,D=Object.prototype,k=D.hasOwnProperty,F=D.toString;function I(t,e){return k.call(t,e)}var N=Array.isArray||function(t){return"[object Array]"===F.call(t)},C=function(t,e){this.line=t,this.column=e};C.prototype.offset=function(t){return new C(this.line,this.column+t)};var O=function(t,e,r){this.start=e,this.end=r,null!==t.sourceFile&&(this.source=t.sourceFile)};function P(t,e){for(var r=1,n=0;;){S.lastIndex=n;var s=S.exec(t);if(!(s&&s.index<e))return new C(r,e-n);++r,n=s.index+s[0].length}}var L={ecmaVersion:9,sourceType:"script",onInsertedSemicolon:null,onTrailingComma:null,allowReserved:null,allowReturnOutsideFunction:!1,allowImportExportEverywhere:!1,allowAwaitOutsideFunction:!1,allowHashBang:!1,locations:!1,onToken:null,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null,preserveParens:!1};function U(t){var e={};for(var r in L)e[r]=t&&I(t,r)?t[r]:L[r];if(e.ecmaVersion>=2015&&(e.ecmaVersion-=2009),null==e.allowReserved&&(e.allowReserved=e.ecmaVersion<5),N(e.onToken)){var n=e.onToken;e.onToken=function(t){return n.push(t)}}return N(e.onComment)&&(e.onComment=function(t,e){return function(r,n,s,i,a,o){var u={type:r?"Block":"Line",value:n,start:s,end:i};t.locations&&(u.loc=new O(this,a,o)),t.ranges&&(u.range=[s,i]),e.push(u)}}(e,e.onComment)),e}var M=2,$=1|M,z=4,G=8;function B(t,e){return M|(t?z:0)|(e?G:0)}function K(t){return new RegExp("^(?:"+t.replace(/ /g,"|")+")$")}var X=function(t,e,r){this.options=t=U(t),this.sourceFile=t.sourceFile,this.keywords=K(i[t.ecmaVersion>=6?6:5]);var s="";if(!t.allowReserved){for(var a=t.ecmaVersion;!(s=n[a]);a--);"module"===t.sourceType&&(s+=" await")}this.reservedWords=K(s);var o=(s?s+" ":"")+n.strict;this.reservedWordsStrict=K(o),this.reservedWordsStrictBind=K(o+" "+n.strictBind),this.input=String(e),this.containsEsc=!1,r?(this.pos=r,this.lineStart=this.input.lastIndexOf("\n",r-1)+1,this.curLine=this.input.slice(0,this.lineStart).split(v).length):(this.pos=this.lineStart=0,this.curLine=1),this.type=b.eof,this.value=null,this.start=this.end=this.pos,this.startLoc=this.endLoc=this.curPosition(),this.lastTokEndLoc=this.lastTokStartLoc=null,this.lastTokStart=this.lastTokEnd=this.pos,this.context=this.initialContext(),this.exprAllowed=!0,this.inModule="module"===t.sourceType,this.strict=this.inModule||this.strictDirective(this.pos),this.potentialArrowAt=-1,this.yieldPos=this.awaitPos=0,this.labels=[],0===this.pos&&t.allowHashBang&&"#!"===this.input.slice(0,2)&&this.skipLineComment(2),this.scopeStack=[],this.enterScope(1),this.regexpState=null},V={inFunction:{configurable:!0},inGenerator:{configurable:!0},inAsync:{configurable:!0},allowSuper:{configurable:!0},allowDirectSuper:{configurable:!0},treatFunctionsAsVar:{configurable:!0}};X.prototype.parse=function(){var t=this.options.program||this.startNode();return this.nextToken(),this.parseTopLevel(t)},V.inFunction.get=function(){return(this.currentVarScope().flags&M)>0},V.inGenerator.get=function(){return(this.currentVarScope().flags&G)>0},V.inAsync.get=function(){return(this.currentVarScope().flags&z)>0},V.allowSuper.get=function(){return(64&this.currentThisScope().flags)>0},V.allowDirectSuper.get=function(){return(128&this.currentThisScope().flags)>0},V.treatFunctionsAsVar.get=function(){return this.treatFunctionsAsVarInScope(this.currentScope())},X.prototype.inNonArrowFunction=function(){return(this.currentThisScope().flags&M)>0},X.extend=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];for(var r=this,n=0;n<t.length;n++)r=t[n](r);return r},X.parse=function(t,e){return new this(e,t).parse()},X.parseExpressionAt=function(t,e,r){var n=new this(r,t,e);return n.nextToken(),n.parseExpression()},X.tokenizer=function(t,e){return new this(e,t)},Object.defineProperties(X.prototype,V);var j=X.prototype,W=/^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)")/;function H(){this.shorthandAssign=this.trailingComma=this.parenthesizedAssign=this.parenthesizedBind=this.doubleProto=-1}j.strictDirective=function(t){for(;;){w.lastIndex=t,t+=w.exec(this.input)[0].length;var e=W.exec(this.input.slice(t));if(!e)return!1;if("use strict"===(e[1]||e[2]))return!0;t+=e[0].length,w.lastIndex=t,t+=w.exec(this.input)[0].length,";"===this.input[t]&&t++}},j.eat=function(t){return this.type===t&&(this.next(),!0)},j.isContextual=function(t){return this.type===b.name&&this.value===t&&!this.containsEsc},j.eatContextual=function(t){return!!this.isContextual(t)&&(this.next(),!0)},j.expectContextual=function(t){this.eatContextual(t)||this.unexpected()},j.canInsertSemicolon=function(){return this.type===b.eof||this.type===b.braceR||v.test(this.input.slice(this.lastTokEnd,this.start))},j.insertSemicolon=function(){if(this.canInsertSemicolon())return this.options.onInsertedSemicolon&&this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc),!0},j.semicolon=function(){this.eat(b.semi)||this.insertSemicolon()||this.unexpected()},j.afterTrailingComma=function(t,e){if(this.type===t)return this.options.onTrailingComma&&this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc),e||this.next(),!0},j.expect=function(t){this.eat(t)||this.unexpected()},j.unexpected=function(t){this.raise(null!=t?t:this.start,"Unexpected token")},j.checkPatternErrors=function(t,e){if(t){t.trailingComma>-1&&this.raiseRecoverable(t.trailingComma,"Comma is not permitted after the rest element");var r=e?t.parenthesizedAssign:t.parenthesizedBind;r>-1&&this.raiseRecoverable(r,"Parenthesized pattern")}},j.checkExpressionErrors=function(t,e){if(!t)return!1;var r=t.shorthandAssign,n=t.doubleProto;if(!e)return r>=0||n>=0;r>=0&&this.raise(r,"Shorthand property assignments are valid only in destructuring patterns"),n>=0&&this.raiseRecoverable(n,"Redefinition of __proto__ property")},j.checkYieldAwaitInDefaultParams=function(){this.yieldPos&&(!this.awaitPos||this.yieldPos<this.awaitPos)&&this.raise(this.yieldPos,"Yield expression cannot be a default value"),this.awaitPos&&this.raise(this.awaitPos,"Await expression cannot be a default value")},j.isSimpleAssignTarget=function(t){return"ParenthesizedExpression"===t.type?this.isSimpleAssignTarget(t.expression):"Identifier"===t.type||"MemberExpression"===t.type};var q=X.prototype;q.parseTopLevel=function(t){var e={};for(t.body||(t.body=[]);this.type!==b.eof;){var r=this.parseStatement(null,!0,e);t.body.push(r)}return this.adaptDirectivePrologue(t.body),this.next(),this.options.ecmaVersion>=6&&(t.sourceType=this.options.sourceType),this.finishNode(t,"Program")};var Y={kind:"loop"},J={kind:"switch"};q.isLet=function(t){if(this.options.ecmaVersion<6||!this.isContextual("let"))return!1;w.lastIndex=this.pos;var e=w.exec(this.input),r=this.pos+e[0].length,n=this.input.charCodeAt(r);if(91===n)return!0;if(t)return!1;if(123===n)return!0;if(d(n,!0)){for(var s=r+1;m(this.input.charCodeAt(s),!0);)++s;var i=this.input.slice(r,s);if(!a.test(i))return!0}return!1},q.isAsyncFunction=function(){if(this.options.ecmaVersion<8||!this.isContextual("async"))return!1;w.lastIndex=this.pos;var t=w.exec(this.input),e=this.pos+t[0].length;return!(v.test(this.input.slice(this.pos,e))||"function"!==this.input.slice(e,e+8)||e+8!==this.input.length&&m(this.input.charAt(e+8)))},q.parseStatement=function(t,e,r){var n,s=this.type,i=this.startNode();switch(this.isLet(t)&&(s=b._var,n="let"),s){case b._break:case b._continue:return this.parseBreakContinueStatement(i,s.keyword);case b._debugger:return this.parseDebuggerStatement(i);case b._do:return this.parseDoStatement(i);case b._for:return this.parseForStatement(i);case b._function:return t&&(this.strict||"if"!==t&&"label"!==t)&&this.options.ecmaVersion>=6&&this.unexpected(),this.parseFunctionStatement(i,!1,!t);case b._class:return t&&this.unexpected(),this.parseClass(i,!0);case b._if:return this.parseIfStatement(i);case b._return:return this.parseReturnStatement(i);case b._switch:return this.parseSwitchStatement(i);case b._throw:return this.parseThrowStatement(i);case b._try:return this.parseTryStatement(i);case b._const:case b._var:return n=n||this.value,t&&"var"!==n&&this.unexpected(),this.parseVarStatement(i,n);case b._while:return this.parseWhileStatement(i);case b._with:return this.parseWithStatement(i);case b.braceL:return this.parseBlock(!0,i);case b.semi:return this.parseEmptyStatement(i);case b._export:case b._import:return this.options.allowImportExportEverywhere||(e||this.raise(this.start,"'import' and 'export' may only appear at the top level"),this.inModule||this.raise(this.start,"'import' and 'export' may appear only with 'sourceType: module'")),s===b._import?this.parseImport(i):this.parseExport(i,r);default:if(this.isAsyncFunction())return t&&this.unexpected(),this.next(),this.parseFunctionStatement(i,!0,!t);var a=this.value,o=this.parseExpression();return s===b.name&&"Identifier"===o.type&&this.eat(b.colon)?this.parseLabeledStatement(i,a,o,t):this.parseExpressionStatement(i,o)}},q.parseBreakContinueStatement=function(t,e){var r="break"===e;this.next(),this.eat(b.semi)||this.insertSemicolon()?t.label=null:this.type!==b.name?this.unexpected():(t.label=this.parseIdent(),this.semicolon());for(var n=0;n<this.labels.length;++n){var s=this.labels[n];if(null==t.label||s.name===t.label.name){if(null!=s.kind&&(r||"loop"===s.kind))break;if(t.label&&r)break}}return n===this.labels.length&&this.raise(t.start,"Unsyntactic "+e),this.finishNode(t,r?"BreakStatement":"ContinueStatement")},q.parseDebuggerStatement=function(t){return this.next(),this.semicolon(),this.finishNode(t,"DebuggerStatement")},q.parseDoStatement=function(t){return this.next(),this.labels.push(Y),t.body=this.parseStatement("do"),this.labels.pop(),this.expect(b._while),t.test=this.parseParenExpression(),this.options.ecmaVersion>=6?this.eat(b.semi):this.semicolon(),this.finishNode(t,"DoWhileStatement")},q.parseForStatement=function(t){this.next();var e=this.options.ecmaVersion>=9&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction)&&this.eatContextual("await")?this.lastTokStart:-1;if(this.labels.push(Y),this.enterScope(0),this.expect(b.parenL),this.type===b.semi)return e>-1&&this.unexpected(e),this.parseFor(t,null);var r=this.isLet();if(this.type===b._var||this.type===b._const||r){var n=this.startNode(),s=r?"let":this.value;return this.next(),this.parseVar(n,!0,s),this.finishNode(n,"VariableDeclaration"),!(this.type===b._in||this.options.ecmaVersion>=6&&this.isContextual("of"))||1!==n.declarations.length||"var"!==s&&n.declarations[0].init?(e>-1&&this.unexpected(e),this.parseFor(t,n)):(this.options.ecmaVersion>=9&&(this.type===b._in?e>-1&&this.unexpected(e):t.await=e>-1),this.parseForIn(t,n))}var i=new H,a=this.parseExpression(!0,i);return this.type===b._in||this.options.ecmaVersion>=6&&this.isContextual("of")?(this.options.ecmaVersion>=9&&(this.type===b._in?e>-1&&this.unexpected(e):t.await=e>-1),this.toAssignable(a,!1,i),this.checkLVal(a),this.parseForIn(t,a)):(this.checkExpressionErrors(i,!0),e>-1&&this.unexpected(e),this.parseFor(t,a))},q.parseFunctionStatement=function(t,e,r){return this.next(),this.parseFunction(t,Z|(r?0:tt),!1,e)},q.parseIfStatement=function(t){return this.next(),t.test=this.parseParenExpression(),t.consequent=this.parseStatement("if"),t.alternate=this.eat(b._else)?this.parseStatement("if"):null,this.finishNode(t,"IfStatement")},q.parseReturnStatement=function(t){return this.inFunction||this.options.allowReturnOutsideFunction||this.raise(this.start,"'return' outside of function"),this.next(),this.eat(b.semi)||this.insertSemicolon()?t.argument=null:(t.argument=this.parseExpression(),this.semicolon()),this.finishNode(t,"ReturnStatement")},q.parseSwitchStatement=function(t){var e;this.next(),t.discriminant=this.parseParenExpression(),t.cases=[],this.expect(b.braceL),this.labels.push(J),this.enterScope(0);for(var r=!1;this.type!==b.braceR;)if(this.type===b._case||this.type===b._default){var n=this.type===b._case;e&&this.finishNode(e,"SwitchCase"),t.cases.push(e=this.startNode()),e.consequent=[],this.next(),n?e.test=this.parseExpression():(r&&this.raiseRecoverable(this.lastTokStart,"Multiple default clauses"),r=!0,e.test=null),this.expect(b.colon)}else e||this.unexpected(),e.consequent.push(this.parseStatement(null));return this.exitScope(),e&&this.finishNode(e,"SwitchCase"),this.next(),this.labels.pop(),this.finishNode(t,"SwitchStatement")},q.parseThrowStatement=function(t){return this.next(),v.test(this.input.slice(this.lastTokEnd,this.start))&&this.raise(this.lastTokEnd,"Illegal newline after throw"),t.argument=this.parseExpression(),this.semicolon(),this.finishNode(t,"ThrowStatement")};var Q=[];q.parseTryStatement=function(t){if(this.next(),t.block=this.parseBlock(),t.handler=null,this.type===b._catch){var e=this.startNode();if(this.next(),this.eat(b.parenL)){e.param=this.parseBindingAtom();var r="Identifier"===e.param.type;this.enterScope(r?32:0),this.checkLVal(e.param,r?4:2),this.expect(b.parenR)}else this.options.ecmaVersion<10&&this.unexpected(),e.param=null,this.enterScope(0);e.body=this.parseBlock(!1),this.exitScope(),t.handler=this.finishNode(e,"CatchClause")}return t.finalizer=this.eat(b._finally)?this.parseBlock():null,t.handler||t.finalizer||this.raise(t.start,"Missing catch or finally clause"),this.finishNode(t,"TryStatement")},q.parseVarStatement=function(t,e){return this.next(),this.parseVar(t,!1,e),this.semicolon(),this.finishNode(t,"VariableDeclaration")},q.parseWhileStatement=function(t){return this.next(),t.test=this.parseParenExpression(),this.labels.push(Y),t.body=this.parseStatement("while"),this.labels.pop(),this.finishNode(t,"WhileStatement")},q.parseWithStatement=function(t){return this.strict&&this.raise(this.start,"'with' in strict mode"),this.next(),t.object=this.parseParenExpression(),t.body=this.parseStatement("with"),this.finishNode(t,"WithStatement")},q.parseEmptyStatement=function(t){return this.next(),this.finishNode(t,"EmptyStatement")},q.parseLabeledStatement=function(t,e,r,n){for(var s=0,i=this.labels;s<i.length;s+=1){i[s].name===e&&this.raise(r.start,"Label '"+e+"' is already declared")}for(var a=this.type.isLoop?"loop":this.type===b._switch?"switch":null,o=this.labels.length-1;o>=0;o--){var u=this.labels[o];if(u.statementStart!==t.start)break;u.statementStart=this.start,u.kind=a}return this.labels.push({name:e,kind:a,statementStart:this.start}),t.body=this.parseStatement(n?-1===n.indexOf("label")?n+"label":n:"label"),this.labels.pop(),t.label=r,this.finishNode(t,"LabeledStatement")},q.parseExpressionStatement=function(t,e){return t.expression=e,this.semicolon(),this.finishNode(t,"ExpressionStatement")},q.parseBlock=function(t,e){for(void 0===t&&(t=!0),void 0===e&&(e=this.startNode()),e.body=[],this.expect(b.braceL),t&&this.enterScope(0);!this.eat(b.braceR);){var r=this.parseStatement(null);e.body.push(r)}return t&&this.exitScope(),this.finishNode(e,"BlockStatement")},q.parseFor=function(t,e){return t.init=e,this.expect(b.semi),t.test=this.type===b.semi?null:this.parseExpression(),this.expect(b.semi),t.update=this.type===b.parenR?null:this.parseExpression(),this.expect(b.parenR),t.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(t,"ForStatement")},q.parseForIn=function(t,e){var r=this.type===b._in?"ForInStatement":"ForOfStatement";return this.next(),"ForInStatement"===r&&("AssignmentPattern"===e.type||"VariableDeclaration"===e.type&&null!=e.declarations[0].init&&(this.strict||"Identifier"!==e.declarations[0].id.type))&&this.raise(e.start,"Invalid assignment in for-in loop head"),t.left=e,t.right="ForInStatement"===r?this.parseExpression():this.parseMaybeAssign(),this.expect(b.parenR),t.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(t,r)},q.parseVar=function(t,e,r){for(t.declarations=[],t.kind=r;;){var n=this.startNode();if(this.parseVarId(n,r),this.eat(b.eq)?n.init=this.parseMaybeAssign(e):"const"!==r||this.type===b._in||this.options.ecmaVersion>=6&&this.isContextual("of")?"Identifier"===n.id.type||e&&(this.type===b._in||this.isContextual("of"))?n.init=null:this.raise(this.lastTokEnd,"Complex binding patterns require an initialization value"):this.unexpected(),t.declarations.push(this.finishNode(n,"VariableDeclarator")),!this.eat(b.comma))break}return t},q.parseVarId=function(t,e){"const"!==e&&"let"!==e||!this.isContextual("let")||this.raiseRecoverable(this.start,"let is disallowed as a lexically bound name"),t.id=this.parseBindingAtom(),this.checkLVal(t.id,"var"===e?1:2,!1)};var Z=1,tt=2;q.parseFunction=function(t,e,r,n){this.initFunction(t),(this.options.ecmaVersion>=9||this.options.ecmaVersion>=6&&!n)&&(this.type===b.star&&e&tt&&this.unexpected(),t.generator=this.eat(b.star)),this.options.ecmaVersion>=8&&(t.async=!!n),e&Z&&(t.id=4&e&&this.type!==b.name?null:this.parseIdent(),!t.id||e&tt||this.checkLVal(t.id,this.strict||t.generator||t.async?this.treatFunctionsAsVar?1:2:3));var s=this.yieldPos,i=this.awaitPos;return this.yieldPos=0,this.awaitPos=0,this.enterScope(B(t.async,t.generator)),e&Z||(t.id=this.type===b.name?this.parseIdent():null),this.parseFunctionParams(t),this.parseFunctionBody(t,r),this.yieldPos=s,this.awaitPos=i,this.finishNode(t,e&Z?"FunctionDeclaration":"FunctionExpression")},q.parseFunctionParams=function(t){this.expect(b.parenL),t.params=this.parseBindingList(b.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams()},q.parseClass=function(t,e){this.next();var r=this.strict;this.strict=!0,this.parseClassId(t,e),this.parseClassSuper(t);var n=this.startNode(),s=!1;for(n.body=[],this.expect(b.braceL);!this.eat(b.braceR);){var i=this.parseClassElement(null!==t.superClass);i&&(n.body.push(i),"MethodDefinition"===i.type&&"constructor"===i.kind&&(s&&this.raise(i.start,"Duplicate constructor in the same class"),s=!0))}return t.body=this.finishNode(n,"ClassBody"),this.strict=r,this.finishNode(t,e?"ClassDeclaration":"ClassExpression")},q.parseClassElement=function(t){var e=this;if(this.eat(b.semi))return null;var r=this.startNode(),n=function(t,n){void 0===n&&(n=!1);var s=e.start,i=e.startLoc;return!!e.eatContextual(t)&&(!(e.type===b.parenL||n&&e.canInsertSemicolon())||(r.key&&e.unexpected(),r.computed=!1,r.key=e.startNodeAt(s,i),r.key.name=t,e.finishNode(r.key,"Identifier"),!1))};r.kind="method",r.static=n("static");var s=this.eat(b.star),i=!1;s||(this.options.ecmaVersion>=8&&n("async",!0)?(i=!0,s=this.options.ecmaVersion>=9&&this.eat(b.star)):n("get")?r.kind="get":n("set")&&(r.kind="set")),r.key||this.parsePropertyName(r);var a=r.key,o=!1;return r.computed||r.static||!("Identifier"===a.type&&"constructor"===a.name||"Literal"===a.type&&"constructor"===a.value)?r.static&&"Identifier"===a.type&&"prototype"===a.name&&this.raise(a.start,"Classes may not have a static property named prototype"):("method"!==r.kind&&this.raise(a.start,"Constructor can't have get/set modifier"),s&&this.raise(a.start,"Constructor can't be a generator"),i&&this.raise(a.start,"Constructor can't be an async method"),r.kind="constructor",o=t),this.parseClassMethod(r,s,i,o),"get"===r.kind&&0!==r.value.params.length&&this.raiseRecoverable(r.value.start,"getter should have no params"),"set"===r.kind&&1!==r.value.params.length&&this.raiseRecoverable(r.value.start,"setter should have exactly one param"),"set"===r.kind&&"RestElement"===r.value.params[0].type&&this.raiseRecoverable(r.value.params[0].start,"Setter cannot use rest params"),r},q.parseClassMethod=function(t,e,r,n){return t.value=this.parseMethod(e,r,n),this.finishNode(t,"MethodDefinition")},q.parseClassId=function(t,e){this.type===b.name?(t.id=this.parseIdent(),!0===e&&this.checkLVal(t.id,2,!1)):(!0===e&&this.unexpected(),t.id=null)},q.parseClassSuper=function(t){t.superClass=this.eat(b._extends)?this.parseExprSubscripts():null},q.parseExport=function(t,e){if(this.next(),this.eat(b.star))return this.expectContextual("from"),this.type!==b.string&&this.unexpected(),t.source=this.parseExprAtom(),this.semicolon(),this.finishNode(t,"ExportAllDeclaration");if(this.eat(b._default)){var r;if(this.checkExport(e,"default",this.lastTokStart),this.type===b._function||(r=this.isAsyncFunction())){var n=this.startNode();this.next(),r&&this.next(),t.declaration=this.parseFunction(n,4|Z,!1,r,!0)}else if(this.type===b._class){var s=this.startNode();t.declaration=this.parseClass(s,"nullableID")}else t.declaration=this.parseMaybeAssign(),this.semicolon();return this.finishNode(t,"ExportDefaultDeclaration")}if(this.shouldParseExportStatement())t.declaration=this.parseStatement(null),"VariableDeclaration"===t.declaration.type?this.checkVariableExport(e,t.declaration.declarations):this.checkExport(e,t.declaration.id.name,t.declaration.id.start),t.specifiers=[],t.source=null;else{if(t.declaration=null,t.specifiers=this.parseExportSpecifiers(e),this.eatContextual("from"))this.type!==b.string&&this.unexpected(),t.source=this.parseExprAtom();else{for(var i=0,a=t.specifiers;i<a.length;i+=1){var o=a[i];this.checkUnreserved(o.local)}t.source=null}this.semicolon()}return this.finishNode(t,"ExportNamedDeclaration")},q.checkExport=function(t,e,r){t&&(I(t,e)&&this.raiseRecoverable(r,"Duplicate export '"+e+"'"),t[e]=!0)},q.checkPatternExport=function(t,e){var r=e.type;if("Identifier"===r)this.checkExport(t,e.name,e.start);else if("ObjectPattern"===r)for(var n=0,s=e.properties;n<s.length;n+=1){var i=s[n];this.checkPatternExport(t,i)}else if("ArrayPattern"===r)for(var a=0,o=e.elements;a<o.length;a+=1){var u=o[a];u&&this.checkPatternExport(t,u)}else"Property"===r?this.checkPatternExport(t,e.value):"AssignmentPattern"===r?this.checkPatternExport(t,e.left):"RestElement"===r?this.checkPatternExport(t,e.argument):"ParenthesizedExpression"===r&&this.checkPatternExport(t,e.expression)},q.checkVariableExport=function(t,e){if(t)for(var r=0,n=e;r<n.length;r+=1){var s=n[r];this.checkPatternExport(t,s.id)}},q.shouldParseExportStatement=function(){return"var"===this.type.keyword||"const"===this.type.keyword||"class"===this.type.keyword||"function"===this.type.keyword||this.isLet()||this.isAsyncFunction()},q.parseExportSpecifiers=function(t){var e=[],r=!0;for(this.expect(b.braceL);!this.eat(b.braceR);){if(r)r=!1;else if(this.expect(b.comma),this.afterTrailingComma(b.braceR))break;var n=this.startNode();n.local=this.parseIdent(!0),n.exported=this.eatContextual("as")?this.parseIdent(!0):n.local,this.checkExport(t,n.exported.name,n.exported.start),e.push(this.finishNode(n,"ExportSpecifier"))}return e},q.parseImport=function(t){return this.next(),this.type===b.string?(t.specifiers=Q,t.source=this.parseExprAtom()):(t.specifiers=this.parseImportSpecifiers(),this.expectContextual("from"),t.source=this.type===b.string?this.parseExprAtom():this.unexpected()),this.semicolon(),this.finishNode(t,"ImportDeclaration")},q.parseImportSpecifiers=function(){var t=[],e=!0;if(this.type===b.name){var r=this.startNode();if(r.local=this.parseIdent(),this.checkLVal(r.local,2),t.push(this.finishNode(r,"ImportDefaultSpecifier")),!this.eat(b.comma))return t}if(this.type===b.star){var n=this.startNode();return this.next(),this.expectContextual("as"),n.local=this.parseIdent(),this.checkLVal(n.local,2),t.push(this.finishNode(n,"ImportNamespaceSpecifier")),t}for(this.expect(b.braceL);!this.eat(b.braceR);){if(e)e=!1;else if(this.expect(b.comma),this.afterTrailingComma(b.braceR))break;var s=this.startNode();s.imported=this.parseIdent(!0),this.eatContextual("as")?s.local=this.parseIdent():(this.checkUnreserved(s.imported),s.local=s.imported),this.checkLVal(s.local,2),t.push(this.finishNode(s,"ImportSpecifier"))}return t},q.adaptDirectivePrologue=function(t){for(var e=0;e<t.length&&this.isDirectiveCandidate(t[e]);++e)t[e].directive=t[e].expression.raw.slice(1,-1)},q.isDirectiveCandidate=function(t){return"ExpressionStatement"===t.type&&"Literal"===t.expression.type&&"string"==typeof t.expression.value&&('"'===this.input[t.start]||"'"===this.input[t.start])};var et=X.prototype;et.toAssignable=function(t,e,r){if(this.options.ecmaVersion>=6&&t)switch(t.type){case"Identifier":this.inAsync&&"await"===t.name&&this.raise(t.start,"Can not use 'await' as identifier inside an async function");break;case"ObjectPattern":case"ArrayPattern":case"RestElement":break;case"ObjectExpression":t.type="ObjectPattern",r&&this.checkPatternErrors(r,!0);for(var n=0,s=t.properties;n<s.length;n+=1){var i=s[n];this.toAssignable(i,e),"RestElement"!==i.type||"ArrayPattern"!==i.argument.type&&"ObjectPattern"!==i.argument.type||this.raise(i.argument.start,"Unexpected token")}break;case"Property":"init"!==t.kind&&this.raise(t.key.start,"Object pattern can't contain getter or setter"),this.toAssignable(t.value,e);break;case"ArrayExpression":t.type="ArrayPattern",r&&this.checkPatternErrors(r,!0),this.toAssignableList(t.elements,e);break;case"SpreadElement":t.type="RestElement",this.toAssignable(t.argument,e),"AssignmentPattern"===t.argument.type&&this.raise(t.argument.start,"Rest elements cannot have a default value");break;case"AssignmentExpression":"="!==t.operator&&this.raise(t.left.end,"Only '=' operator can be used for specifying default value."),t.type="AssignmentPattern",delete t.operator,this.toAssignable(t.left,e);case"AssignmentPattern":break;case"ParenthesizedExpression":this.toAssignable(t.expression,e,r);break;case"MemberExpression":if(!e)break;default:this.raise(t.start,"Assigning to rvalue")}else r&&this.checkPatternErrors(r,!0);return t},et.toAssignableList=function(t,e){for(var r=t.length,n=0;n<r;n++){var s=t[n];s&&this.toAssignable(s,e)}if(r){var i=t[r-1];6===this.options.ecmaVersion&&e&&i&&"RestElement"===i.type&&"Identifier"!==i.argument.type&&this.unexpected(i.argument.start)}return t},et.parseSpread=function(t){var e=this.startNode();return this.next(),e.argument=this.parseMaybeAssign(!1,t),this.finishNode(e,"SpreadElement")},et.parseRestBinding=function(){var t=this.startNode();return this.next(),6===this.options.ecmaVersion&&this.type!==b.name&&this.unexpected(),t.argument=this.parseBindingAtom(),this.finishNode(t,"RestElement")},et.parseBindingAtom=function(){if(this.options.ecmaVersion>=6)switch(this.type){case b.bracketL:var t=this.startNode();return this.next(),t.elements=this.parseBindingList(b.bracketR,!0,!0),this.finishNode(t,"ArrayPattern");case b.braceL:return this.parseObj(!0)}return this.parseIdent()},et.parseBindingList=function(t,e,r){for(var n=[],s=!0;!this.eat(t);)if(s?s=!1:this.expect(b.comma),e&&this.type===b.comma)n.push(null);else{if(r&&this.afterTrailingComma(t))break;if(this.type===b.ellipsis){var i=this.parseRestBinding();this.parseBindingListItem(i),n.push(i),this.type===b.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.expect(t);break}var a=this.parseMaybeDefault(this.start,this.startLoc);this.parseBindingListItem(a),n.push(a)}return n},et.parseBindingListItem=function(t){return t},et.parseMaybeDefault=function(t,e,r){if(r=r||this.parseBindingAtom(),this.options.ecmaVersion<6||!this.eat(b.eq))return r;var n=this.startNodeAt(t,e);return n.left=r,n.right=this.parseMaybeAssign(),this.finishNode(n,"AssignmentPattern")},et.checkLVal=function(t,e,r){switch(void 0===e&&(e=0),t.type){case"Identifier":this.strict&&this.reservedWordsStrictBind.test(t.name)&&this.raiseRecoverable(t.start,(e?"Binding ":"Assigning to ")+t.name+" in strict mode"),r&&(I(r,t.name)&&this.raiseRecoverable(t.start,"Argument name clash"),r[t.name]=!0),0!==e&&5!==e&&this.declareName(t.name,e,t.start);break;case"MemberExpression":e&&this.raiseRecoverable(t.start,"Binding member expression");break;case"ObjectPattern":for(var n=0,s=t.properties;n<s.length;n+=1){var i=s[n];this.checkLVal(i,e,r)}break;case"Property":this.checkLVal(t.value,e,r);break;case"ArrayPattern":for(var a=0,o=t.elements;a<o.length;a+=1){var u=o[a];u&&this.checkLVal(u,e,r)}break;case"AssignmentPattern":this.checkLVal(t.left,e,r);break;case"RestElement":this.checkLVal(t.argument,e,r);break;case"ParenthesizedExpression":this.checkLVal(t.expression,e,r);break;default:this.raise(t.start,(e?"Binding":"Assigning to")+" rvalue")}};var rt=X.prototype;rt.checkPropClash=function(t,e,r){if(!(this.options.ecmaVersion>=9&&"SpreadElement"===t.type||this.options.ecmaVersion>=6&&(t.computed||t.method||t.shorthand))){var n,s=t.key;switch(s.type){case"Identifier":n=s.name;break;case"Literal":n=String(s.value);break;default:return}var i=t.kind;if(this.options.ecmaVersion>=6)"__proto__"===n&&"init"===i&&(e.proto&&(r&&r.doubleProto<0?r.doubleProto=s.start:this.raiseRecoverable(s.start,"Redefinition of __proto__ property")),e.proto=!0);else{var a=e[n="$"+n];if(a)("init"===i?this.strict&&a.init||a.get||a.set:a.init||a[i])&&this.raiseRecoverable(s.start,"Redefinition of property");else a=e[n]={init:!1,get:!1,set:!1};a[i]=!0}}},rt.parseExpression=function(t,e){var r=this.start,n=this.startLoc,s=this.parseMaybeAssign(t,e);if(this.type===b.comma){var i=this.startNodeAt(r,n);for(i.expressions=[s];this.eat(b.comma);)i.expressions.push(this.parseMaybeAssign(t,e));return this.finishNode(i,"SequenceExpression")}return s},rt.parseMaybeAssign=function(t,e,r){if(this.isContextual("yield")){if(this.inGenerator)return this.parseYield(t);this.exprAllowed=!1}var n=!1,s=-1,i=-1,a=-1;e?(s=e.parenthesizedAssign,i=e.trailingComma,a=e.shorthandAssign,e.parenthesizedAssign=e.trailingComma=e.shorthandAssign=-1):(e=new H,n=!0);var o=this.start,u=this.startLoc;this.type!==b.parenL&&this.type!==b.name||(this.potentialArrowAt=this.start);var h=this.parseMaybeConditional(t,e);if(r&&(h=r.call(this,h,o,u)),this.type.isAssign){var l=this.startNodeAt(o,u);return l.operator=this.value,l.left=this.type===b.eq?this.toAssignable(h,!1,e):h,n||H.call(e),e.shorthandAssign=-1,this.checkLVal(h),this.next(),l.right=this.parseMaybeAssign(t),this.finishNode(l,"AssignmentExpression")}return n&&this.checkExpressionErrors(e,!0),s>-1&&(e.parenthesizedAssign=s),i>-1&&(e.trailingComma=i),a>-1&&(e.shorthandAssign=a),h},rt.parseMaybeConditional=function(t,e){var r=this.start,n=this.startLoc,s=this.parseExprOps(t,e);if(this.checkExpressionErrors(e))return s;if(this.eat(b.question)){var i=this.startNodeAt(r,n);return i.test=s,i.consequent=this.parseMaybeAssign(),this.expect(b.colon),i.alternate=this.parseMaybeAssign(t),this.finishNode(i,"ConditionalExpression")}return s},rt.parseExprOps=function(t,e){var r=this.start,n=this.startLoc,s=this.parseMaybeUnary(e,!1);return this.checkExpressionErrors(e)?s:s.start===r&&"ArrowFunctionExpression"===s.type?s:this.parseExprOp(s,r,n,-1,t)},rt.parseExprOp=function(t,e,r,n,s){var i=this.type.binop;if(null!=i&&(!s||this.type!==b._in)&&i>n){var a=this.type===b.logicalOR||this.type===b.logicalAND,o=this.value;this.next();var u=this.start,h=this.startLoc,l=this.parseExprOp(this.parseMaybeUnary(null,!1),u,h,i,s),c=this.buildBinary(e,r,t,l,o,a);return this.parseExprOp(c,e,r,n,s)}return t},rt.buildBinary=function(t,e,r,n,s,i){var a=this.startNodeAt(t,e);return a.left=r,a.operator=s,a.right=n,this.finishNode(a,i?"LogicalExpression":"BinaryExpression")},rt.parseMaybeUnary=function(t,e){var r,n=this.start,s=this.startLoc;if(this.isContextual("await")&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction))r=this.parseAwait(),e=!0;else if(this.type.prefix){var i=this.startNode(),a=this.type===b.incDec;i.operator=this.value,i.prefix=!0,this.next(),i.argument=this.parseMaybeUnary(null,!0),this.checkExpressionErrors(t,!0),a?this.checkLVal(i.argument):this.strict&&"delete"===i.operator&&"Identifier"===i.argument.type?this.raiseRecoverable(i.start,"Deleting local variable in strict mode"):e=!0,r=this.finishNode(i,a?"UpdateExpression":"UnaryExpression")}else{if(r=this.parseExprSubscripts(t),this.checkExpressionErrors(t))return r;for(;this.type.postfix&&!this.canInsertSemicolon();){var o=this.startNodeAt(n,s);o.operator=this.value,o.prefix=!1,o.argument=r,this.checkLVal(r),this.next(),r=this.finishNode(o,"UpdateExpression")}}return!e&&this.eat(b.starstar)?this.buildBinary(n,s,r,this.parseMaybeUnary(null,!1),"**",!1):r},rt.parseExprSubscripts=function(t){var e=this.start,r=this.startLoc,n=this.parseExprAtom(t),s="ArrowFunctionExpression"===n.type&&")"!==this.input.slice(this.lastTokStart,this.lastTokEnd);if(this.checkExpressionErrors(t)||s)return n;var i=this.parseSubscripts(n,e,r);return t&&"MemberExpression"===i.type&&(t.parenthesizedAssign>=i.start&&(t.parenthesizedAssign=-1),t.parenthesizedBind>=i.start&&(t.parenthesizedBind=-1)),i},rt.parseSubscripts=function(t,e,r,n){for(var s=this.options.ecmaVersion>=8&&"Identifier"===t.type&&"async"===t.name&&this.lastTokEnd===t.end&&!this.canInsertSemicolon()&&"async"===this.input.slice(t.start,t.end),i=void 0;;)if((i=this.eat(b.bracketL))||this.eat(b.dot)){var a=this.startNodeAt(e,r);a.object=t,a.property=i?this.parseExpression():this.parseIdent(!0),a.computed=!!i,i&&this.expect(b.bracketR),t=this.finishNode(a,"MemberExpression")}else if(!n&&this.eat(b.parenL)){var o=new H,u=this.yieldPos,h=this.awaitPos;this.yieldPos=0,this.awaitPos=0;var l=this.parseExprList(b.parenR,this.options.ecmaVersion>=8,!1,o);if(s&&!this.canInsertSemicolon()&&this.eat(b.arrow))return this.checkPatternErrors(o,!1),this.checkYieldAwaitInDefaultParams(),this.yieldPos=u,this.awaitPos=h,this.parseArrowExpression(this.startNodeAt(e,r),l,!0);this.checkExpressionErrors(o,!0),this.yieldPos=u||this.yieldPos,this.awaitPos=h||this.awaitPos;var c=this.startNodeAt(e,r);c.callee=t,c.arguments=l,t=this.finishNode(c,"CallExpression")}else{if(this.type!==b.backQuote)return t;var p=this.startNodeAt(e,r);p.tag=t,p.quasi=this.parseTemplate({isTagged:!0}),t=this.finishNode(p,"TaggedTemplateExpression")}},rt.parseExprAtom=function(t){this.type===b.slash&&this.readRegexp();var e,r=this.potentialArrowAt===this.start;switch(this.type){case b._super:return this.allowSuper||this.raise(this.start,"'super' keyword outside a method"),e=this.startNode(),this.next(),this.type!==b.parenL||this.allowDirectSuper||this.raise(e.start,"super() call outside constructor of a subclass"),this.type!==b.dot&&this.type!==b.bracketL&&this.type!==b.parenL&&this.unexpected(),this.finishNode(e,"Super");case b._this:return e=this.startNode(),this.next(),this.finishNode(e,"ThisExpression");case b.name:var n=this.start,s=this.startLoc,i=this.containsEsc,a=this.parseIdent(this.type!==b.name);if(this.options.ecmaVersion>=8&&!i&&"async"===a.name&&!this.canInsertSemicolon()&&this.eat(b._function))return this.parseFunction(this.startNodeAt(n,s),0,!1,!0);if(r&&!this.canInsertSemicolon()){if(this.eat(b.arrow))return this.parseArrowExpression(this.startNodeAt(n,s),[a],!1);if(this.options.ecmaVersion>=8&&"async"===a.name&&this.type===b.name&&!i)return a=this.parseIdent(),!this.canInsertSemicolon()&&this.eat(b.arrow)||this.unexpected(),this.parseArrowExpression(this.startNodeAt(n,s),[a],!0)}return a;case b.regexp:var o=this.value;return(e=this.parseLiteral(o.value)).regex={pattern:o.pattern,flags:o.flags},e;case b.num:case b.string:return this.parseLiteral(this.value);case b._null:case b._true:case b._false:return(e=this.startNode()).value=this.type===b._null?null:this.type===b._true,e.raw=this.type.keyword,this.next(),this.finishNode(e,"Literal");case b.parenL:var u=this.start,h=this.parseParenAndDistinguishExpression(r);return t&&(t.parenthesizedAssign<0&&!this.isSimpleAssignTarget(h)&&(t.parenthesizedAssign=u),t.parenthesizedBind<0&&(t.parenthesizedBind=u)),h;case b.bracketL:return e=this.startNode(),this.next(),e.elements=this.parseExprList(b.bracketR,!0,!0,t),this.finishNode(e,"ArrayExpression");case b.braceL:return this.parseObj(!1,t);case b._function:return e=this.startNode(),this.next(),this.parseFunction(e,0);case b._class:return this.parseClass(this.startNode(),!1);case b._new:return this.parseNew();case b.backQuote:return this.parseTemplate();default:this.unexpected()}},rt.parseLiteral=function(t){var e=this.startNode();return e.value=t,e.raw=this.input.slice(this.start,this.end),this.next(),this.finishNode(e,"Literal")},rt.parseParenExpression=function(){this.expect(b.parenL);var t=this.parseExpression();return this.expect(b.parenR),t},rt.parseParenAndDistinguishExpression=function(t){var e,r=this.start,n=this.startLoc,s=this.options.ecmaVersion>=8;if(this.options.ecmaVersion>=6){this.next();var i,a=this.start,o=this.startLoc,u=[],h=!0,l=!1,c=new H,p=this.yieldPos,f=this.awaitPos;for(this.yieldPos=0,this.awaitPos=0;this.type!==b.parenR;){if(h?h=!1:this.expect(b.comma),s&&this.afterTrailingComma(b.parenR,!0)){l=!0;break}if(this.type===b.ellipsis){i=this.start,u.push(this.parseParenItem(this.parseRestBinding())),this.type===b.comma&&this.raise(this.start,"Comma is not permitted after the rest element");break}u.push(this.parseMaybeAssign(!1,c,this.parseParenItem))}var d=this.start,m=this.startLoc;if(this.expect(b.parenR),t&&!this.canInsertSemicolon()&&this.eat(b.arrow))return this.checkPatternErrors(c,!1),this.checkYieldAwaitInDefaultParams(),this.yieldPos=p,this.awaitPos=f,this.parseParenArrowList(r,n,u);u.length&&!l||this.unexpected(this.lastTokStart),i&&this.unexpected(i),this.checkExpressionErrors(c,!0),this.yieldPos=p||this.yieldPos,this.awaitPos=f||this.awaitPos,u.length>1?((e=this.startNodeAt(a,o)).expressions=u,this.finishNodeAt(e,"SequenceExpression",d,m)):e=u[0]}else e=this.parseParenExpression();if(this.options.preserveParens){var g=this.startNodeAt(r,n);return g.expression=e,this.finishNode(g,"ParenthesizedExpression")}return e},rt.parseParenItem=function(t){return t},rt.parseParenArrowList=function(t,e,r){return this.parseArrowExpression(this.startNodeAt(t,e),r)};var nt=[];rt.parseNew=function(){var t=this.startNode(),e=this.parseIdent(!0);if(this.options.ecmaVersion>=6&&this.eat(b.dot)){t.meta=e;var r=this.containsEsc;return t.property=this.parseIdent(!0),("target"!==t.property.name||r)&&this.raiseRecoverable(t.property.start,"The only valid meta property for new is new.target"),this.inNonArrowFunction()||this.raiseRecoverable(t.start,"new.target can only be used in functions"),this.finishNode(t,"MetaProperty")}var n=this.start,s=this.startLoc;return t.callee=this.parseSubscripts(this.parseExprAtom(),n,s,!0),this.eat(b.parenL)?t.arguments=this.parseExprList(b.parenR,this.options.ecmaVersion>=8,!1):t.arguments=nt,this.finishNode(t,"NewExpression")},rt.parseTemplateElement=function(t){var e=t.isTagged,r=this.startNode();return this.type===b.invalidTemplate?(e||this.raiseRecoverable(this.start,"Bad escape sequence in untagged template literal"),r.value={raw:this.value,cooked:null}):r.value={raw:this.input.slice(this.start,this.end).replace(/\r\n?/g,"\n"),cooked:this.value},this.next(),r.tail=this.type===b.backQuote,this.finishNode(r,"TemplateElement")},rt.parseTemplate=function(t){void 0===t&&(t={});var e=t.isTagged;void 0===e&&(e=!1);var r=this.startNode();this.next(),r.expressions=[];var n=this.parseTemplateElement({isTagged:e});for(r.quasis=[n];!n.tail;)this.type===b.eof&&this.raise(this.pos,"Unterminated template literal"),this.expect(b.dollarBraceL),r.expressions.push(this.parseExpression()),this.expect(b.braceR),r.quasis.push(n=this.parseTemplateElement({isTagged:e}));return this.next(),this.finishNode(r,"TemplateLiteral")},rt.isAsyncProp=function(t){return!t.computed&&"Identifier"===t.key.type&&"async"===t.key.name&&(this.type===b.name||this.type===b.num||this.type===b.string||this.type===b.bracketL||this.type.keyword||this.options.ecmaVersion>=9&&this.type===b.star)&&!v.test(this.input.slice(this.lastTokEnd,this.start))},rt.parseObj=function(t,e){var r=this.startNode(),n=!0,s={};for(r.properties=[],this.next();!this.eat(b.braceR);){if(n)n=!1;else if(this.expect(b.comma),this.afterTrailingComma(b.braceR))break;var i=this.parseProperty(t,e);t||this.checkPropClash(i,s,e),r.properties.push(i)}return this.finishNode(r,t?"ObjectPattern":"ObjectExpression")},rt.parseProperty=function(t,e){var r,n,s,i,a=this.startNode();if(this.options.ecmaVersion>=9&&this.eat(b.ellipsis))return t?(a.argument=this.parseIdent(!1),this.type===b.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.finishNode(a,"RestElement")):(this.type===b.parenL&&e&&(e.parenthesizedAssign<0&&(e.parenthesizedAssign=this.start),e.parenthesizedBind<0&&(e.parenthesizedBind=this.start)),a.argument=this.parseMaybeAssign(!1,e),this.type===b.comma&&e&&e.trailingComma<0&&(e.trailingComma=this.start),this.finishNode(a,"SpreadElement"));this.options.ecmaVersion>=6&&(a.method=!1,a.shorthand=!1,(t||e)&&(s=this.start,i=this.startLoc),t||(r=this.eat(b.star)));var o=this.containsEsc;return this.parsePropertyName(a),!t&&!o&&this.options.ecmaVersion>=8&&!r&&this.isAsyncProp(a)?(n=!0,r=this.options.ecmaVersion>=9&&this.eat(b.star),this.parsePropertyName(a,e)):n=!1,this.parsePropertyValue(a,t,r,n,s,i,e,o),this.finishNode(a,"Property")},rt.parsePropertyValue=function(t,e,r,n,s,i,a,o){if((r||n)&&this.type===b.colon&&this.unexpected(),this.eat(b.colon))t.value=e?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(!1,a),t.kind="init";else if(this.options.ecmaVersion>=6&&this.type===b.parenL)e&&this.unexpected(),t.kind="init",t.method=!0,t.value=this.parseMethod(r,n);else if(e||o||!(this.options.ecmaVersion>=5)||t.computed||"Identifier"!==t.key.type||"get"!==t.key.name&&"set"!==t.key.name||this.type===b.comma||this.type===b.braceR)this.options.ecmaVersion>=6&&!t.computed&&"Identifier"===t.key.type?(this.checkUnreserved(t.key),t.kind="init",e?t.value=this.parseMaybeDefault(s,i,t.key):this.type===b.eq&&a?(a.shorthandAssign<0&&(a.shorthandAssign=this.start),t.value=this.parseMaybeDefault(s,i,t.key)):t.value=t.key,t.shorthand=!0):this.unexpected();else{(r||n)&&this.unexpected(),t.kind=t.key.name,this.parsePropertyName(t),t.value=this.parseMethod(!1);var u="get"===t.kind?0:1;if(t.value.params.length!==u){var h=t.value.start;"get"===t.kind?this.raiseRecoverable(h,"getter should have no params"):this.raiseRecoverable(h,"setter should have exactly one param")}else"set"===t.kind&&"RestElement"===t.value.params[0].type&&this.raiseRecoverable(t.value.params[0].start,"Setter cannot use rest params")}},rt.parsePropertyName=function(t){if(this.options.ecmaVersion>=6){if(this.eat(b.bracketL))return t.computed=!0,t.key=this.parseMaybeAssign(),this.expect(b.bracketR),t.key;t.computed=!1}return t.key=this.type===b.num||this.type===b.string?this.parseExprAtom():this.parseIdent(!0)},rt.initFunction=function(t){t.id=null,this.options.ecmaVersion>=6&&(t.generator=t.expression=!1),this.options.ecmaVersion>=8&&(t.async=!1)},rt.parseMethod=function(t,e,r){var n=this.startNode(),s=this.yieldPos,i=this.awaitPos;return this.initFunction(n),this.options.ecmaVersion>=6&&(n.generator=t),this.options.ecmaVersion>=8&&(n.async=!!e),this.yieldPos=0,this.awaitPos=0,this.enterScope(64|B(e,n.generator)|(r?128:0)),this.expect(b.parenL),n.params=this.parseBindingList(b.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams(),this.parseFunctionBody(n,!1),this.yieldPos=s,this.awaitPos=i,this.finishNode(n,"FunctionExpression")},rt.parseArrowExpression=function(t,e,r){var n=this.yieldPos,s=this.awaitPos;return this.enterScope(16|B(r,!1)),this.initFunction(t),this.options.ecmaVersion>=8&&(t.async=!!r),this.yieldPos=0,this.awaitPos=0,t.params=this.toAssignableList(e,!0),this.parseFunctionBody(t,!0),this.yieldPos=n,this.awaitPos=s,this.finishNode(t,"ArrowFunctionExpression")},rt.parseFunctionBody=function(t,e){var r=e&&this.type!==b.braceL,n=this.strict,s=!1;if(r)t.body=this.parseMaybeAssign(),t.expression=!0,this.checkParams(t,!1);else{var i=this.options.ecmaVersion>=7&&!this.isSimpleParamList(t.params);n&&!i||(s=this.strictDirective(this.end))&&i&&this.raiseRecoverable(t.start,"Illegal 'use strict' directive in function with non-simple parameter list");var a=this.labels;this.labels=[],s&&(this.strict=!0),this.checkParams(t,!n&&!s&&!e&&this.isSimpleParamList(t.params)),t.body=this.parseBlock(!1),t.expression=!1,this.adaptDirectivePrologue(t.body.body),this.labels=a}this.exitScope(),this.strict&&t.id&&this.checkLVal(t.id,5),this.strict=n},rt.isSimpleParamList=function(t){for(var e=0,r=t;e<r.length;e+=1){if("Identifier"!==r[e].type)return!1}return!0},rt.checkParams=function(t,e){for(var r={},n=0,s=t.params;n<s.length;n+=1){var i=s[n];this.checkLVal(i,1,e?null:r)}},rt.parseExprList=function(t,e,r,n){for(var s=[],i=!0;!this.eat(t);){if(i)i=!1;else if(this.expect(b.comma),e&&this.afterTrailingComma(t))break;var a=void 0;r&&this.type===b.comma?a=null:this.type===b.ellipsis?(a=this.parseSpread(n),n&&this.type===b.comma&&n.trailingComma<0&&(n.trailingComma=this.start)):a=this.parseMaybeAssign(!1,n),s.push(a)}return s},rt.checkUnreserved=function(t){var e=t.start,r=t.end,n=t.name;(this.inGenerator&&"yield"===n&&this.raiseRecoverable(e,"Can not use 'yield' as identifier inside a generator"),this.inAsync&&"await"===n&&this.raiseRecoverable(e,"Can not use 'await' as identifier inside an async function"),this.keywords.test(n)&&this.raise(e,"Unexpected keyword '"+n+"'"),this.options.ecmaVersion<6&&-1!==this.input.slice(e,r).indexOf("\\"))||(this.strict?this.reservedWordsStrict:this.reservedWords).test(n)&&(this.inAsync||"await"!==n||this.raiseRecoverable(e,"Can not use keyword 'await' outside an async function"),this.raiseRecoverable(e,"The keyword '"+n+"' is reserved"))},rt.parseIdent=function(t,e){var r=this.startNode();return t&&"never"===this.options.allowReserved&&(t=!1),this.type===b.name?r.name=this.value:this.type.keyword?(r.name=this.type.keyword,"class"!==r.name&&"function"!==r.name||this.lastTokEnd===this.lastTokStart+1&&46===this.input.charCodeAt(this.lastTokStart)||this.context.pop()):this.unexpected(),this.next(),this.finishNode(r,"Identifier"),t||this.checkUnreserved(r),r},rt.parseYield=function(t){this.yieldPos||(this.yieldPos=this.start);var e=this.startNode();return this.next(),this.type===b.semi||this.canInsertSemicolon()||this.type!==b.star&&!this.type.startsExpr?(e.delegate=!1,e.argument=null):(e.delegate=this.eat(b.star),e.argument=this.parseMaybeAssign(t)),this.finishNode(e,"YieldExpression")},rt.parseAwait=function(){this.awaitPos||(this.awaitPos=this.start);var t=this.startNode();return this.next(),t.argument=this.parseMaybeUnary(null,!0),this.finishNode(t,"AwaitExpression")};var st=X.prototype;st.raise=function(t,e){var r=P(this.input,t);e+=" ("+r.line+":"+r.column+")";var n=new SyntaxError(e);throw n.pos=t,n.loc=r,n.raisedAt=this.pos,n},st.raiseRecoverable=st.raise,st.curPosition=function(){if(this.options.locations)return new C(this.curLine,this.pos-this.lineStart)};var it=X.prototype,at=function(t){this.flags=t,this.var=[],this.lexical=[],this.functions=[]};it.enterScope=function(t){this.scopeStack.push(new at(t))},it.exitScope=function(){this.scopeStack.pop()},it.treatFunctionsAsVarInScope=function(t){return t.flags&M||!this.inModule&&1&t.flags},it.declareName=function(t,e,r){var n=!1;if(2===e){var s=this.currentScope();n=s.lexical.indexOf(t)>-1||s.functions.indexOf(t)>-1||s.var.indexOf(t)>-1,s.lexical.push(t)}else if(4===e){this.currentScope().lexical.push(t)}else if(3===e){var i=this.currentScope();n=this.treatFunctionsAsVar?i.lexical.indexOf(t)>-1:i.lexical.indexOf(t)>-1||i.var.indexOf(t)>-1,i.functions.push(t)}else for(var a=this.scopeStack.length-1;a>=0;--a){var o=this.scopeStack[a];if(o.lexical.indexOf(t)>-1&&!(32&o.flags)&&o.lexical[0]===t||!this.treatFunctionsAsVarInScope(o)&&o.functions.indexOf(t)>-1){n=!0;break}if(o.var.push(t),o.flags&$)break}n&&this.raiseRecoverable(r,"Identifier '"+t+"' has already been declared")},it.currentScope=function(){return this.scopeStack[this.scopeStack.length-1]},it.currentVarScope=function(){for(var t=this.scopeStack.length-1;;t--){var e=this.scopeStack[t];if(e.flags&$)return e}},it.currentThisScope=function(){for(var t=this.scopeStack.length-1;;t--){var e=this.scopeStack[t];if(e.flags&$&&!(16&e.flags))return e}};var ot=function(t,e,r){this.type="",this.start=e,this.end=0,t.options.locations&&(this.loc=new O(t,r)),t.options.directSourceFile&&(this.sourceFile=t.options.directSourceFile),t.options.ranges&&(this.range=[e,0])},ut=X.prototype;function ht(t,e,r,n){return t.type=e,t.end=r,this.options.locations&&(t.loc.end=n),this.options.ranges&&(t.range[1]=r),t}ut.startNode=function(){return new ot(this,this.start,this.startLoc)},ut.startNodeAt=function(t,e){return new ot(this,t,e)},ut.finishNode=function(t,e){return ht.call(this,t,e,this.lastTokEnd,this.lastTokEndLoc)},ut.finishNodeAt=function(t,e,r,n){return ht.call(this,t,e,r,n)};var lt=function(t,e,r,n,s){this.token=t,this.isExpr=!!e,this.preserveSpace=!!r,this.override=n,this.generator=!!s},ct={b_stat:new lt("{",!1),b_expr:new lt("{",!0),b_tmpl:new lt("${",!1),p_stat:new lt("(",!1),p_expr:new lt("(",!0),q_tmpl:new lt("`",!0,!0,function(t){return t.tryReadTemplateToken()}),f_stat:new lt("function",!1),f_expr:new lt("function",!0),f_expr_gen:new lt("function",!0,!1,null,!0),f_gen:new lt("function",!1,!1,null,!0)},pt=X.prototype;pt.initialContext=function(){return[ct.b_stat]},pt.braceIsBlock=function(t){var e=this.curContext();return e===ct.f_expr||e===ct.f_stat||(t!==b.colon||e!==ct.b_stat&&e!==ct.b_expr?t===b._return||t===b.name&&this.exprAllowed?v.test(this.input.slice(this.lastTokEnd,this.start)):t===b._else||t===b.semi||t===b.eof||t===b.parenR||t===b.arrow||(t===b.braceL?e===ct.b_stat:t!==b._var&&t!==b._const&&t!==b.name&&!this.exprAllowed):!e.isExpr)},pt.inGeneratorContext=function(){for(var t=this.context.length-1;t>=1;t--){var e=this.context[t];if("function"===e.token)return e.generator}return!1},pt.updateContext=function(t){var e,r=this.type;r.keyword&&t===b.dot?this.exprAllowed=!1:(e=r.updateContext)?e.call(this,t):this.exprAllowed=r.beforeExpr},b.parenR.updateContext=b.braceR.updateContext=function(){if(1!==this.context.length){var t=this.context.pop();t===ct.b_stat&&"function"===this.curContext().token&&(t=this.context.pop()),this.exprAllowed=!t.isExpr}else this.exprAllowed=!0},b.braceL.updateContext=function(t){this.context.push(this.braceIsBlock(t)?ct.b_stat:ct.b_expr),this.exprAllowed=!0},b.dollarBraceL.updateContext=function(){this.context.push(ct.b_tmpl),this.exprAllowed=!0},b.parenL.updateContext=function(t){var e=t===b._if||t===b._for||t===b._with||t===b._while;this.context.push(e?ct.p_stat:ct.p_expr),this.exprAllowed=!0},b.incDec.updateContext=function(){},b._function.updateContext=b._class.updateContext=function(t){!t.beforeExpr||t===b.semi||t===b._else||t===b._return&&v.test(this.input.slice(this.lastTokEnd,this.start))||(t===b.colon||t===b.braceL)&&this.curContext()===ct.b_stat?this.context.push(ct.f_stat):this.context.push(ct.f_expr),this.exprAllowed=!1},b.backQuote.updateContext=function(){this.curContext()===ct.q_tmpl?this.context.pop():this.context.push(ct.q_tmpl),this.exprAllowed=!1},b.star.updateContext=function(t){if(t===b._function){var e=this.context.length-1;this.context[e]===ct.f_expr?this.context[e]=ct.f_expr_gen:this.context[e]=ct.f_gen}this.exprAllowed=!0},b.name.updateContext=function(t){var e=!1;this.options.ecmaVersion>=6&&t!==b.dot&&("of"===this.value&&!this.exprAllowed||"yield"===this.value&&this.inGeneratorContext())&&(e=!0),this.exprAllowed=e};var ft={$LONE:["ASCII","ASCII_Hex_Digit","AHex","Alphabetic","Alpha","Any","Assigned","Bidi_Control","Bidi_C","Bidi_Mirrored","Bidi_M","Case_Ignorable","CI","Cased","Changes_When_Casefolded","CWCF","Changes_When_Casemapped","CWCM","Changes_When_Lowercased","CWL","Changes_When_NFKC_Casefolded","CWKCF","Changes_When_Titlecased","CWT","Changes_When_Uppercased","CWU","Dash","Default_Ignorable_Code_Point","DI","Deprecated","Dep","Diacritic","Dia","Emoji","Emoji_Component","Emoji_Modifier","Emoji_Modifier_Base","Emoji_Presentation","Extender","Ext","Grapheme_Base","Gr_Base","Grapheme_Extend","Gr_Ext","Hex_Digit","Hex","IDS_Binary_Operator","IDSB","IDS_Trinary_Operator","IDST","ID_Continue","IDC","ID_Start","IDS","Ideographic","Ideo","Join_Control","Join_C","Logical_Order_Exception","LOE","Lowercase","Lower","Math","Noncharacter_Code_Point","NChar","Pattern_Syntax","Pat_Syn","Pattern_White_Space","Pat_WS","Quotation_Mark","QMark","Radical","Regional_Indicator","RI","Sentence_Terminal","STerm","Soft_Dotted","SD","Terminal_Punctuation","Term","Unified_Ideograph","UIdeo","Uppercase","Upper","Variation_Selector","VS","White_Space","space","XID_Continue","XIDC","XID_Start","XIDS"],General_Category:["Cased_Letter","LC","Close_Punctuation","Pe","Connector_Punctuation","Pc","Control","Cc","cntrl","Currency_Symbol","Sc","Dash_Punctuation","Pd","Decimal_Number","Nd","digit","Enclosing_Mark","Me","Final_Punctuation","Pf","Format","Cf","Initial_Punctuation","Pi","Letter","L","Letter_Number","Nl","Line_Separator","Zl","Lowercase_Letter","Ll","Mark","M","Combining_Mark","Math_Symbol","Sm","Modifier_Letter","Lm","Modifier_Symbol","Sk","Nonspacing_Mark","Mn","Number","N","Open_Punctuation","Ps","Other","C","Other_Letter","Lo","Other_Number","No","Other_Punctuation","Po","Other_Symbol","So","Paragraph_Separator","Zp","Private_Use","Co","Punctuation","P","punct","Separator","Z","Space_Separator","Zs","Spacing_Mark","Mc","Surrogate","Cs","Symbol","S","Titlecase_Letter","Lt","Unassigned","Cn","Uppercase_Letter","Lu"],Script:["Adlam","Adlm","Ahom","Anatolian_Hieroglyphs","Hluw","Arabic","Arab","Armenian","Armn","Avestan","Avst","Balinese","Bali","Bamum","Bamu","Bassa_Vah","Bass","Batak","Batk","Bengali","Beng","Bhaiksuki","Bhks","Bopomofo","Bopo","Brahmi","Brah","Braille","Brai","Buginese","Bugi","Buhid","Buhd","Canadian_Aboriginal","Cans","Carian","Cari","Caucasian_Albanian","Aghb","Chakma","Cakm","Cham","Cherokee","Cher","Common","Zyyy","Coptic","Copt","Qaac","Cuneiform","Xsux","Cypriot","Cprt","Cyrillic","Cyrl","Deseret","Dsrt","Devanagari","Deva","Duployan","Dupl","Egyptian_Hieroglyphs","Egyp","Elbasan","Elba","Ethiopic","Ethi","Georgian","Geor","Glagolitic","Glag","Gothic","Goth","Grantha","Gran","Greek","Grek","Gujarati","Gujr","Gurmukhi","Guru","Han","Hani","Hangul","Hang","Hanunoo","Hano","Hatran","Hatr","Hebrew","Hebr","Hiragana","Hira","Imperial_Aramaic","Armi","Inherited","Zinh","Qaai","Inscriptional_Pahlavi","Phli","Inscriptional_Parthian","Prti","Javanese","Java","Kaithi","Kthi","Kannada","Knda","Katakana","Kana","Kayah_Li","Kali","Kharoshthi","Khar","Khmer","Khmr","Khojki","Khoj","Khudawadi","Sind","Lao","Laoo","Latin","Latn","Lepcha","Lepc","Limbu","Limb","Linear_A","Lina","Linear_B","Linb","Lisu","Lycian","Lyci","Lydian","Lydi","Mahajani","Mahj","Malayalam","Mlym","Mandaic","Mand","Manichaean","Mani","Marchen","Marc","Masaram_Gondi","Gonm","Meetei_Mayek","Mtei","Mende_Kikakui","Mend","Meroitic_Cursive","Merc","Meroitic_Hieroglyphs","Mero","Miao","Plrd","Modi","Mongolian","Mong","Mro","Mroo","Multani","Mult","Myanmar","Mymr","Nabataean","Nbat","New_Tai_Lue","Talu","Newa","Nko","Nkoo","Nushu","Nshu","Ogham","Ogam","Ol_Chiki","Olck","Old_Hungarian","Hung","Old_Italic","Ital","Old_North_Arabian","Narb","Old_Permic","Perm","Old_Persian","Xpeo","Old_South_Arabian","Sarb","Old_Turkic","Orkh","Oriya","Orya","Osage","Osge","Osmanya","Osma","Pahawh_Hmong","Hmng","Palmyrene","Palm","Pau_Cin_Hau","Pauc","Phags_Pa","Phag","Phoenician","Phnx","Psalter_Pahlavi","Phlp","Rejang","Rjng","Runic","Runr","Samaritan","Samr","Saurashtra","Saur","Sharada","Shrd","Shavian","Shaw","Siddham","Sidd","SignWriting","Sgnw","Sinhala","Sinh","Sora_Sompeng","Sora","Soyombo","Soyo","Sundanese","Sund","Syloti_Nagri","Sylo","Syriac","Syrc","Tagalog","Tglg","Tagbanwa","Tagb","Tai_Le","Tale","Tai_Tham","Lana","Tai_Viet","Tavt","Takri","Takr","Tamil","Taml","Tangut","Tang","Telugu","Telu","Thaana","Thaa","Thai","Tibetan","Tibt","Tifinagh","Tfng","Tirhuta","Tirh","Ugaritic","Ugar","Vai","Vaii","Warang_Citi","Wara","Yi","Yiii","Zanabazar_Square","Zanb"]};Array.prototype.push.apply(ft.$LONE,ft.General_Category),ft.gc=ft.General_Category,ft.sc=ft.Script_Extensions=ft.scx=ft.Script;var dt=X.prototype,mt=function(t){this.parser=t,this.validFlags="gim"+(t.options.ecmaVersion>=6?"uy":"")+(t.options.ecmaVersion>=9?"s":""),this.source="",this.flags="",this.start=0,this.switchU=!1,this.switchN=!1,this.pos=0,this.lastIntValue=0,this.lastStringValue="",this.lastAssertionIsQuantifiable=!1,this.numCapturingParens=0,this.maxBackReference=0,this.groupNames=[],this.backReferenceNames=[]};function gt(t){return t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10),56320+(1023&t)))}function xt(t){return 36===t||t>=40&&t<=43||46===t||63===t||t>=91&&t<=94||t>=123&&t<=125}function yt(t){return t>=65&&t<=90||t>=97&&t<=122}function Tt(t){return yt(t)||95===t}function _t(t){return Tt(t)||Et(t)}function Et(t){return t>=48&&t<=57}function bt(t){return t>=48&&t<=57||t>=65&&t<=70||t>=97&&t<=102}function vt(t){return t>=65&&t<=70?t-65+10:t>=97&&t<=102?t-97+10:t-48}function St(t){return t>=48&&t<=55}mt.prototype.reset=function(t,e,r){var n=-1!==r.indexOf("u");this.start=0|t,this.source=e+"",this.flags=r,this.switchU=n&&this.parser.options.ecmaVersion>=6,this.switchN=n&&this.parser.options.ecmaVersion>=9},mt.prototype.raise=function(t){this.parser.raiseRecoverable(this.start,"Invalid regular expression: /"+this.source+"/: "+t)},mt.prototype.at=function(t){var e=this.source,r=e.length;if(t>=r)return-1;var n=e.charCodeAt(t);return!this.switchU||n<=55295||n>=57344||t+1>=r?n:(n<<10)+e.charCodeAt(t+1)-56613888},mt.prototype.nextIndex=function(t){var e=this.source,r=e.length;if(t>=r)return r;var n=e.charCodeAt(t);return!this.switchU||n<=55295||n>=57344||t+1>=r?t+1:t+2},mt.prototype.current=function(){return this.at(this.pos)},mt.prototype.lookahead=function(){return this.at(this.nextIndex(this.pos))},mt.prototype.advance=function(){this.pos=this.nextIndex(this.pos)},mt.prototype.eat=function(t){return this.current()===t&&(this.advance(),!0)},dt.validateRegExpFlags=function(t){for(var e=t.validFlags,r=t.flags,n=0;n<r.length;n++){var s=r.charAt(n);-1===e.indexOf(s)&&this.raise(t.start,"Invalid regular expression flag"),r.indexOf(s,n+1)>-1&&this.raise(t.start,"Duplicate regular expression flag")}},dt.validateRegExpPattern=function(t){this.regexp_pattern(t),!t.switchN&&this.options.ecmaVersion>=9&&t.groupNames.length>0&&(t.switchN=!0,this.regexp_pattern(t))},dt.regexp_pattern=function(t){t.pos=0,t.lastIntValue=0,t.lastStringValue="",t.lastAssertionIsQuantifiable=!1,t.numCapturingParens=0,t.maxBackReference=0,t.groupNames.length=0,t.backReferenceNames.length=0,this.regexp_disjunction(t),t.pos!==t.source.length&&(t.eat(41)&&t.raise("Unmatched ')'"),(t.eat(93)||t.eat(125))&&t.raise("Lone quantifier brackets")),t.maxBackReference>t.numCapturingParens&&t.raise("Invalid escape");for(var e=0,r=t.backReferenceNames;e<r.length;e+=1){var n=r[e];-1===t.groupNames.indexOf(n)&&t.raise("Invalid named capture referenced")}},dt.regexp_disjunction=function(t){for(this.regexp_alternative(t);t.eat(124);)this.regexp_alternative(t);this.regexp_eatQuantifier(t,!0)&&t.raise("Nothing to repeat"),t.eat(123)&&t.raise("Lone quantifier brackets")},dt.regexp_alternative=function(t){for(;t.pos<t.source.length&&this.regexp_eatTerm(t););},dt.regexp_eatTerm=function(t){return this.regexp_eatAssertion(t)?(t.lastAssertionIsQuantifiable&&this.regexp_eatQuantifier(t)&&t.switchU&&t.raise("Invalid quantifier"),!0):!(t.switchU?!this.regexp_eatAtom(t):!this.regexp_eatExtendedAtom(t))&&(this.regexp_eatQuantifier(t),!0)},dt.regexp_eatAssertion=function(t){var e=t.pos;if(t.lastAssertionIsQuantifiable=!1,t.eat(94)||t.eat(36))return!0;if(t.eat(92)){if(t.eat(66)||t.eat(98))return!0;t.pos=e}if(t.eat(40)&&t.eat(63)){var r=!1;if(this.options.ecmaVersion>=9&&(r=t.eat(60)),t.eat(61)||t.eat(33))return this.regexp_disjunction(t),t.eat(41)||t.raise("Unterminated group"),t.lastAssertionIsQuantifiable=!r,!0}return t.pos=e,!1},dt.regexp_eatQuantifier=function(t,e){return void 0===e&&(e=!1),!!this.regexp_eatQuantifierPrefix(t,e)&&(t.eat(63),!0)},dt.regexp_eatQuantifierPrefix=function(t,e){return t.eat(42)||t.eat(43)||t.eat(63)||this.regexp_eatBracedQuantifier(t,e)},dt.regexp_eatBracedQuantifier=function(t,e){var r=t.pos;if(t.eat(123)){var n=0,s=-1;if(this.regexp_eatDecimalDigits(t)&&(n=t.lastIntValue,t.eat(44)&&this.regexp_eatDecimalDigits(t)&&(s=t.lastIntValue),t.eat(125)))return-1!==s&&s<n&&!e&&t.raise("numbers out of order in {} quantifier"),!0;t.switchU&&!e&&t.raise("Incomplete quantifier"),t.pos=r}return!1},dt.regexp_eatAtom=function(t){return this.regexp_eatPatternCharacters(t)||t.eat(46)||this.regexp_eatReverseSolidusAtomEscape(t)||this.regexp_eatCharacterClass(t)||this.regexp_eatUncapturingGroup(t)||this.regexp_eatCapturingGroup(t)},dt.regexp_eatReverseSolidusAtomEscape=function(t){var e=t.pos;if(t.eat(92)){if(this.regexp_eatAtomEscape(t))return!0;t.pos=e}return!1},dt.regexp_eatUncapturingGroup=function(t){var e=t.pos;if(t.eat(40)){if(t.eat(63)&&t.eat(58)){if(this.regexp_disjunction(t),t.eat(41))return!0;t.raise("Unterminated group")}t.pos=e}return!1},dt.regexp_eatCapturingGroup=function(t){if(t.eat(40)){if(this.options.ecmaVersion>=9?this.regexp_groupSpecifier(t):63===t.current()&&t.raise("Invalid group"),this.regexp_disjunction(t),t.eat(41))return t.numCapturingParens+=1,!0;t.raise("Unterminated group")}return!1},dt.regexp_eatExtendedAtom=function(t){return t.eat(46)||this.regexp_eatReverseSolidusAtomEscape(t)||this.regexp_eatCharacterClass(t)||this.regexp_eatUncapturingGroup(t)||this.regexp_eatCapturingGroup(t)||this.regexp_eatInvalidBracedQuantifier(t)||this.regexp_eatExtendedPatternCharacter(t)},dt.regexp_eatInvalidBracedQuantifier=function(t){return this.regexp_eatBracedQuantifier(t,!0)&&t.raise("Nothing to repeat"),!1},dt.regexp_eatSyntaxCharacter=function(t){var e=t.current();return!!xt(e)&&(t.lastIntValue=e,t.advance(),!0)},dt.regexp_eatPatternCharacters=function(t){for(var e=t.pos,r=0;-1!==(r=t.current())&&!xt(r);)t.advance();return t.pos!==e},dt.regexp_eatExtendedPatternCharacter=function(t){var e=t.current();return!(-1===e||36===e||e>=40&&e<=43||46===e||63===e||91===e||94===e||124===e)&&(t.advance(),!0)},dt.regexp_groupSpecifier=function(t){if(t.eat(63)){if(this.regexp_eatGroupName(t))return-1!==t.groupNames.indexOf(t.lastStringValue)&&t.raise("Duplicate capture group name"),void t.groupNames.push(t.lastStringValue);t.raise("Invalid group")}},dt.regexp_eatGroupName=function(t){if(t.lastStringValue="",t.eat(60)){if(this.regexp_eatRegExpIdentifierName(t)&&t.eat(62))return!0;t.raise("Invalid capture group name")}return!1},dt.regexp_eatRegExpIdentifierName=function(t){if(t.lastStringValue="",this.regexp_eatRegExpIdentifierStart(t)){for(t.lastStringValue+=gt(t.lastIntValue);this.regexp_eatRegExpIdentifierPart(t);)t.lastStringValue+=gt(t.lastIntValue);return!0}return!1},dt.regexp_eatRegExpIdentifierStart=function(t){var e=t.pos,r=t.current();return t.advance(),92===r&&this.regexp_eatRegExpUnicodeEscapeSequence(t)&&(r=t.lastIntValue),function(t){return d(t,!0)||36===t||95===t}(r)?(t.lastIntValue=r,!0):(t.pos=e,!1)},dt.regexp_eatRegExpIdentifierPart=function(t){var e=t.pos,r=t.current();return t.advance(),92===r&&this.regexp_eatRegExpUnicodeEscapeSequence(t)&&(r=t.lastIntValue),function(t){return m(t,!0)||36===t||95===t||8204===t||8205===t}(r)?(t.lastIntValue=r,!0):(t.pos=e,!1)},dt.regexp_eatAtomEscape=function(t){return!!(this.regexp_eatBackReference(t)||this.regexp_eatCharacterClassEscape(t)||this.regexp_eatCharacterEscape(t)||t.switchN&&this.regexp_eatKGroupName(t))||(t.switchU&&(99===t.current()&&t.raise("Invalid unicode escape"),t.raise("Invalid escape")),!1)},dt.regexp_eatBackReference=function(t){var e=t.pos;if(this.regexp_eatDecimalEscape(t)){var r=t.lastIntValue;if(t.switchU)return r>t.maxBackReference&&(t.maxBackReference=r),!0;if(r<=t.numCapturingParens)return!0;t.pos=e}return!1},dt.regexp_eatKGroupName=function(t){if(t.eat(107)){if(this.regexp_eatGroupName(t))return t.backReferenceNames.push(t.lastStringValue),!0;t.raise("Invalid named reference")}return!1},dt.regexp_eatCharacterEscape=function(t){return this.regexp_eatControlEscape(t)||this.regexp_eatCControlLetter(t)||this.regexp_eatZero(t)||this.regexp_eatHexEscapeSequence(t)||this.regexp_eatRegExpUnicodeEscapeSequence(t)||!t.switchU&&this.regexp_eatLegacyOctalEscapeSequence(t)||this.regexp_eatIdentityEscape(t)},dt.regexp_eatCControlLetter=function(t){var e=t.pos;if(t.eat(99)){if(this.regexp_eatControlLetter(t))return!0;t.pos=e}return!1},dt.regexp_eatZero=function(t){return 48===t.current()&&!Et(t.lookahead())&&(t.lastIntValue=0,t.advance(),!0)},dt.regexp_eatControlEscape=function(t){var e=t.current();return 116===e?(t.lastIntValue=9,t.advance(),!0):110===e?(t.lastIntValue=10,t.advance(),!0):118===e?(t.lastIntValue=11,t.advance(),!0):102===e?(t.lastIntValue=12,t.advance(),!0):114===e&&(t.lastIntValue=13,t.advance(),!0)},dt.regexp_eatControlLetter=function(t){var e=t.current();return!!yt(e)&&(t.lastIntValue=e%32,t.advance(),!0)},dt.regexp_eatRegExpUnicodeEscapeSequence=function(t){var e,r=t.pos;if(t.eat(117)){if(this.regexp_eatFixedHexDigits(t,4)){var n=t.lastIntValue;if(t.switchU&&n>=55296&&n<=56319){var s=t.pos;if(t.eat(92)&&t.eat(117)&&this.regexp_eatFixedHexDigits(t,4)){var i=t.lastIntValue;if(i>=56320&&i<=57343)return t.lastIntValue=1024*(n-55296)+(i-56320)+65536,!0}t.pos=s,t.lastIntValue=n}return!0}if(t.switchU&&t.eat(123)&&this.regexp_eatHexDigits(t)&&t.eat(125)&&((e=t.lastIntValue)>=0&&e<=1114111))return!0;t.switchU&&t.raise("Invalid unicode escape"),t.pos=r}return!1},dt.regexp_eatIdentityEscape=function(t){if(t.switchU)return!!this.regexp_eatSyntaxCharacter(t)||!!t.eat(47)&&(t.lastIntValue=47,!0);var e=t.current();return!(99===e||t.switchN&&107===e)&&(t.lastIntValue=e,t.advance(),!0)},dt.regexp_eatDecimalEscape=function(t){t.lastIntValue=0;var e=t.current();if(e>=49&&e<=57){do{t.lastIntValue=10*t.lastIntValue+(e-48),t.advance()}while((e=t.current())>=48&&e<=57);return!0}return!1},dt.regexp_eatCharacterClassEscape=function(t){var e=t.current();if(function(t){return 100===t||68===t||115===t||83===t||119===t||87===t}(e))return t.lastIntValue=-1,t.advance(),!0;if(t.switchU&&this.options.ecmaVersion>=9&&(80===e||112===e)){if(t.lastIntValue=-1,t.advance(),t.eat(123)&&this.regexp_eatUnicodePropertyValueExpression(t)&&t.eat(125))return!0;t.raise("Invalid property name")}return!1},dt.regexp_eatUnicodePropertyValueExpression=function(t){var e=t.pos;if(this.regexp_eatUnicodePropertyName(t)&&t.eat(61)){var r=t.lastStringValue;if(this.regexp_eatUnicodePropertyValue(t)){var n=t.lastStringValue;return this.regexp_validateUnicodePropertyNameAndValue(t,r,n),!0}}if(t.pos=e,this.regexp_eatLoneUnicodePropertyNameOrValue(t)){var s=t.lastStringValue;return this.regexp_validateUnicodePropertyNameOrValue(t,s),!0}return!1},dt.regexp_validateUnicodePropertyNameAndValue=function(t,e,r){ft.hasOwnProperty(e)&&-1!==ft[e].indexOf(r)||t.raise("Invalid property name")},dt.regexp_validateUnicodePropertyNameOrValue=function(t,e){-1===ft.$LONE.indexOf(e)&&t.raise("Invalid property name")},dt.regexp_eatUnicodePropertyName=function(t){var e=0;for(t.lastStringValue="";Tt(e=t.current());)t.lastStringValue+=gt(e),t.advance();return""!==t.lastStringValue},dt.regexp_eatUnicodePropertyValue=function(t){var e=0;for(t.lastStringValue="";_t(e=t.current());)t.lastStringValue+=gt(e),t.advance();return""!==t.lastStringValue},dt.regexp_eatLoneUnicodePropertyNameOrValue=function(t){return this.regexp_eatUnicodePropertyValue(t)},dt.regexp_eatCharacterClass=function(t){if(t.eat(91)){if(t.eat(94),this.regexp_classRanges(t),t.eat(93))return!0;t.raise("Unterminated character class")}return!1},dt.regexp_classRanges=function(t){for(;this.regexp_eatClassAtom(t);){var e=t.lastIntValue;if(t.eat(45)&&this.regexp_eatClassAtom(t)){var r=t.lastIntValue;!t.switchU||-1!==e&&-1!==r||t.raise("Invalid character class"),-1!==e&&-1!==r&&e>r&&t.raise("Range out of order in character class")}}},dt.regexp_eatClassAtom=function(t){var e=t.pos;if(t.eat(92)){if(this.regexp_eatClassEscape(t))return!0;if(t.switchU){var r=t.current();(99===r||St(r))&&t.raise("Invalid class escape"),t.raise("Invalid escape")}t.pos=e}var n=t.current();return 93!==n&&(t.lastIntValue=n,t.advance(),!0)},dt.regexp_eatClassEscape=function(t){var e=t.pos;if(t.eat(98))return t.lastIntValue=8,!0;if(t.switchU&&t.eat(45))return t.lastIntValue=45,!0;if(!t.switchU&&t.eat(99)){if(this.regexp_eatClassControlLetter(t))return!0;t.pos=e}return this.regexp_eatCharacterClassEscape(t)||this.regexp_eatCharacterEscape(t)},dt.regexp_eatClassControlLetter=function(t){var e=t.current();return!(!Et(e)&&95!==e)&&(t.lastIntValue=e%32,t.advance(),!0)},dt.regexp_eatHexEscapeSequence=function(t){var e=t.pos;if(t.eat(120)){if(this.regexp_eatFixedHexDigits(t,2))return!0;t.switchU&&t.raise("Invalid escape"),t.pos=e}return!1},dt.regexp_eatDecimalDigits=function(t){var e=t.pos,r=0;for(t.lastIntValue=0;Et(r=t.current());)t.lastIntValue=10*t.lastIntValue+(r-48),t.advance();return t.pos!==e},dt.regexp_eatHexDigits=function(t){var e=t.pos,r=0;for(t.lastIntValue=0;bt(r=t.current());)t.lastIntValue=16*t.lastIntValue+vt(r),t.advance();return t.pos!==e},dt.regexp_eatLegacyOctalEscapeSequence=function(t){if(this.regexp_eatOctalDigit(t)){var e=t.lastIntValue;if(this.regexp_eatOctalDigit(t)){var r=t.lastIntValue;e<=3&&this.regexp_eatOctalDigit(t)?t.lastIntValue=64*e+8*r+t.lastIntValue:t.lastIntValue=8*e+r}else t.lastIntValue=e;return!0}return!1},dt.regexp_eatOctalDigit=function(t){var e=t.current();return St(e)?(t.lastIntValue=e-48,t.advance(),!0):(t.lastIntValue=0,!1)},dt.regexp_eatFixedHexDigits=function(t,e){var r=t.pos;t.lastIntValue=0;for(var n=0;n<e;++n){var s=t.current();if(!bt(s))return t.pos=r,!1;t.lastIntValue=16*t.lastIntValue+vt(s),t.advance()}return!0};var At=function(t){this.type=t.type,this.value=t.value,this.start=t.start,this.end=t.end,t.options.locations&&(this.loc=new O(t,t.startLoc,t.endLoc)),t.options.ranges&&(this.range=[t.start,t.end])},Rt=X.prototype;function wt(t){return t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10),56320+(1023&t)))}Rt.next=function(){this.options.onToken&&this.options.onToken(new At(this)),this.lastTokEnd=this.end,this.lastTokStart=this.start,this.lastTokEndLoc=this.endLoc,this.lastTokStartLoc=this.startLoc,this.nextToken()},Rt.getToken=function(){return this.next(),new At(this)},"undefined"!=typeof Symbol&&(Rt[Symbol.iterator]=function(){var t=this;return{next:function(){var e=t.getToken();return{done:e.type===b.eof,value:e}}}}),Rt.curContext=function(){return this.context[this.context.length-1]},Rt.nextToken=function(){var t=this.curContext();return t&&t.preserveSpace||this.skipSpace(),this.start=this.pos,this.options.locations&&(this.startLoc=this.curPosition()),this.pos>=this.input.length?this.finishToken(b.eof):t.override?t.override(this):void this.readToken(this.fullCharCodeAtPos())},Rt.readToken=function(t){return d(t,this.options.ecmaVersion>=6)||92===t?this.readWord():this.getTokenFromCode(t)},Rt.fullCharCodeAtPos=function(){var t=this.input.charCodeAt(this.pos);return t<=55295||t>=57344?t:(t<<10)+this.input.charCodeAt(this.pos+1)-56613888},Rt.skipBlockComment=function(){var t,e=this.options.onComment&&this.curPosition(),r=this.pos,n=this.input.indexOf("*/",this.pos+=2);if(-1===n&&this.raise(this.pos-2,"Unterminated comment"),this.pos=n+2,this.options.locations)for(S.lastIndex=r;(t=S.exec(this.input))&&t.index<this.pos;)++this.curLine,this.lineStart=t.index+t[0].length;this.options.onComment&&this.options.onComment(!0,this.input.slice(r+2,n),r,this.pos,e,this.curPosition())},Rt.skipLineComment=function(t){for(var e=this.pos,r=this.options.onComment&&this.curPosition(),n=this.input.charCodeAt(this.pos+=t);this.pos<this.input.length&&!A(n);)n=this.input.charCodeAt(++this.pos);this.options.onComment&&this.options.onComment(!1,this.input.slice(e+t,this.pos),e,this.pos,r,this.curPosition())},Rt.skipSpace=function(){t:for(;this.pos<this.input.length;){var t=this.input.charCodeAt(this.pos);switch(t){case 32:case 160:++this.pos;break;case 13:10===this.input.charCodeAt(this.pos+1)&&++this.pos;case 10:case 8232:case 8233:++this.pos,this.options.locations&&(++this.curLine,this.lineStart=this.pos);break;case 47:switch(this.input.charCodeAt(this.pos+1)){case 42:this.skipBlockComment();break;case 47:this.skipLineComment(2);break;default:break t}break;default:if(!(t>8&&t<14||t>=5760&&R.test(String.fromCharCode(t))))break t;++this.pos}}},Rt.finishToken=function(t,e){this.end=this.pos,this.options.locations&&(this.endLoc=this.curPosition());var r=this.type;this.type=t,this.value=e,this.updateContext(r)},Rt.readToken_dot=function(){var t=this.input.charCodeAt(this.pos+1);if(t>=48&&t<=57)return this.readNumber(!0);var e=this.input.charCodeAt(this.pos+2);return this.options.ecmaVersion>=6&&46===t&&46===e?(this.pos+=3,this.finishToken(b.ellipsis)):(++this.pos,this.finishToken(b.dot))},Rt.readToken_slash=function(){var t=this.input.charCodeAt(this.pos+1);return this.exprAllowed?(++this.pos,this.readRegexp()):61===t?this.finishOp(b.assign,2):this.finishOp(b.slash,1)},Rt.readToken_mult_modulo_exp=function(t){var e=this.input.charCodeAt(this.pos+1),r=1,n=42===t?b.star:b.modulo;return this.options.ecmaVersion>=7&&42===t&&42===e&&(++r,n=b.starstar,e=this.input.charCodeAt(this.pos+2)),61===e?this.finishOp(b.assign,r+1):this.finishOp(n,r)},Rt.readToken_pipe_amp=function(t){var e=this.input.charCodeAt(this.pos+1);return e===t?this.finishOp(124===t?b.logicalOR:b.logicalAND,2):61===e?this.finishOp(b.assign,2):this.finishOp(124===t?b.bitwiseOR:b.bitwiseAND,1)},Rt.readToken_caret=function(){return 61===this.input.charCodeAt(this.pos+1)?this.finishOp(b.assign,2):this.finishOp(b.bitwiseXOR,1)},Rt.readToken_plus_min=function(t){var e=this.input.charCodeAt(this.pos+1);return e===t?45!==e||this.inModule||62!==this.input.charCodeAt(this.pos+2)||0!==this.lastTokEnd&&!v.test(this.input.slice(this.lastTokEnd,this.pos))?this.finishOp(b.incDec,2):(this.skipLineComment(3),this.skipSpace(),this.nextToken()):61===e?this.finishOp(b.assign,2):this.finishOp(b.plusMin,1)},Rt.readToken_lt_gt=function(t){var e=this.input.charCodeAt(this.pos+1),r=1;return e===t?(r=62===t&&62===this.input.charCodeAt(this.pos+2)?3:2,61===this.input.charCodeAt(this.pos+r)?this.finishOp(b.assign,r+1):this.finishOp(b.bitShift,r)):33!==e||60!==t||this.inModule||45!==this.input.charCodeAt(this.pos+2)||45!==this.input.charCodeAt(this.pos+3)?(61===e&&(r=2),this.finishOp(b.relational,r)):(this.skipLineComment(4),this.skipSpace(),this.nextToken())},Rt.readToken_eq_excl=function(t){var e=this.input.charCodeAt(this.pos+1);return 61===e?this.finishOp(b.equality,61===this.input.charCodeAt(this.pos+2)?3:2):61===t&&62===e&&this.options.ecmaVersion>=6?(this.pos+=2,this.finishToken(b.arrow)):this.finishOp(61===t?b.eq:b.prefix,1)},Rt.getTokenFromCode=function(t){switch(t){case 46:return this.readToken_dot();case 40:return++this.pos,this.finishToken(b.parenL);case 41:return++this.pos,this.finishToken(b.parenR);case 59:return++this.pos,this.finishToken(b.semi);case 44:return++this.pos,this.finishToken(b.comma);case 91:return++this.pos,this.finishToken(b.bracketL);case 93:return++this.pos,this.finishToken(b.bracketR);case 123:return++this.pos,this.finishToken(b.braceL);case 125:return++this.pos,this.finishToken(b.braceR);case 58:return++this.pos,this.finishToken(b.colon);case 63:return++this.pos,this.finishToken(b.question);case 96:if(this.options.ecmaVersion<6)break;return++this.pos,this.finishToken(b.backQuote);case 48:var e=this.input.charCodeAt(this.pos+1);if(120===e||88===e)return this.readRadixNumber(16);if(this.options.ecmaVersion>=6){if(111===e||79===e)return this.readRadixNumber(8);if(98===e||66===e)return this.readRadixNumber(2)}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return this.readNumber(!1);case 34:case 39:return this.readString(t);case 47:return this.readToken_slash();case 37:case 42:return this.readToken_mult_modulo_exp(t);case 124:case 38:return this.readToken_pipe_amp(t);case 94:return this.readToken_caret();case 43:case 45:return this.readToken_plus_min(t);case 60:case 62:return this.readToken_lt_gt(t);case 61:case 33:return this.readToken_eq_excl(t);case 126:return this.finishOp(b.prefix,1)}this.raise(this.pos,"Unexpected character '"+wt(t)+"'")},Rt.finishOp=function(t,e){var r=this.input.slice(this.pos,this.pos+e);return this.pos+=e,this.finishToken(t,r)},Rt.readRegexp=function(){for(var t,e,r=this.pos;;){this.pos>=this.input.length&&this.raise(r,"Unterminated regular expression");var n=this.input.charAt(this.pos);if(v.test(n)&&this.raise(r,"Unterminated regular expression"),t)t=!1;else{if("["===n)e=!0;else if("]"===n&&e)e=!1;else if("/"===n&&!e)break;t="\\"===n}++this.pos}var s=this.input.slice(r,this.pos);++this.pos;var i=this.pos,a=this.readWord1();this.containsEsc&&this.unexpected(i);var o=this.regexpState||(this.regexpState=new mt(this));o.reset(r,s,a),this.validateRegExpFlags(o),this.validateRegExpPattern(o);var u=null;try{u=new RegExp(s,a)}catch(t){}return this.finishToken(b.regexp,{pattern:s,flags:a,value:u})},Rt.readInt=function(t,e){for(var r=this.pos,n=0,s=0,i=null==e?1/0:e;s<i;++s){var a=this.input.charCodeAt(this.pos),o=void 0;if((o=a>=97?a-97+10:a>=65?a-65+10:a>=48&&a<=57?a-48:1/0)>=t)break;++this.pos,n=n*t+o}return this.pos===r||null!=e&&this.pos-r!==e?null:n},Rt.readRadixNumber=function(t){this.pos+=2;var e=this.readInt(t);return null==e&&this.raise(this.start+2,"Expected number in radix "+t),d(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(b.num,e)},Rt.readNumber=function(t){var e=this.pos;t||null!==this.readInt(10)||this.raise(e,"Invalid number");var r=this.pos-e>=2&&48===this.input.charCodeAt(e);r&&this.strict&&this.raise(e,"Invalid number"),r&&/[89]/.test(this.input.slice(e,this.pos))&&(r=!1);var n=this.input.charCodeAt(this.pos);46!==n||r||(++this.pos,this.readInt(10),n=this.input.charCodeAt(this.pos)),69!==n&&101!==n||r||(43!==(n=this.input.charCodeAt(++this.pos))&&45!==n||++this.pos,null===this.readInt(10)&&this.raise(e,"Invalid number")),d(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number");var s=this.input.slice(e,this.pos),i=r?parseInt(s,8):parseFloat(s);return this.finishToken(b.num,i)},Rt.readCodePoint=function(){var t;if(123===this.input.charCodeAt(this.pos)){this.options.ecmaVersion<6&&this.unexpected();var e=++this.pos;t=this.readHexChar(this.input.indexOf("}",this.pos)-this.pos),++this.pos,t>1114111&&this.invalidStringToken(e,"Code point out of bounds")}else t=this.readHexChar(4);return t},Rt.readString=function(t){for(var e="",r=++this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated string constant");var n=this.input.charCodeAt(this.pos);if(n===t)break;92===n?(e+=this.input.slice(r,this.pos),e+=this.readEscapedChar(!1),r=this.pos):(A(n,this.options.ecmaVersion>=10)&&this.raise(this.start,"Unterminated string constant"),++this.pos)}return e+=this.input.slice(r,this.pos++),this.finishToken(b.string,e)};var Dt={};Rt.tryReadTemplateToken=function(){this.inTemplateElement=!0;try{this.readTmplToken()}catch(t){if(t!==Dt)throw t;this.readInvalidTemplateToken()}this.inTemplateElement=!1},Rt.invalidStringToken=function(t,e){if(this.inTemplateElement&&this.options.ecmaVersion>=9)throw Dt;this.raise(t,e)},Rt.readTmplToken=function(){for(var t="",e=this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated template");var r=this.input.charCodeAt(this.pos);if(96===r||36===r&&123===this.input.charCodeAt(this.pos+1))return this.pos!==this.start||this.type!==b.template&&this.type!==b.invalidTemplate?(t+=this.input.slice(e,this.pos),this.finishToken(b.template,t)):36===r?(this.pos+=2,this.finishToken(b.dollarBraceL)):(++this.pos,this.finishToken(b.backQuote));if(92===r)t+=this.input.slice(e,this.pos),t+=this.readEscapedChar(!0),e=this.pos;else if(A(r)){switch(t+=this.input.slice(e,this.pos),++this.pos,r){case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:t+="\n";break;default:t+=String.fromCharCode(r)}this.options.locations&&(++this.curLine,this.lineStart=this.pos),e=this.pos}else++this.pos}},Rt.readInvalidTemplateToken=function(){for(;this.pos<this.input.length;this.pos++)switch(this.input[this.pos]){case"\\":++this.pos;break;case"$":if("{"!==this.input[this.pos+1])break;case"`":return this.finishToken(b.invalidTemplate,this.input.slice(this.start,this.pos))}this.raise(this.start,"Unterminated template")},Rt.readEscapedChar=function(t){var e=this.input.charCodeAt(++this.pos);switch(++this.pos,e){case 110:return"\n";case 114:return"\r";case 120:return String.fromCharCode(this.readHexChar(2));case 117:return wt(this.readCodePoint());case 116:return"\t";case 98:return"\b";case 118:return"\v";case 102:return"\f";case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:return this.options.locations&&(this.lineStart=this.pos,++this.curLine),"";default:if(e>=48&&e<=55){var r=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0],n=parseInt(r,8);return n>255&&(r=r.slice(0,-1),n=parseInt(r,8)),this.pos+=r.length-1,e=this.input.charCodeAt(this.pos),"0"===r&&56!==e&&57!==e||!this.strict&&!t||this.invalidStringToken(this.pos-1-r.length,t?"Octal literal in template string":"Octal literal in strict mode"),String.fromCharCode(n)}return A(e)?"":String.fromCharCode(e)}},Rt.readHexChar=function(t){var e=this.pos,r=this.readInt(16,t);return null===r&&this.invalidStringToken(e,"Bad character escape sequence"),r},Rt.readWord1=function(){this.containsEsc=!1;for(var t="",e=!0,r=this.pos,n=this.options.ecmaVersion>=6;this.pos<this.input.length;){var s=this.fullCharCodeAtPos();if(m(s,n))this.pos+=s<=65535?1:2;else{if(92!==s)break;this.containsEsc=!0,t+=this.input.slice(r,this.pos);var i=this.pos;117!==this.input.charCodeAt(++this.pos)&&this.invalidStringToken(this.pos,"Expecting Unicode escape sequence \\uXXXX"),++this.pos;var a=this.readCodePoint();(e?d:m)(a,n)||this.invalidStringToken(i,"Invalid Unicode escape"),t+=wt(a),r=this.pos}e=!1}return t+this.input.slice(r,this.pos)},Rt.readWord=function(){var t=this.readWord1(),e=b.name;return this.keywords.test(t)&&(this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword "+t),e=_[t]),this.finishToken(e,t)};var kt="6.0.6";function Ft(t,e){return X.parse(t,e)}function It(t,e,r){return X.parseExpressionAt(t,e,r)}function Nt(t,e){return X.tokenizer(t,e)}},function(t,e,r){const{utils:n}=r(2),{kernelRunShortcut:s}=r(12);function i(t){return/^function /.test(t)&&(t=t.substring(9)),t.replace(/[_]typeof/g,"typeof")}function a(t){return t.replace(/^[A-Za-z]+/,"function").replace(/[_]typeof/g,"typeof")}t.exports={cpuKernelString:function(t,e){return`() => {\n    ${s.toString()};\n    const utils = {\n      allPropertiesOf: ${a(n.allPropertiesOf.toString())},\n      clone: ${a(n.clone.toString())},\n    };\n    let Input = function() {};\n    class ${e||"Kernel"} {\n      constructor() {        \n        this.argumentsLength = 0;\n        this.canvas = null;\n        this.context = null;\n        this.built = false;\n        this.program = null;\n        this.argumentNames = ${JSON.stringify(t.argumentNames)};\n        this.argumentTypes = ${JSON.stringify(t.argumentTypes)};\n        this.argumentSizes = ${JSON.stringify(t.argumentSizes)};\n        this.output = ${JSON.stringify(t.output)};\n        this._kernelString = \`${t._kernelString}\`;\n        this.output = ${JSON.stringify(t.output)};\n\t\t    this.run = function() {\n          this.run = null;\n          this.build(arguments);\n          return this.run.apply(this, arguments);\n        }.bind(this);\n        this.thread = {\n          x: 0,\n          y: 0,\n          z: 0\n        };\n      }\n      setCanvas(canvas) { this.canvas = canvas; return this; }\n      setContext(context) { this.context = context; return this; }\n      setInput(Type) { Input = Type; }\n      ${i(t.build.toString())}\n      setupArguments() {}\n      ${i(t.setupConstants.toString())}\n      translateSource() {}\n      pickRenderStrategy() {}\n      run () { ${t.kernelString} }\n      getKernelString() { return this._kernelString; }\n      ${i(t.validateSettings.toString())}\n      ${i(t.checkOutput.toString())}\n    };\n    return kernelRunShortcut(new Kernel());\n  };`}}},function(t,e,r){"use strict";t.exports=function(t,e,r){if(e|=0,!((t|=0)>0&&e>0))return null;var n,s=document.createElement("canvas");if(!s)return null;s.width=t,s.height=e;try{n=s.getContext("webgl",r)}catch(t){try{n=s.getContext("experimental-webgl",r)}catch(t){return null}}var i=n.getExtension,a={destroy:function(){var t=i.call(n,"WEBGL_lose_context");t&&t.loseContext()}},o={resize:function(t,e){s.width=t,s.height=e}},u=n.getSupportedExtensions().slice();return u.push("STACKGL_destroy_context","STACKGL_resize_drawingbuffer"),n.getSupportedExtensions=function(){return u.slice()},n.getExtension=function(t){var e=t.toLowerCase();return"stackgl_resize_drawingbuffer"===e?o:"stackgl_destroy_context"===e?a:i.call(n,t)},n||null}},function(t,e){t.exports={name:"triangle-noise-noise",onBeforeRun:t=>{t.setUniform1f("triangle_noise_seed",Math.random())},functionMatch:"Math.random()",functionReplace:"n4rand(vTexCoord)",functionReturnType:"Number",source:"\n\nuniform highp float triangle_noise_seed;\nhighp float triangle_noise_shift = 0.000001;\n\n//https://www.shadertoy.com/view/4t2SDh\n//note: uniformly distributed, normalized rand, [0;1[\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n//note: remaps v to [0;1] in interval [a;b]\nfloat remap( float a, float b, float v )\n{\n\treturn clamp( (v-a) / (b-a), 0.0, 1.0 );\n}\n\nfloat n4rand( vec2 n )\n{\n\tfloat t = fract( triangle_noise_seed + triangle_noise_shift );\n\tfloat nrnd0 = nrand( n + 0.07*t );\n\tfloat nrnd1 = nrand( n + 0.11*t );\t\n\tfloat nrnd2 = nrand( n + 0.13*t );\n\tfloat nrnd3 = nrand( n + 0.17*t );\n\tfloat result = (nrnd0+nrnd1+nrnd2+nrnd3) / 4.0;\n\ttriangle_noise_shift = result + 0.000001;\n\treturn result;\n}"}},function(t,e){t.exports={fragmentShader:"__HEADER__;\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nvarying vec2 vTexCoord;\n\nvec4 round(vec4 x) {\n  return floor(x + 0.5);\n}\n\nfloat round(float x) {\n  return floor(x + 0.5);\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x / y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n\tint channel = integerMod(index, 2);\n\tif (channel == 0) return texel.r * 255.0 + texel.g * 65280.0;\n\tif (channel == 1) return texel.b * 255.0 + texel.a * 65280.0;\n\treturn 0.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n  int channel = integerMod(index, 4);\n  if (channel == 0) return texel.r * 255.0;\n  if (channel == 1) return texel.g * 255.0;\n  if (channel == 2) return texel.b * 255.0;\n  if (channel == 3) return texel.a * 255.0;\n  return 0.0;\n}\n\nvec4 encode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent*0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  if (channel == 0) return texel.r;\n  if (channel == 1) return texel.g;\n  if (channel == 2) return texel.b;\n  if (channel == 3) return texel.a;\n  return 0.0;\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture2D(tex, st / vec2(texSize));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\nvoid color(sampler2D image) {\n  actualColor = texture2D(image, vTexCoord);\n}\n\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}"}},function(t,e){t.exports={vertexShader:"precision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nattribute vec2 aPos;\nattribute vec2 aTexCoord;\n\nvarying vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}"}},function(t,e,r){const{utils:n}=r(2),{kernelRunShortcut:s}=r(12);function i(t){return/^function /.test(t)&&(t=t.substring(9)),t.replace(/[_]typeof/g,"typeof")}function a(t){return t.replace(/^[A-Za-z23]+/,"function").replace(/[_]typeof/g,"typeof")}function o(t){return t?"true":!1===t?"false":"null"}t.exports={webGLKernelString:function(t,e){return`() => {\n    ${s.toString()};\n    const utils = {\n      allPropertiesOf: ${a(n.allPropertiesOf.toString())},\n      clone: ${a(n.clone.toString())},\n      splitArray: ${a(n.splitArray.toString())},\n      getVariableType: ${a(n.getVariableType.toString())},\n      getDimensions: ${a(n.getDimensions.toString())},\n      dimToTexSize: ${a(n.dimToTexSize.toString())},\n      closestSquareDimensions: ${a(n.closestSquareDimensions.toString())},\n      getMemoryOptimizedFloatTextureSize: ${a(n.getMemoryOptimizedFloatTextureSize.toString())},\n      getMemoryOptimizedPackedTextureSize: ${a(n.getMemoryOptimizedPackedTextureSize.toString())},\n      roundTo: ${a(n.roundTo.toString())},\n      flattenTo: ${a(n.flattenTo.toString())},\n      flatten2dArrayTo: ${a(n.flatten2dArrayTo.toString())},\n      flatten3dArrayTo: ${a(n.flatten3dArrayTo.toString())},\n      systemEndianness: ${a(n.getSystemEndianness.toString())},\n      isArray: ${a(n.isArray.toString())}\n    };\n    const canvases = [];\n    const maxTexSizes = {};\n    let Texture = function() {};\n    let Input = function() {}; \n    class ${e||"Kernel"} {\n      constructor() {\n        this.maxTexSize = null;\n        this.argumentsLength = 0;\n        this.constantsLength = 0;\n        this.constantBitRatios = ${t.constantBitRatios?JSON.stringify(t.constantBitRatios):"null"};\n        this.canvas = null;\n        this.context = null;\n        this.program = null;\n        this.subKernels = null;\n        this.subKernelNames = null;\n        this.drawBuffersMap = ${t.drawBuffersMap?JSON.stringify(t.drawBuffersMap):"null"};\n        this.endianness = '${t.endianness}';\n        this.graphical = ${o(t.graphical)};\n        this.optimizeFloatMemory = ${o(t.optimizeFloatMemory)};\n        this.precision = "${t.precision}";\n        // TODO: not sure how to handle\n        this.floatOutputForce = ${o(t.floatOutputForce)};\n        this.hardcodeConstants = ${o(t.hardcodeConstants)};\n        this.pipeline = ${o(t.pipeline)};\n        this.argumentNames = ${JSON.stringify(t.argumentNames)};\n        this.argumentTypes = ${JSON.stringify(t.argumentTypes)};\n        this.argumentBitRatios = ${JSON.stringify(t.argumentBitRatios)};\n       \n        this.texSize = ${JSON.stringify(Array.from(t.texSize))};\n        this.output = ${JSON.stringify(t.output)};\n        this.compiledFragmentShader = \`${t.compiledFragmentShader}\`;\n\t\t    this.compiledVertexShader = \`${t.compiledVertexShader}\`;\n\t\t    this.returnType = '${t.returnType}';\n\t\t    this.programUniformLocationCache = {};\n\t\t    this.textureCache = {};\n\t\t    this.subKernelOutputTextures = null;\n\t\t    this.extensions = {};\n\t\t    this.uniform1fCache = {};\n\t\t    this.uniform1iCache = {};\n\t\t    this.uniform2fCache = {};\n\t\t    this.uniform2fvCache = {};\n\t\t    this.uniform2ivCache = {};\n\t\t    this.uniform3fvCache = {};\n\t\t    this.uniform3ivCache = {};\n      }\n      getFragmentShader() { return this.compiledFragmentShader; }\n      getVertexShader() { return this.compiledVertexShader; }\n      validateSettings() {}\n      initExtensions() {}\n      setupArguments() {}\n      setupConstants() {}\n      setCanvas(canvas) { this.canvas = canvas; return this; }\n      setContext(context) { this.context = context; return this; }\n      setTexture(Type) { Texture = Type; }\n      setInput(Type) { Input = Type; }\n      ${i(t.getUniformLocation.toString())}\n      ${i(t.build.toString())}\n      translateSource() {}\n      pickRenderStrategy() {}\n\t\t  ${i(t.run.toString())}\n\t\t  ${i(t.addArgument.toString())}\n\t\t  ${i(t.formatArrayTransfer.toString())}\n\t\t  ${i(t.checkOutput.toString())}\n\t\t  ${i(t.getArgumentTexture.toString())}\n\t\t  ${i(t.getTextureCache.toString())}\n\t\t  ${i(t.getOutputTexture.toString())}\n\t\t  renderOutput() { ${n.getFunctionBodyFromString(i(t.renderOutput.toString()))} }\n\t\t  ${i(t.readPackedPixelsToFloat32Array.toString())}\n\t\t  ${i(t.readPackedPixelsToUint8Array.toString())}\n\t\t  ${i(t.readFloatPixelsToFloat32Array.toString())}\n\t\t  ${i(t.updateMaxTexSize.toString())}\n\t\t  ${i(t._setupOutputTexture.toString())}\n\t\t  ${i(t.detachTextureCache.toString())}\n\t\t  ${i(t.setUniform1f.toString())}\n\t\t  ${i(t.setUniform1i.toString())}\n\t\t  ${i(t.setUniform2f.toString())}\n\t\t  ${i(t.setUniform2fv.toString())}\n\t\t  ${i(t.setUniform2iv.toString())}\n\t\t  ${i(t.setUniform3fv.toString())}\n\t\t  ${i(t.setUniform3iv.toString())}\n\t\t  getReturnTextureType() { return "${t.getReturnTextureType()}"; }\n    };\n    return kernelRunShortcut(new ${e||"Kernel"}());\n  };`}}},function(t,e){t.exports={fragmentShader:"#version 300 es\n__HEADER__;\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nin vec2 vTexCoord;\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x/y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n  int channel = integerMod(index, 2);\n  return texel[channel*2] * 255.0 + texel[channel*2 + 1] * 65280.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n\tint channel = integerMod(index, 4);\n  return texel[channel] * 255.0;\n}\n\nvec4 encode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0 - exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent * 0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + (texDim.x * (xyz.y + (texDim.y * xyz.z)));\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + (texDim.x * (xyz.y + (texDim.y * xyz.z)));\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + (texDim.x * (xyz.y + (texDim.y * xyz.z)));\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  index = index / 4;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return texel[channel];\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, st / vec2(texSize));\n}\n\nvec4 getImage3D(sampler2DArray tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, vec3(st / vec2(texSize), z));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}"}},function(t,e){t.exports={vertexShader:"#version 300 es\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nin vec2 aPos;\nin vec2 aTexCoord;\n\nout vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}"}},function(t,e,r){const{utils:n}=r(2);t.exports={alias:function(t,e){const r=e.toString();return new Function(`return function ${t} (${n.getArgumentNamesFromString(r).join(", ")}) {\n  ${n.getFunctionBodyFromString(r)}\n}`)()}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=i(r(0)),s=i(r(44));function i(t){return t&&t.__esModule?t:{default:t}}var a=(0,n.default)(function(t,e,r){return(0,s.default)(e,t.__value[r])});e.default=a,t.exports=e.default},function(t,e,r){"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var s=(0,((n=r(0))&&n.__esModule?n:{default:n}).default)(function(t){return[]});e.default=s,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=o(r(0)),s=o(r(20)),i=o(r(7)),a=o(r(38));function o(t){return t&&t.__esModule?t:{default:t}}var u=(0,n.default)(function(t,e,r){return(0,i.default)(function(n,i){return(0,s.default)(function(r,n,s){return r+=(0,a.default)(n*e.__value[s][i],t)},0)(r)})(e.__value[0])});e.default=u,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return Number(Math.round(t+"e"+e)+"e-"+e)},t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n,s=(n=r(7))&&n.__esModule?n:{default:n};e.default=function(t,e){return(0,s.default)(function(t,r){return 1*(e===r)})(t)},t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=s(r(7));function s(t){return t&&t.__esModule?t:{default:t}}var i=(0,s(r(0)).default)(function(t,e){return(0,n.default)(function(r,n){return(t[n]||[]).concat(e[n])})(e)});e.default=i,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function(t,e){return Array.apply(null,Array(t)).map(function(t){return Array.apply(null,Array(e))})},t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,r){return t.createKernel(e).setOutput([r.length,r[0].length])(r)},t.exports=e.default},function(t,e,r){"use strict";r.r(e);var n=r(0);function s(t){return!(null==t)}var i=r(1),a=Object(i.a)("Number"),o=Object(n.default)(function(t,e){return t&&e});function u(t){return o(a(t),isNaN(t))}var h=Object(n.default)(function(t,e){return 0===t&&0===e?1/t==1/e:t===e||!(!u(t)||!u(e))}),l=r(3),c=Object(n.default)(function(t){return!t}),p=Object(n.default)(function(t,e){return t||e}),f=Object(i.a)("Object"),d=Object(i.a)("Array"),m=Object(i.a)("Boolean"),g=Object(i.a)("String"),x=Object(i.a)("Date"),y=Object(n.default)(function(t,e){if(t.length!==e.length)return!1;for(let r=0;r<t.length;r++)if(c(_(t[r],e[r])))return!1;return!0}),T=Object(n.default)((t,e)=>{for(let r in t)if(c(_(t[r],e[r])))return!1;for(let r in e)if(c(s(t[r]))&&s(e[r]))return!1;return!0}),_=e.default=Object(n.default)(function(t,e){return!!h(t,e)||Object(l.a)(t)===Object(l.a)(e)&&(!p(c(s(t)),c(s(e)))&&(t.constructor===e.constructor&&(g(t)||m(t)||a(t)||x(t)?h(t.valueOf(),e.valueOf()):d(t)?y(t,e):!!f(t)&&T(t,e))))})},function(t,e,r){"use strict";r.r(e);var n=r(0),s=Object(n.default)(function(t,e){return Array.prototype.concat(t,e)});function i(t,e){return String(t)+String(e)}var a=r(3);e.default=Object(n.default)(function(t,e){return{String:i,Array:s}[Object(a.a)(t)](t,e)})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,