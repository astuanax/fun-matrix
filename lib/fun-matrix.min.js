!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("fun-matrix",[],e):"object"==typeof exports?exports["fun-matrix"]=e():t["fun-matrix"]=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var u=e[r]={i:r,l:!1,exports:{}};return t[r].call(u.exports,u,u.exports,n),u.l=!0,u.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var u in t)n.d(r,u,function(e){return t[e]}.bind(null,u));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=5)}([function(t,e,n){"use strict";function r(t){const e=t.length;return 0===e?t:n([]);function n(r){return function(){return function(r,u){const o=r.concat(u);return o.length<e?n(o):t.apply(this,o)}(r,Array.prototype.slice.call(arguments))}}}n.r(e),n.d(e,"default",function(){return r})},function(t,e,n){"use strict";var r;e.a=(r=function(t){return Object.prototype.toString.call(t).slice(8,-1)},function(t){return 0===arguments.length?this:r(t)})},function(t,e,n){"use strict";var r=n(0);e.a=Object(r.default)(function(t){return Object.keys(Object(t))})},function(t,e,n){"use strict";n.r(e);var r=n(0),u=Object(r.default)(function(t,e){let n=-1;const r=e.length,u=new Array(r);for(;++n<r;)u[n]=t(e[n],n,e);return u});function o(t){return new t.constructor}var f=n(2),c=Object(r.default)(function(t,e){const n=Object(f.a)(e);let r=-1;const u=n.length,c=o(e);for(;++r<u;)c[n[r]]=t(e[n[r]],n[r],e);return c}),a=Object(r.default)(function(t,e){const n=o(e);return e.forEach((e,r,u)=>{n.set(r,t(e,r,u))}),n}),i=Object(r.default)(function(t,e){let n=-1;const r=e.length;let u="";for(;++n<r;)u+=t(e.charAt(n),n,e);return u}),l=Object(r.default)(function(t,e){let n=[];for(let r=e.next();!0!==r.done;r=e.next())n.push(t(e.value()));return n}),d=n(1);const s=Object(r.default)(function(t,e){return Object(d.a)(e)===t})("Function");e.default=Object(r.default)(function(t,e){switch(Object(d.a)(e)){case"Function":return Object(r.default)(function(){return t.call(this,e.apply(this,arguments))});case"Object":return c(t,e);case"String":return i(t,e);case"Map":return a(t,e);case"Array":return u(t,e);default:return s(e[Symbol.iterator])?l(t,e):u(t,e)}})},function(t,e,n){"use strict";n.r(e);var r=n(0),u=Object(r.default)(function(t,e,n){let r=-1;const u=n.length;let o=e;for(;++r<u;)o=t(o,n[r],r,n);return o}),o=n(2),f=Object(r.default)(function(t,e,n){const r=Object(o.a)(n);let u=-1;const f=r.length;let c=Object(e);for(;++u<f;)c=t(c,n[r[u]],r[u],n);return c}),c=n(1);e.default=Object(r.default)(function(t,e,n){return{Object:f,Array:u}[Object(c.a)(n)](t,e,n)})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=l(n(0)),u=l(n(3)),o=l(n(4)),f=l(n(6)),c=l(n(7)),a=l(n(8)),i=l(n(9));function l(t){return t&&t.__esModule?t:{default:t}}var d=function(t){this.__value=t};d.prototype.type="Matrix",d.of=function(t){return t instanceof d?t:this instanceof d?(this.__value=t,this):new d(t)},d.prototype.map=function(t){return d.of((0,u.default)(t)(this.__value))},d.map=(0,r.default)(function(t,e){return d.of(e).map(t)}),d.prototype.fold=function(t){return d.of((0,o.default)(t,[])(this.__value))},d.fold=(0,r.default)(function(t,e){return d.of(e).fold(t)}),d.prototype.ap=function(t){return d.of(t).map(this.__value)},d.ap=(0,r.default)(function(t,e){return d.of(t).ap(e)}),d.prototype.concat=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:f.default;return d.of(this).map(e(t))},d.concat=(0,r.default)(function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:f.default;return d.of(t).map(n(e))}),d.prototype.empty=function(){return d.of(this).map(c.default)},d.empty=(0,r.default)(function(t,e){var n=Array.apply(null,Array(t)).map(function(t){return Array.apply(null,Array(e))});return d.of(n).map(c.default)}),d.prototype.identity=function(){return d.of(i.default).ap(this)},d.identity=function(t,e){return d.of(i.default).ap(d.empty(t,e))},d.prototype.combine=function(t){return d.of(this).concat(d.of(t),f.default)},d.combine=function(t,e){return d.of(t).concat(d.of(e),f.default)},d.prototype.dot=function(t){return d.of(this).concat(d.of(t),a.default)},d.dot=function(t,e){return d.of(t).concat(d.of(e),a.default)},d.prototype.fill=function(t){return d.of(this).map(function(e){return function(e){return e.map(function(e){return t()})}})},d.prototype.zeros=function(){return d.of(this).fill(function(t){return 0})},d.prototype.ones=function(){return d.of(this).fill(function(t){return 1})};var s=d;e.default=s,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=o(n(0)),u=o(n(10));function o(t){return t&&t.__esModule?t:{default:t}}var f=(0,r.default)(function(t,e,n){return(0,u.default)(e,t.__value[n])});e.default=f,t.exports=e.default},function(t,e,n){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var u=(0,((r=n(0))&&r.__esModule?r:{default:r}).default)(function(t){return[]});e.default=u,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=f(n(0)),u=f(n(4)),o=f(n(3));function f(t){return t&&t.__esModule?t:{default:t}}var c=(0,r.default)(function(t,e){return(0,o.default)(function(n,r){return(0,u.default)(function(e,n,u){return e+n*t.__value[u][r]},0)(e)})(t.__value[0])});e.default=c,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,u=(r=n(3))&&r.__esModule?r:{default:r};e.default=function(t,e){return(0,u.default)(function(t,n){return 1*(e===n)},t)},t.exports=e.default},function(t,e,n){"use strict";n.r(e);var r=n(0),u=Object(r.default)(function(t,e){return Array.prototype.concat(t,e)});function o(t,e){return String(t)+String(e)}var f=n(1);e.default=Object(r.default)(function(t,e){return{String:o,Array:u}[Object(f.a)(t)](t,e)})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,