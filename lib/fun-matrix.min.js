!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("fun-matrix",[],e):"object"==typeof exports?exports["fun-matrix"]=e():t["fun-matrix"]=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var u=e[r]={i:r,l:!1,exports:{}};return t[r].call(u.exports,u,u.exports,n),u.l=!0,u.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var u in t)n.d(r,u,function(e){return t[e]}.bind(null,u));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e,n){"use strict";function r(t){const e=t.length;return 0===e?t:n([]);function n(r){return function(){return function(r,u){const o=r.concat(u);return o.length<e?n(o):t.apply(this,o)}(r,Array.prototype.slice.call(arguments))}}}n.r(e),n.d(e,"default",function(){return r})},function(t,e,n){"use strict";var r=n(0),u=n(2);e.a=Object(r.default)(function(t,e){return Object(u.a)(e)===t})},function(t,e,n){"use strict";var r;e.a=(r=function(t){return Object.prototype.toString.call(t).slice(8,-1)},function(t){return 0===arguments.length?this:r(t)})},function(t,e,n){"use strict";n.r(e);var r=n(0),u=Object(r.default)(function(t,e){let n=-1;const r=e.length,u=new Array(r);for(;++n<r;)u[n]=t(e[n],n,e);return u});function o(t){return new t.constructor}var f=n(4),a=Object(r.default)(function(t,e){const n=Object(f.a)(e);let r=-1;const u=n.length,a=o(e);for(;++r<u;)a[n[r]]=t(e[n[r]],n[r],e);return a}),c=Object(r.default)(function(t,e){const n=o(e);return e.forEach((e,r,u)=>{n.set(r,t(e,r,u))}),n}),i=Object(r.default)(function(t,e){let n=-1;const r=e.length;let u="";for(;++n<r;)u+=t(e.charAt(n),n,e);return u}),l=Object(r.default)(function(t,e){let n=[];for(let r=e.next();!0!==r.done;r=e.next())n.push(t(e.value()));return n}),d=n(2),s=n(1);const p=Object(s.a)("Function");e.default=Object(r.default)(function(t,e){switch(Object(d.a)(e)){case"Function":return Object(r.default)(function(){return t.call(this,e.apply(this,arguments))});case"Object":return a(t,e);case"String":return i(t,e);case"Map":return c(t,e);case"Array":return u(t,e);default:return p(e[Symbol.iterator])?l(t,e):u(t,e)}})},function(t,e,n){"use strict";var r=n(0);e.a=Object(r.default)(function(t){return Object.keys(Object(t))})},function(t,e,n){"use strict";n.r(e);var r=n(0),u=Object(r.default)(function(t,e,n){let r=-1;const u=n.length;let o=e;for(;++r<u;)o=t(o,n[r],r,n);return o}),o=n(4),f=Object(r.default)(function(t,e,n){const r=Object(o.a)(n);let u=-1;const f=r.length;let a=Object(e);for(;++u<f;)a=t(a,n[r[u]],r[u],n);return a}),a=n(2);e.default=Object(r.default)(function(t,e,n){return{Object:f,Array:u}[Object(a.a)(n)](t,e,n)})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=s(n(0)),u=s(n(3)),o=s(n(5)),f=s(n(12)),a=s(n(7)),c=s(n(8)),i=s(n(9)),l=s(n(10)),d=s(n(11));function s(t){return t&&t.__esModule?t:{default:t}}var p=function(t){this.__value=t};p.prototype.type="Matrix",p.prototype.isSymmetric=function(){var t=this.__value,e=p.transpose(this).__value;return(0,f.default)(t,e)},p.prototype.getCols=function(){return this.__value[0].length},p.prototype.equals=function(t){return(0,f.default)(this.__value,t.__value||t)},p.prototype.getRows=function(){return this.__value.length},p.prototype.getShape=function(){return[this.getRows(),this.getCols()]},p.of=function(t){return t instanceof p?t:this instanceof p?(this.__value=t,this):new p(t)},p.prototype.map=function(t){return p.of((0,u.default)(t)(this.__value))},p.map=(0,r.default)(function(t,e){return p.of(e).map(t)}),p.prototype.fold=function(t){return p.of((0,o.default)(t,[])(this.__value))},p.fold=(0,r.default)(function(t,e){return p.of(e).fold(t)}),p.prototype.ap=function(t){return p.of(t).map(this.__value)},p.ap=(0,r.default)(function(t,e){return p.of(t).ap(e)}),p.prototype.concat=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a.default;return p.of(this).map(e(t))},p.concat=(0,r.default)(function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a.default;return p.of(t).map(n(e))}),p.prototype.empty=function(){return p.of(this).map(c.default)},p.empty=(0,r.default)(function(t,e){var n=Array.apply(null,Array(t)).map(function(t){return Array.apply(null,Array(e))});return p.of(n).map(c.default)}),p.prototype.identity=function(){return p.of(l.default).ap(this)},p.identity=function(t,e){var n=Array.apply(null,Array(t)).map(function(t){return Array.apply(null,Array(e))});return p.of(l.default).ap(n)},p.prototype.combine=function(t){return p.of(this).concat(p.of(t),a.default)},p.combine=function(t,e){return p.of(t).concat(p.of(e),a.default)},p.prototype.dot=function(t){return p.of(this).concat(p.of(t),i.default)},p.dot=function(t,e){return p.of(t).concat(p.of(e),i.default)},p.prototype.fill=function(t){return p.of(this).map((0,u.default)(function(e){return t(e)}))},p.prototype.zeros=function(){return p.of(this).fill(function(t){return 0})},p.prototype.ones=function(){return p.of(this).fill(function(t){return 1})},p.prototype.random=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return 2*Math.random()-1};return p.of(this).fill(t)},p.prototype.toArray=function(){return this.__value.map(function(t){return t.map(function(t){return t})})},p.prototype.clone=function(){return p.fromArray(this.__value)},p.fromArray=function(t){return p.of((0,u.default)(function(t){return(0,u.default)(function(t){return t})(t)})(t))},p.prototype.transpose=function(){return p.of((0,o.default)(d.default,[],this.__value))},p.transpose=function(t){return p.of(t).transpose()},p.prototype.add=function(t){if(t instanceof p){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot add");return this.map(function(e,n){return(0,u.default)(function(e,r){return e+t.__value[n][r]})(e)})}return this.map(function(e){return e+t})};var y=p;e.default=y,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=o(n(0)),u=o(n(13));function o(t){return t&&t.__esModule?t:{default:t}}var f=(0,r.default)(function(t,e,n){return(0,u.default)(e,t.__value[n])});e.default=f,t.exports=e.default},function(t,e,n){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var u=(0,((r=n(0))&&r.__esModule?r:{default:r}).default)(function(t){return[]});e.default=u,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=f(n(0)),u=f(n(5)),o=f(n(3));function f(t){return t&&t.__esModule?t:{default:t}}var a=(0,r.default)(function(t,e){return(0,o.default)(function(n,r){return(0,u.default)(function(e,n,u){return e+n*t.__value[u][r]},0)(e)})(t.__value[0])});e.default=a,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,u=(r=n(3))&&r.__esModule?r:{default:r};e.default=function(t,e){return(0,u.default)(function(t,n){return 1*(e===n)})(t)},t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(3));function u(t){return t&&t.__esModule?t:{default:t}}var o=(0,u(n(0)).default)(function(t,e){return(0,r.default)(function(n,r){return(t[r]||[]).concat(e[r])})(e)});e.default=o,t.exports=e.default},function(t,e,n){"use strict";n.r(e);var r=n(0);function u(t){return!(null==t)}var o=n(1),f=Object(o.a)("Number"),a=Object(r.default)(function(t,e){return t&&e});function c(t){return a(f(t),isNaN(t))}var i=Object(r.default)(function(t,e){return 0===t&&0===e?1/t==1/e:t===e||!(!c(t)||!c(e))}),l=n(2),d=Object(r.default)(function(t){return!t}),s=Object(r.default)(function(t,e){return t||e}),p=Object(o.a)("Object"),y=Object(o.a)("Array"),v=Object(o.a)("Boolean"),b=Object(o.a)("String"),_=Object(o.a)("Date"),h=Object(r.default)(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(d(O(t[n],e[n])))return!1;return!0}),j=Object(r.default)((t,e)=>{for(let n in t)if(d(O(t[n],e[n])))return!1;for(let n in e)if(d(u(t[n]))&&u(e[n]))return!1;return!0}),O=e.default=Object(r.default)(function(t,e){return!!i(t,e)||Object(l.a)(t)===Object(l.a)(e)&&(!s(d(u(t)),d(u(e)))&&(t.constructor===e.constructor&&(b(t)||v(t)||f(t)||_(t)?i(t.valueOf(),e.valueOf()):y(t)?h(t,e):!!p(t)&&j(t,e))))})},function(t,e,n){"use strict";n.r(e);var r=n(0),u=Object(r.default)(function(t,e){return Array.prototype.concat(t,e)});function o(t,e){return String(t)+String(e)}var f=n(2);e.default=Object(r.default)(function(t,e){return{String:o,Array:u}[Object(f.a)(t)](t,e)})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,