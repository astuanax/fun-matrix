[
    {
        "comment": "/**\n * @class Matrix\n * @classdesc Matrix applicative providing standard matrix operations\n * @summary The Matrix class should not be instantiated with the new keyword. Instead use the Matrix.of syntax to create a new Matrix. Unfortunatly jsdocs does not allow for the constructor to be hidden.\n * @hidecontructor\n * @see of\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 14,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "kind": "class",
        "name": "Matrix",
        "classdesc": "Matrix applicative providing standard matrix operations",
        "summary": "The Matrix class should not be instantiated with the new keyword. Instead use the Matrix.of syntax to create a new Matrix. Unfortunatly jsdocs does not allow for the constructor to be hidden.",
        "tags": [
            {
                "originalTitle": "hidecontructor",
                "title": "hidecontructor",
                "text": ""
            }
        ],
        "see": [
            "of"
        ],
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])"
        ],
        "longname": "Matrix",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                813,
                931
            ],
            "filename": "matrix.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000051",
                "name": "Matrix",
                "type": "FunctionExpression"
            },
            "vars": {
                "this.__value": null,
                "this.gpujs": null
            }
        },
        "undocumented": true,
        "name": "Matrix",
        "longname": "Matrix",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                848,
                866
            ],
            "filename": "matrix.js",
            "lineno": 26,
            "columnno": 2,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000058",
                "name": "this.__value",
                "type": "Identifier",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value",
        "longname": "__value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                886,
                925
            ],
            "filename": "matrix.js",
            "lineno": 28,
            "columnno": 4,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000067",
                "name": "this.gpujs",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "gpujs",
        "longname": "gpujs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function of\n * @desc Creates a Matrix object and flattens the Matrix\n * @param val {array|function} An array of arrays\n * @returns {Matrix}\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 32,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "of",
        "description": "Creates a Matrix object and flattens the Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "array",
                        "function"
                    ]
                },
                "description": "An array of arrays",
                "name": "val"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])"
        ],
        "longname": "Matrix.of"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1179,
                1393
            ],
            "filename": "matrix.js",
            "lineno": 44,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000077",
                "name": "Matrix.of",
                "type": "FunctionExpression",
                "paramnames": [
                    "val",
                    "GPUJS"
                ]
            },
            "vars": {
                "this.__value": "Matrix.of#__value",
                "this.gpujs": "Matrix.of#gpujs"
            }
        },
        "undocumented": true,
        "name": "of",
        "longname": "Matrix.of",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1298,
                1316
            ],
            "filename": "matrix.js",
            "lineno": 47,
            "columnno": 4,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000099",
                "name": "this.__value",
                "type": "Identifier",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value",
        "longname": "Matrix.of#__value",
        "kind": "member",
        "memberof": "Matrix.of",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1321,
                1339
            ],
            "filename": "matrix.js",
            "lineno": 48,
            "columnno": 4,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000105",
                "name": "this.gpujs",
                "type": "Identifier",
                "value": "GPUJS",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "gpujs",
        "longname": "Matrix.of#gpujs",
        "kind": "member",
        "memberof": "Matrix.of",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @property {string} type\n * @type {string}\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n * m.type === 'Matrix'\n */",
        "meta": {
            "range": [
                1551,
                1583
            ],
            "filename": "matrix.js",
            "lineno": 63,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000118",
                "name": "Matrix.prototype.type",
                "type": "Literal",
                "value": "Matrix",
                "paramnames": []
            }
        },
        "memberof": "Matrix",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "type"
            }
        ],
        "type": {
            "names": [
                "string"
            ]
        },
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])\nm.type === 'Matrix'"
        ],
        "name": "type",
        "longname": "Matrix#type",
        "kind": "member",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @property {Object} gpu\n * @type {Object}\n */",
        "meta": {
            "range": [
                1657,
                1682
            ],
            "filename": "matrix.js",
            "lineno": 70,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000126",
                "name": "Matrix.prototype.gpu",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "memberof": "Matrix",
        "properties": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "gpu"
            }
        ],
        "type": {
            "names": [
                "Object"
            ]
        },
        "name": "gpu",
        "longname": "Matrix#gpu",
        "kind": "member",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @property {number} precision\n * @type {number}\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n * m.precision === 4\n */",
        "meta": {
            "range": [
                1843,
                1873
            ],
            "filename": "matrix.js",
            "lineno": 81,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000134",
                "name": "Matrix.prototype.precision",
                "type": "Literal",
                "value": 4,
                "paramnames": []
            }
        },
        "memberof": "Matrix",
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "precision"
            }
        ],
        "type": {
            "names": [
                "number"
            ]
        },
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])\nm.precision === 4"
        ],
        "name": "precision",
        "longname": "Matrix#precision",
        "kind": "member",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member setPrecision\n * @param precision {number} Set the number of decimals for rounding\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n * m.setPrecision(10)\n * m.precision === 10\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 83,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "setPrecision",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Set the number of decimals for rounding",
                "name": "precision"
            }
        ],
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])\nm.setPrecision(10)\nm.precision === 10"
        ],
        "longname": "Matrix#setPrecision"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2113,
                2198
            ],
            "filename": "matrix.js",
            "lineno": 94,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000142",
                "name": "Matrix.prototype.setPrecision",
                "type": "FunctionExpression",
                "paramnames": [
                    "precision"
                ]
            },
            "vars": {
                "this.precision": "Matrix#setPrecision#precision"
            }
        },
        "undocumented": true,
        "name": "setPrecision",
        "longname": "Matrix#setPrecision",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2170,
                2196
            ],
            "filename": "matrix.js",
            "lineno": 95,
            "columnno": 2,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000152",
                "name": "this.precision",
                "type": "Identifier",
                "value": "precision",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "precision",
        "longname": "Matrix#setPrecision#precision",
        "kind": "member",
        "memberof": "Matrix#setPrecision",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member isSymmetric\n * @returns {boolean}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * true === A.isSymmetric()\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 98,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "isSymmetric",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\ntrue === A.isSymmetric()"
        ],
        "longname": "Matrix#isSymmetric"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2373,
                2509
            ],
            "filename": "matrix.js",
            "lineno": 109,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000158",
                "name": "Matrix.prototype.isSymmetric",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "a": "Matrix#isSymmetric~a",
                "b": "Matrix#isSymmetric~b"
            }
        },
        "undocumented": true,
        "name": "isSymmetric",
        "longname": "Matrix#isSymmetric",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2426,
                2442
            ],
            "filename": "matrix.js",
            "lineno": 110,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000167",
                "name": "a",
                "type": "MemberExpression",
                "value": "this.__value"
            }
        },
        "undocumented": true,
        "name": "a",
        "longname": "Matrix#isSymmetric~a",
        "kind": "constant",
        "memberof": "Matrix#isSymmetric",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2451,
                2485
            ],
            "filename": "matrix.js",
            "lineno": 111,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000173",
                "name": "b",
                "type": "MemberExpression",
                "value": ".__value"
            }
        },
        "undocumented": true,
        "name": "b",
        "longname": "Matrix#isSymmetric~b",
        "kind": "constant",
        "memberof": "Matrix#isSymmetric",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member isSquare\n * @desc Boolean indicating whether this contains a square Matrix\n * @returns {boolean}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * true === A.isSquare()\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 115,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "isSquare",
        "description": "Boolean indicating whether this contains a square Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\ntrue === A.isSquare()"
        ],
        "longname": "Matrix#isSquare"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2744,
                2835
            ],
            "filename": "matrix.js",
            "lineno": 127,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000188",
                "name": "Matrix.prototype.isSquare",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "isSquare",
        "longname": "Matrix#isSquare",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member isOrthogonal\n * @param M {Matrix|array}\n * @returns {boolean}\n * @example\n *\n * const result = [[-0.3092, -0.9510], [-0.9510, 0.3092]]\n * const A = Matrix.fromArray(result)\n * true  === A.isOrthogonal()\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 131,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "isOrthogonal",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "array"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "examples": [
            "const result = [[-0.3092, -0.9510], [-0.9510, 0.3092]]\nconst A = Matrix.fromArray(result)\ntrue  === A.isOrthogonal()"
        ],
        "longname": "Matrix#isOrthogonal"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3092,
                3234
            ],
            "filename": "matrix.js",
            "lineno": 143,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000208",
                "name": "Matrix.prototype.isOrthogonal",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "AxAt": "Matrix#isOrthogonal~AxAt",
                "I": "Matrix#isOrthogonal~I"
            }
        },
        "undocumented": true,
        "name": "isOrthogonal",
        "longname": "Matrix#isOrthogonal",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3146,
                3179
            ],
            "filename": "matrix.js",
            "lineno": 144,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000217",
                "name": "AxAt",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "AxAt",
        "longname": "Matrix#isOrthogonal~AxAt",
        "kind": "constant",
        "memberof": "Matrix#isOrthogonal",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3188,
                3207
            ],
            "filename": "matrix.js",
            "lineno": 145,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000228",
                "name": "I",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "I",
        "longname": "Matrix#isOrthogonal~I",
        "kind": "constant",
        "memberof": "Matrix#isOrthogonal",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member getCols\n * @returns {Number}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * A.getCols()  === 2\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 149,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "getCols",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\nA.getCols()  === 2"
        ],
        "longname": "Matrix#getCols"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3398,
                3472
            ],
            "filename": "matrix.js",
            "lineno": 160,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000240",
                "name": "Matrix.prototype.getCols",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getCols",
        "longname": "Matrix#getCols",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member equals\n * @param M {Matrix|array}\n * @returns {Boolean}\n * @example\n *\n * var a = [[1, 1], [1, 1]]\n * var A = Matrix.of(a)\n * var B = Matrix.of(a)\n * true  === A.equals(B)\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 164,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "equals",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "array"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "var a = [[1, 1], [1, 1]]\nvar A = Matrix.of(a)\nvar B = Matrix.of(a)\ntrue  === A.equals(B)"
        ],
        "longname": "Matrix#equals"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3698,
                3786
            ],
            "filename": "matrix.js",
            "lineno": 177,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000257",
                "name": "Matrix.prototype.equals",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "equals",
        "longname": "Matrix#equals",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member getRows\n * @returns {Number}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * A.getRows()  // 2\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 181,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "getRows",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\nA.getRows()  // 2"
        ],
        "longname": "Matrix#getRows"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3946,
                4017
            ],
            "filename": "matrix.js",
            "lineno": 191,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000278",
                "name": "Matrix.prototype.getRows",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getRows",
        "longname": "Matrix#getRows",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member getShape\n * @returns {Array}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * A.getShape()  // [2, 2]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 195,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "getShape",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\nA.getShape()  // [2, 2]"
        ],
        "longname": "Matrix#getShape"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4183,
                4268
            ],
            "filename": "matrix.js",
            "lineno": 205,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000293",
                "name": "Matrix.prototype.getShape",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getShape",
        "longname": "Matrix#getShape",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member map\n * @description Maps over the rows of the matrix using a map function\n * @param f {function} An iterator function\n * @returns {Matrix}\n * @example\n *\n * const m = Matrix.of([[1, 1], [1, 1]])\n * m.map(x => x.map(y => y+ 1))\n * // [[2, 2], [2, 2]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 209,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "map",
        "description": "Maps over the rows of the matrix using a map function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "An iterator function",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const m = Matrix.of([[1, 1], [1, 1]])\nm.map(x => x.map(y => y+ 1))\n// [[2, 2], [2, 2]]"
        ],
        "longname": "Matrix#map"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4575,
                4655
            ],
            "filename": "matrix.js",
            "lineno": 223,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000312",
                "name": "Matrix.prototype.map",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "Matrix#map",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function map\n * @description Static function that maps over the rows of the matrix using a map function\n * @param f {function} An iterator function\n * @param M {Matrix|array} Matrix or array to map\n * @returns {Matrix}\n * @example\n *\n * const m = Matrix.map(x= > x.map(y => y+ 1), [[1, 1], [1, 1]])\n * // [[2, 2], [2, 2]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 227,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "map",
        "description": "Static function that maps over the rows of the matrix using a map function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "An iterator function",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "array"
                    ]
                },
                "description": "Matrix or array to map",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const m = Matrix.map(x= > x.map(y => y+ 1), [[1, 1], [1, 1]])\n// [[2, 2], [2, 2]]"
        ],
        "longname": "Matrix.map"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5025,
                5093
            ],
            "filename": "matrix.js",
            "lineno": 241,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000334",
                "name": "Matrix.map",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "Matrix.map",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member fold\n * @description Reduce the matrix rows using a reduce function\n * @param f {function} A reduce/fold function\n * @returns {Matrix}\n * @example\n *\n * // Flatten Matrix\n * Matrix.of([[1, 1], [1, 1]]).fold((prev, next) => prev.concat(next))\n * // [1, 1, 1, 1]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 245,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "fold",
        "description": "Reduce the matrix rows using a reduce function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A reduce/fold function",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "// Flatten Matrix\nMatrix.of([[1, 1], [1, 1]]).fold((prev, next) => prev.concat(next))\n// [1, 1, 1, 1]"
        ],
        "longname": "Matrix#fold"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5408,
                5494
            ],
            "filename": "matrix.js",
            "lineno": 258,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000355",
                "name": "Matrix.prototype.fold",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            }
        },
        "undocumented": true,
        "name": "fold",
        "longname": "Matrix#fold",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function fold\n * @description Static function to reduce the matrix rows using a reduce function\n * @param f {function} A reduce/fold function\n * @param M {Matrix} The Matrix to reduce\n * @returns {Matrix}\n * @example\n\n * // Sum of all matrix values\n * const reducer = (prev, next) => Number(prev) + next.reduce((acc, x) => acc + x, 0)\n * const A = Matrix.of([[1, 1], [1, 1]]\n * Matrix.fold(reducer, A)\n * // 4\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 262,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "fold",
        "description": "Static function to reduce the matrix rows using a reduce function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A reduce/fold function",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The Matrix to reduce",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "// Sum of all matrix values\nconst reducer = (prev, next) => Number(prev) + next.reduce((acc, x) => acc + x, 0)\nconst A = Matrix.of([[1, 1], [1, 1]]\nMatrix.fold(reducer, A)\n// 4"
        ],
        "longname": "Matrix.fold"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5949,
                6019
            ],
            "filename": "matrix.js",
            "lineno": 278,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000378",
                "name": "Matrix.fold",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "fold",
        "longname": "Matrix.fold",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member ap\n * @description Applies a Matrix to a function\n * @param M {Matrix}\n * @returns {Matrix}\n * @example\n *\n * const f = x => x.reduce((prev, next) => prev + next)\n * const A = Matrix.of([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n * Matrix.of(f).ap(M)\n * // [[6], [15], [24]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 282,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "ap",
        "description": "Applies a Matrix to a function",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const f = x => x.reduce((prev, next) => prev + next)\nconst A = Matrix.of([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nMatrix.of(f).ap(M)\n// [[6], [15], [24]"
        ],
        "longname": "Matrix#ap"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6339,
                6417
            ],
            "filename": "matrix.js",
            "lineno": 296,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000399",
                "name": "Matrix.prototype.ap",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "ap",
        "longname": "Matrix#ap",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function ap\n * @description Applies a Matrix to a function\n * @param f {function}\n * @param M {Matrix|array}\n * @returns {Matrix}\n * @example\n *\n * const f = x => x.reduce((prev, next) => prev + next)\n * Matrix.ap(f, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n * // [[6], [15], [24]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 300,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "ap",
        "description": "Applies a Matrix to a function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "array"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const f = x => x.reduce((prev, next) => prev + next)\nMatrix.ap(f, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n// [[6], [15], [24]"
        ],
        "longname": "Matrix.ap"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6737,
                6803
            ],
            "filename": "matrix.js",
            "lineno": 314,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000421",
                "name": "Matrix.ap",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ap",
        "longname": "Matrix.ap",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member concat\n * @description Concatenates 2 Matrices using a function as operator\n * @param M {Matrix}\n * @returns {Matrix}\n * @example\n *\n * const a = [[0, 1, 1], [2, 3, 4]]\n * const b = [[2, 2, 2], [3, 3, 3]]\n * const A = Matrix.of(a)\n * const B = Matrix.of(b)\n * const M = A.concat(B)\n * // [[0, 1, 1, 2, 2, 2], [2, 3, 4, 3, 3, 3]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 318,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "concat",
        "description": "Concatenates 2 Matrices using a function as operator",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[0, 1, 1], [2, 3, 4]]\nconst b = [[2, 2, 2], [3, 3, 3]]\nconst A = Matrix.of(a)\nconst B = Matrix.of(b)\nconst M = A.concat(B)\n// [[0, 1, 1, 2, 2, 2], [2, 3, 4, 3, 3, 3]]"
        ],
        "longname": "Matrix#concat"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7189,
                7278
            ],
            "filename": "matrix.js",
            "lineno": 335,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000442",
                "name": "Matrix.prototype.concat",
                "type": "FunctionExpression",
                "paramnames": [
                    "M",
                    "f"
                ]
            }
        },
        "undocumented": true,
        "name": "concat",
        "longname": "Matrix#concat",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function concat\n * @description Concatenates 2 Matrices using a function as operator\n * @param A {Matrix}\n * @param B {Matrix}\n * @returns {Matrix}\n * @example\n *\n * const a = [[0, 1, 1], [2, 3, 4]]\n * const b = [[2, 2, 2], [3, 3, 3]]\n * const A = Matrix.of(a)\n * const B = Matrix.of(b)\n * const M = Matrix.concat(A, B)\n * // [[0, 1, 1, 2, 2, 2], [2, 3, 4, 3, 3, 3]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 339,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "concat",
        "description": "Concatenates 2 Matrices using a function as operator",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "A"
            },
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "B"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[0, 1, 1], [2, 3, 4]]\nconst b = [[2, 2, 2], [3, 3, 3]]\nconst A = Matrix.of(a)\nconst B = Matrix.of(b)\nconst M = Matrix.concat(A, B)\n// [[0, 1, 1, 2, 2, 2], [2, 3, 4, 3, 3, 3]]"
        ],
        "longname": "Matrix.concat"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7693,
                7779
            ],
            "filename": "matrix.js",
            "lineno": 357,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000467",
                "name": "Matrix.concat",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "concat",
        "longname": "Matrix.concat",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member empty\n * @description Return an empty Matrix from an existing Matrix\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 361,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "empty",
        "description": "Return an empty Matrix from an existing Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#empty"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7923,
                7999
            ],
            "filename": "matrix.js",
            "lineno": 368,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000493",
                "name": "Matrix.prototype.empty",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "empty",
        "longname": "Matrix#empty",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function empty\n * @description Return an empty Matrix from an existing Matrix\n * @param rows {number}\n * @param cols {number}\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 372,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "empty",
        "description": "Return an empty Matrix from an existing Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.empty"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8191,
                8387
            ],
            "filename": "matrix.js",
            "lineno": 381,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000512",
                "name": "Matrix.empty",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "empty",
        "longname": "Matrix.empty",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8252,
                8276
            ],
            "filename": "matrix.js",
            "lineno": 382,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000527",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "<anonymous>~m",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member identity\n * @desc Returns an identity matrix\n * @returns {Matrix}\n * @example\n *\n * const a = [[1, 2, 3], [4, 5, 6]]\n * const A = Matrix.of(a)\n * const Aidentity = A.identity()\n * // [[1, 0, 0], [0, 1, 0]]\n *\n*/",
        "meta": {
            "filename": "matrix.js",
            "lineno": 388,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "identity",
        "description": "Returns an identity matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[1, 2, 3], [4, 5, 6]]\nconst A = Matrix.of(a)\nconst Aidentity = A.identity()\n// [[1, 0, 0], [0, 1, 0]]"
        ],
        "longname": "Matrix#identity"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8671,
                8752
            ],
            "filename": "matrix.js",
            "lineno": 402,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000544",
                "name": "Matrix.prototype.identity",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "identity",
        "longname": "Matrix#identity",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function identity\n * @desc Returns an identity matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.identity(3, 2)\n * // [[1, 0, 0], [0, 1, 0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 406,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "identity",
        "description": "Returns an identity matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.identity(3, 2)\n// [[1, 0, 0], [0, 1, 0]]"
        ],
        "longname": "Matrix.identity"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8954,
                9140
            ],
            "filename": "matrix.js",
            "lineno": 418,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000563",
                "name": "Matrix.identity",
                "type": "FunctionExpression",
                "paramnames": [
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "m": "Matrix.identity~m"
            }
        },
        "undocumented": true,
        "name": "identity",
        "longname": "Matrix.identity",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9004,
                9028
            ],
            "filename": "matrix.js",
            "lineno": 419,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000572",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix.identity~m",
        "kind": "constant",
        "memberof": "Matrix.identity",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member combine\n * @see Matrix.concat\n * @param M\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 423,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "combine",
        "see": [
            "Matrix.concat"
        ],
        "params": [
            {
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#combine"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9257,
                9354
            ],
            "filename": "matrix.js",
            "lineno": 431,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000589",
                "name": "Matrix.prototype.combine",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "combine",
        "longname": "Matrix#combine",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function combine\n * @see Matrix.concat\n * @param M\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 435,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "combine",
        "see": [
            "Matrix.concat"
        ],
        "params": [
            {
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.combine"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9471,
                9558
            ],
            "filename": "matrix.js",
            "lineno": 443,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000614",
                "name": "Matrix.combine",
                "type": "FunctionExpression",
                "paramnames": [
                    "A",
                    "B"
                ]
            }
        },
        "undocumented": true,
        "name": "combine",
        "longname": "Matrix.combine",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member dot\n * @description Returns the dot product between 2 matrices\n * @param M\n * @param f\n * @returns {Matrix}\n * @example\n *\n * // Create matrix\n * const m = Matrix.of([[1, 2], [3, 4]])\n *\n * // Generate identity matrix\n * const I  = m.identity() // [[1, 0], [0, 1]]\n *\n * if(m.dot(I).equals(m)) {\n *    console.log('Dot product with identity matrix returns the same matrix')\n * }\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 447,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "dot",
        "description": "Returns the dot product between 2 matrices",
        "params": [
            {
                "name": "M"
            },
            {
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "// Create matrix\nconst m = Matrix.of([[1, 2], [3, 4]])\n\n// Generate identity matrix\nconst I  = m.identity() // [[1, 0], [0, 1]]\n\nif(m.dot(I).equals(m)) {\n   console.log('Dot product with identity matrix returns the same matrix')\n}"
        ],
        "longname": "Matrix#dot"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9994,
                10100
            ],
            "filename": "matrix.js",
            "lineno": 468,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000638",
                "name": "Matrix.prototype.dot",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "dot",
        "longname": "Matrix#dot",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function dot\n * @description Returns the dot product between 2 matrices\n * @param M\n * @returns {Matrix}\n * @example\n * const a = [[1, 2, 3], [4, 5, 6]]\n * const b = [[7, 8], [9, 10], [11, 12]]\n *\n * const A = Matrix.of(a)\n * const B = Matrix.of(b)\n *\n * Matrix.dot(A, B) // [[58, 64], [139, 154]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 472,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "dot",
        "description": "Returns the dot product between 2 matrices",
        "params": [
            {
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[1, 2, 3], [4, 5, 6]]\nconst b = [[7, 8], [9, 10], [11, 12]]\n\nconst A = Matrix.of(a)\nconst B = Matrix.of(b)\n\nMatrix.dot(A, B) // [[58, 64], [139, 154]]"
        ],
        "longname": "Matrix.dot"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10446,
                10518
            ],
            "filename": "matrix.js",
            "lineno": 489,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000667",
                "name": "Matrix.dot",
                "type": "FunctionExpression",
                "paramnames": [
                    "A",
                    "B"
                ]
            }
        },
        "undocumented": true,
        "name": "dot",
        "longname": "Matrix.dot",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member fill\n * @desc Fill up an empty matrix with the provided map function\n * @param f\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).fill(x => 42)\n * // [[42,42,42], [42,42,42], [42,42,42]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 493,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "fill",
        "description": "Fill up an empty matrix with the provided map function",
        "params": [
            {
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).fill(x => 42)\n// [[42,42,42], [42,42,42], [42,42,42]]"
        ],
        "longname": "Matrix#fill"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10801,
                10886
            ],
            "filename": "matrix.js",
            "lineno": 506,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000690",
                "name": "Matrix.prototype.fill",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "fill",
        "longname": "Matrix#fill",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member zeros\n * @desc Fill up an empty matrix with zeros\n * @returns {Matrix}\n *\n * @example\n *\n * const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).zeros()\n * // [[0,0,0], [0,0,0], [0,0,0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 510,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "zeros",
        "description": "Fill up an empty matrix with zeros",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).zeros()\n// [[0,0,0], [0,0,0], [0,0,0]]"
        ],
        "longname": "Matrix#zeros"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11126,
                11204
            ],
            "filename": "matrix.js",
            "lineno": 523,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000716",
                "name": "Matrix.prototype.zeros",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "zeros",
        "longname": "Matrix#zeros",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function zeros\n * @desc Fill up an empty matrix with zeros\n * @param rows {number} Defines the rows of the matrix\n * @param cols {number} Defines the columns of the matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.zeros(3, 3)\n * // [[0,0,0], [0,0,0], [0,0,0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 527,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "zeros",
        "description": "Fill up an empty matrix with zeros",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Defines the rows of the matrix",
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Defines the columns of the matrix",
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.zeros(3, 3)\n// [[0,0,0], [0,0,0], [0,0,0]]"
        ],
        "scope": "static",
        "longname": "Matrix.zeros"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11515,
                11623
            ],
            "filename": "matrix.js",
            "lineno": 540,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000737",
                "name": "Matrix.zeros",
                "type": "FunctionExpression",
                "paramnames": [
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "m": "Matrix.zeros~m",
                "": null
            }
        },
        "undocumented": true,
        "name": "zeros",
        "longname": "Matrix.zeros",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11562,
                11586
            ],
            "filename": "matrix.js",
            "lineno": 541,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000746",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix.zeros~m",
        "kind": "constant",
        "memberof": "Matrix.zeros",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member ones\n * @desc Fill up an empty matrix with ones\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).ones()\n * // [[1,1,1], [1,1,1], [1,1,1]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 545,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "ones",
        "description": "Fill up an empty matrix with ones",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).ones()\n// [[1,1,1], [1,1,1], [1,1,1]]"
        ],
        "longname": "Matrix#ones"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11857,
                11934
            ],
            "filename": "matrix.js",
            "lineno": 557,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000765",
                "name": "Matrix.prototype.ones",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "ones",
        "longname": "Matrix#ones",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function ones\n * @desc Fill up an empty matrix with ones\n * @param rows {number} Defines the rows of the matrix\n * @param cols {number} Defines the columns of the matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.ones(1, 1)\n * // [[1,1,1], [1,1,1], [1,1,1]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 561,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "ones",
        "description": "Fill up an empty matrix with ones",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Defines the rows of the matrix",
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Defines the columns of the matrix",
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.ones(1, 1)\n// [[1,1,1], [1,1,1], [1,1,1]]"
        ],
        "scope": "static",
        "longname": "Matrix.ones"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12242,
                12349
            ],
            "filename": "matrix.js",
            "lineno": 574,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000786",
                "name": "Matrix.ones",
                "type": "FunctionExpression",
                "paramnames": [
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "m": "Matrix.ones~m",
                "": null
            }
        },
        "undocumented": true,
        "name": "ones",
        "longname": "Matrix.ones",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12288,
                12312
            ],
            "filename": "matrix.js",
            "lineno": 575,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000795",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix.ones~m",
        "kind": "constant",
        "memberof": "Matrix.ones",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member random\n * @desc Fill up an empty matrix with random values\n * @param {function} [f = e => Math.random() * 2 - 1]\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 579,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "random",
        "description": "Fill up an empty matrix with random values",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "defaultvalue": "e => Math.random() * 2 - 1",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#random"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12537,
                12641
            ],
            "filename": "matrix.js",
            "lineno": 587,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000814",
                "name": "Matrix.prototype.random",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "random",
        "longname": "Matrix#random",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function random\n * @desc Fill up an empty matrix with random numbers\n * @param f {function} Function which returns random values. Default random values are between -1 and 1\n * @param rows {number} Defines the rows of the matrix\n * @param cols {number} Defines the columns of the matrix\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 591,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "random",
        "description": "Fill up an empty matrix with random numbers",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function which returns random values. Default random values are between -1 and 1",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Defines the rows of the matrix",
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Defines the columns of the matrix",
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "scope": "static",
        "longname": "Matrix.random"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12982,
                13120
            ],
            "filename": "matrix.js",
            "lineno": 600,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000845",
                "name": "Matrix.random",
                "type": "FunctionExpression",
                "paramnames": [
                    "f",
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "": null,
                "m": "Matrix.random~m"
            }
        },
        "undocumented": true,
        "name": "random",
        "longname": "Matrix.random",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13064,
                13088
            ],
            "filename": "matrix.js",
            "lineno": 601,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000866",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix.random~m",
        "kind": "constant",
        "memberof": "Matrix.random",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member toArray\n * @desc Returns the array from the matrix\n * @returns {Array}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 605,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "toArray",
        "description": "Returns the array from the matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "Matrix#toArray"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13245,
                13341
            ],
            "filename": "matrix.js",
            "lineno": 612,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000883",
                "name": "Matrix.prototype.toArray",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toArray",
        "longname": "Matrix#toArray",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member clone\n * @desc Returns a clone of the matrix\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 616,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "clone",
        "description": "Returns a clone of the matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#clone"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13461,
                13541
            ],
            "filename": "matrix.js",
            "lineno": 623,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000908",
                "name": "Matrix.prototype.clone",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "clone",
        "longname": "Matrix#clone",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member fromArray\n * @desc Returns a Matrix from an array\n * @returns {Array}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 627,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "fromArray",
        "description": "Returns a Matrix from an array",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "Matrix#fromArray"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13665,
                13760
            ],
            "filename": "matrix.js",
            "lineno": 634,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000925",
                "name": "Matrix.fromArray",
                "type": "FunctionExpression",
                "paramnames": [
                    "arr"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "fromArray",
        "longname": "Matrix.fromArray",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member transpose\n * @desc Returns a transposed Matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([-1, 2], [3, 4], [-8, 2])\n * const b = A.transpose().toArray()\n * // returns [[-1, 3,-8], [2, 4, 2]]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 638,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "transpose",
        "description": "Returns a transposed Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([-1, 2], [3, 4], [-8, 2])\nconst b = A.transpose().toArray()\n// returns [[-1, 3,-8], [2, 4, 2]]"
        ],
        "longname": "Matrix#transpose"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14021,
                14119
            ],
            "filename": "matrix.js",
            "lineno": 650,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000951",
                "name": "Matrix.prototype.transpose",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "transpose",
        "longname": "Matrix#transpose",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function transpose\n * @desc Returns a transposed Matrix\n * @param M {Matrix|array} A Matrix or a matrix array\n * @returns {Matrix}\n * @example\n *\n * const a = [-1, 2], [3, 4], [-8, 2]\n * const b = Matrix.transpose(a).toArray()\n * // returns [[-1, 3,-8], [2, 4, 2]]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 654,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "transpose",
        "description": "Returns a transposed Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "array"
                    ]
                },
                "description": "A Matrix or a matrix array",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [-1, 2], [3, 4], [-8, 2]\nconst b = Matrix.transpose(a).toArray()\n// returns [[-1, 3,-8], [2, 4, 2]]"
        ],
        "scope": "static",
        "longname": "Matrix.transpose"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14418,
                14487
            ],
            "filename": "matrix.js",
            "lineno": 666,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000972",
                "name": "Matrix.transpose",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "transpose",
        "longname": "Matrix.transpose",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function add\n * @instance\n * @param M {Matrix|number} Add a Matrix or a number\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.add(1) // [[6, 5]]\n * const B = Matrix.of([[5, 5]])\n * B.add(B) // [[10, 10]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 670,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "add",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "number"
                    ]
                },
                "description": "Add a Matrix or a number",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.add(1) // [[6, 5]]\nconst B = Matrix.of([[5, 5]])\nB.add(B) // [[10, 10]]"
        ],
        "longname": "Matrix#add"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14755,
                15101
            ],
            "filename": "matrix.js",
            "lineno": 684,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100000989",
                "name": "Matrix.prototype.add",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "add",
        "longname": "Matrix#add",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member subtract\n * @instance\n * @param M {Matrix|number} Subtract a Matrix or a number\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.subtract(1) // [[4, 2]]\n * const B = Matrix.of([[5, 5]])\n * B.subtract(B) // [[0, 0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 695,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "subtract",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "number"
                    ]
                },
                "description": "Subtract a Matrix or a number",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.subtract(1) // [[4, 2]]\nconst B = Matrix.of([[5, 5]])\nB.subtract(B) // [[0, 0]]"
        ],
        "longname": "Matrix#subtract"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15385,
                15741
            ],
            "filename": "matrix.js",
            "lineno": 709,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001066",
                "name": "Matrix.prototype.subtract",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "subtract",
        "longname": "Matrix#subtract",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member multiply\n * @instance\n * @desc Mutliply a scalar or a mtraix with a matrix. Throws an error if the multiplication is not possible.\n * @param M {Matrix|number}\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.multiply(2) // [[10, 8]]\n * const B = Matrix.of([[5, 5]])\n * B.multiply(B) // [[25, 25]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 720,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "multiply",
        "scope": "instance",
        "description": "Mutliply a scalar or a mtraix with a matrix. Throws an error if the multiplication is not possible.",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "number"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.multiply(2) // [[10, 8]]\nconst B = Matrix.of([[5, 5]])\nB.multiply(B) // [[25, 25]]"
        ],
        "longname": "Matrix#multiply"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16107,
                16553
            ],
            "filename": "matrix.js",
            "lineno": 735,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001143",
                "name": "Matrix.prototype.multiply",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "multiply",
        "longname": "Matrix#multiply",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member additiveinverse\n * @instance\n * @desc Function that returns the matrix obtained by changing the sign of every matrix element. The additive inverse of matrix A is written –A.\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5,-5], [-4, 4]])\n * const minusA = A.additiveinverse()\n * // [[-5, 5], [4, -4]]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 747,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "additiveinverse",
        "scope": "instance",
        "description": "Function that returns the matrix obtained by changing the sign of every matrix element. The additive inverse of matrix A is written –A.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5,-5], [-4, 4]])\nconst minusA = A.additiveinverse()\n// [[-5, 5], [4, -4]]"
        ],
        "longname": "Matrix#additiveinverse"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16909,
                16997
            ],
            "filename": "matrix.js",
            "lineno": 759,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001226",
                "name": "Matrix.prototype.additiveinverse",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "additiveinverse",
        "longname": "Matrix#additiveinverse",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member hadamard\n * @instance\n * @see multiply\n * @param M\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.hadamard(2) // [[10, 8]]\n * const B = Matrix.of([[5, 5]])\n * B.hadamard(B) // [[25, 25]]\n\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 763,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "hadamard",
        "scope": "instance",
        "see": [
            "multiply"
        ],
        "params": [
            {
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.hadamard(2) // [[10, 8]]\nconst B = Matrix.of([[5, 5]])\nB.hadamard(B) // [[25, 25]]"
        ],
        "longname": "Matrix#hadamard"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17253,
                17334
            ],
            "filename": "matrix.js",
            "lineno": 778,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001246",
                "name": "Matrix.prototype.hadamard",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "hadamard",
        "longname": "Matrix#hadamard",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member lu\n * @desc Calculates LU decomposition of the current Matrix\n * @returns {Matrix[]}\n * @example\n *\n * const result = [[3, -7, -2, 2], [-3, 5, 1, 0], [6, -4, 0, -5], [-9, 5, -5, 12]]\n * const A = Matrix.fromArray(result)\n * const lu = A.lu()\n * // L.__value = [ [ 1, 0, 0, 0 ], [ -1, 1, 0, 0 ], [ 2, -5, 1, 0 ], [ -3, 8, 3, 1 ] ]\n * // U.__value =  [ [ 3, -7, -2, 2 ], [ 0, -2, -1, 2 ], [ 0, 0, -1, 1 ], [ 0, 0, 0, -1 ] ]\n * Matrix.dot(lu[0], lu[1]) // returns clone of A\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 782,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "lu",
        "description": "Calculates LU decomposition of the current Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Matrix>"
                    ]
                }
            }
        ],
        "examples": [
            "const result = [[3, -7, -2, 2], [-3, 5, 1, 0], [6, -4, 0, -5], [-9, 5, -5, 12]]\nconst A = Matrix.fromArray(result)\nconst lu = A.lu()\n// L.__value = [ [ 1, 0, 0, 0 ], [ -1, 1, 0, 0 ], [ 2, -5, 1, 0 ], [ -3, 8, 3, 1 ] ]\n// U.__value =  [ [ 3, -7, -2, 2 ], [ 0, -2, -1, 2 ], [ 0, 0, -1, 1 ], [ 0, 0, 0, -1 ] ]\nMatrix.dot(lu[0], lu[1]) // returns clone of A"
        ],
        "longname": "Matrix#lu"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17863,
                18500
            ],
            "filename": "matrix.js",
            "lineno": 798,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001266",
                "name": "Matrix.prototype.lu",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "n": "Matrix#lu~n",
                "tol": "Matrix#lu~tol",
                "A": "Matrix#lu~A",
                "L": "Matrix#lu~L",
                "U": "Matrix#lu~U",
                "k": "Matrix#lu~k",
                "L.__value[undefined][undefined]": "Matrix#lu~L.__value[undefined][undefined]",
                "i": "Matrix#lu~i",
                "j": "Matrix#lu~j",
                "A.__value[undefined][undefined]": "Matrix#lu~A.__value[undefined][undefined]",
                "l": "Matrix#lu~l",
                "U.__value[undefined][undefined]": "Matrix#lu~U.__value[undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "lu",
        "longname": "Matrix#lu",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17907,
                17925
            ],
            "filename": "matrix.js",
            "lineno": 799,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001275",
                "name": "n",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "Matrix#lu~n",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17934,
                17944
            ],
            "filename": "matrix.js",
            "lineno": 800,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001282",
                "name": "tol",
                "type": "Literal",
                "value": 0.000001
            }
        },
        "undocumented": true,
        "name": "tol",
        "longname": "Matrix#lu~tol",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17953,
                17969
            ],
            "filename": "matrix.js",
            "lineno": 801,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001286",
                "name": "A",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "A",
        "longname": "Matrix#lu~A",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17978,
                17994
            ],
            "filename": "matrix.js",
            "lineno": 802,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001293",
                "name": "L",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "L",
        "longname": "Matrix#lu~L",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18003,
                18019
            ],
            "filename": "matrix.js",
            "lineno": 803,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001300",
                "name": "U",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "U",
        "longname": "Matrix#lu~U",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18032,
                18037
            ],
            "filename": "matrix.js",
            "lineno": 805,
            "columnno": 11,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001308",
                "name": "k",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "k",
        "longname": "Matrix#lu~k",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18151,
                18170
            ],
            "filename": "matrix.js",
            "lineno": 807,
            "columnno": 4,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001336",
                "name": "L.__value[undefined][undefined]",
                "type": "Literal",
                "funcscope": "Matrix#lu",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~L.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~L",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18184,
                18193
            ],
            "filename": "matrix.js",
            "lineno": 808,
            "columnno": 13,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001347",
                "name": "i",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#lu~i",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18215,
                18266
            ],
            "filename": "matrix.js",
            "lineno": 809,
            "columnno": 6,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001359",
                "name": "L.__value[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#lu",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~L.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~L",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18282,
                18291
            ],
            "filename": "matrix.js",
            "lineno": 810,
            "columnno": 15,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001384",
                "name": "j",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#lu~j",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18315,
                18384
            ],
            "filename": "matrix.js",
            "lineno": 811,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001396",
                "name": "A.__value[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#lu",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~A.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~A",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18412,
                18417
            ],
            "filename": "matrix.js",
            "lineno": 814,
            "columnno": 13,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001429",
                "name": "l",
                "type": "Identifier",
                "value": "k"
            }
        },
        "undocumented": true,
        "name": "l",
        "longname": "Matrix#lu~l",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18439,
                18472
            ],
            "filename": "matrix.js",
            "lineno": 815,
            "columnno": 6,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001439",
                "name": "U.__value[undefined][undefined]",
                "type": "MemberExpression",
                "funcscope": "Matrix#lu",
                "value": "A.__value[undefined][undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~U.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~U",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member rref\n * @returns {Matrix|array}\n * @example\n *\n * var A = Matrix.of([[-1, 1], [-1, 0], [0, -1], [-1, -2]])\n * A.rref() //  [ [ 1, 0 ], [ -0, 1 ], [ 0, 0 ], [ 0, 0 ] ]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 821,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "rref",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "array"
                    ]
                }
            }
        ],
        "examples": [
            "var A = Matrix.of([[-1, 1], [-1, 0], [0, -1], [-1, -2]])\nA.rref() //  [ [ 1, 0 ], [ -0, 1 ], [ 0, 0 ], [ 0, 0 ] ]"
        ],
        "longname": "Matrix#rref"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18721,
                19707
            ],
            "filename": "matrix.js",
            "lineno": 831,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001459",
                "name": "Matrix.prototype.rref",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "lead": "Matrix#rref~lead",
                "resultMatrix": "Matrix#rref~resultMatrix",
                "r": "Matrix#rref~r",
                "i": "Matrix#rref~i",
                "tmp": "Matrix#rref~tmp",
                "resultMatrix.__value[undefined]": "Matrix#rref~resultMatrix.__value[undefined]",
                "val": "Matrix#rref~val",
                "j": "Matrix#rref~j",
                "resultMatrix.__value[undefined][undefined]": "Matrix#rref~resultMatrix.__value[undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "rref",
        "longname": "Matrix#rref",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18765,
                18773
            ],
            "filename": "matrix.js",
            "lineno": 832,
            "columnno": 6,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001468",
                "name": "lead",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "lead",
        "longname": "Matrix#rref~lead",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18782,
                18809
            ],
            "filename": "matrix.js",
            "lineno": 833,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001472",
                "name": "resultMatrix",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "resultMatrix",
        "longname": "Matrix#rref~resultMatrix",
        "kind": "constant",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18822,
                18827
            ],
            "filename": "matrix.js",
            "lineno": 835,
            "columnno": 11,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001480",
                "name": "r",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "r",
        "longname": "Matrix#rref~r",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18930,
                18935
            ],
            "filename": "matrix.js",
            "lineno": 839,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001503",
                "name": "i",
                "type": "Identifier",
                "value": "r"
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rref~i",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19038,
                19043
            ],
            "filename": "matrix.js",
            "lineno": 843,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001529",
                "name": "i",
                "type": "Identifier",
                "funcscope": "Matrix#rref",
                "value": "r",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rref~i",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19161,
                19190
            ],
            "filename": "matrix.js",
            "lineno": 851,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001546",
                "name": "tmp",
                "type": "MemberExpression",
                "value": "resultMatrix.__value[undefined]"
            }
        },
        "undocumented": true,
        "name": "tmp",
        "longname": "Matrix#rref~tmp",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19195,
                19244
            ],
            "filename": "matrix.js",
            "lineno": 852,
            "columnno": 4,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001554",
                "name": "resultMatrix.__value[undefined]",
                "type": "MemberExpression",
                "funcscope": "Matrix#rref",
                "value": "resultMatrix.__value[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19249,
                19278
            ],
            "filename": "matrix.js",
            "lineno": 853,
            "columnno": 4,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001566",
                "name": "resultMatrix.__value[undefined]",
                "type": "Identifier",
                "funcscope": "Matrix#rref",
                "value": "tmp",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19288,
                19323
            ],
            "filename": "matrix.js",
            "lineno": 855,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001574",
                "name": "val",
                "type": "MemberExpression",
                "value": "resultMatrix.__value[undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "Matrix#rref~val",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19337,
                19342
            ],
            "filename": "matrix.js",
            "lineno": 856,
            "columnno": 13,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001585",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#rref~j",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19377,
                19410
            ],
            "filename": "matrix.js",
            "lineno": 857,
            "columnno": 6,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001598",
                "name": "resultMatrix.__value[undefined][undefined]",
                "type": "Identifier",
                "funcscope": "Matrix#rref",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19431,
                19436
            ],
            "filename": "matrix.js",
            "lineno": 860,
            "columnno": 13,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001609",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rref~i",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19499,
                19534
            ],
            "filename": "matrix.js",
            "lineno": 862,
            "columnno": 6,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001627",
                "name": "val",
                "type": "MemberExpression",
                "funcscope": "Matrix#rref",
                "value": "resultMatrix.__value[undefined][undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "Matrix#rref~val",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19550,
                19555
            ],
            "filename": "matrix.js",
            "lineno": 863,
            "columnno": 15,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001638",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#rref~j",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19592,
                19654
            ],
            "filename": "matrix.js",
            "lineno": 864,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001651",
                "name": "resultMatrix.__value[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#rref",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member solve\n * @param b\n * @returns {Array}\n * @example\n *\n * // Solve xA = b\n * // 5x + y  = 7\n * // 3x - 4y = 18\n * // Solution for x and y:\n * // x = 2\n * // y = -3\n *\n * const A = Matrix.of([[5, 1], [3, -4]])\n * const solveA = A.solve([7, 18]) // [2, -3]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 872,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "solve",
        "params": [
            {
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "// Solve xA = b\n// 5x + y  = 7\n// 3x - 4y = 18\n// Solution for x and y:\n// x = 2\n// y = -3\n\nconst A = Matrix.of([[5, 1], [3, -4]])\nconst solveA = A.solve([7, 18]) // [2, -3]"
        ],
        "longname": "Matrix#solve"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20017,
                20539
            ],
            "filename": "matrix.js",
            "lineno": 891,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001674",
                "name": "Matrix.prototype.solve",
                "type": "FunctionExpression",
                "paramnames": [
                    "b"
                ]
            },
            "vars": {
                "A": "Matrix#solve~A",
                "LU": "Matrix#solve~LU",
                "L": "Matrix#solve~L",
                "U": "Matrix#solve~U",
                "n": "Matrix#solve~n",
                "s": "Matrix#solve~s",
                "c": "Matrix#solve~c",
                "x": "Matrix#solve~x",
                "k": "Matrix#solve~k",
                "j": "Matrix#solve~j",
                "c[undefined]": "Matrix#solve~c.undefined]",
                "a": "Matrix#solve~a",
                "t": "Matrix#solve~t",
                "b": "Matrix#solve~b",
                "x[undefined]": "Matrix#solve~x.undefined]"
            }
        },
        "undocumented": true,
        "name": "solve",
        "longname": "Matrix#solve",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20065,
                20081
            ],
            "filename": "matrix.js",
            "lineno": 892,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001684",
                "name": "A",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "A",
        "longname": "Matrix#solve~A",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20090,
                20101
            ],
            "filename": "matrix.js",
            "lineno": 893,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001691",
                "name": "LU",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "LU",
        "longname": "Matrix#solve~LU",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20110,
                20119
            ],
            "filename": "matrix.js",
            "lineno": 894,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001698",
                "name": "L",
                "type": "MemberExpression",
                "value": "LU[0]"
            }
        },
        "undocumented": true,
        "name": "L",
        "longname": "Matrix#solve~L",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20128,
                20137
            ],
            "filename": "matrix.js",
            "lineno": 895,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001704",
                "name": "U",
                "type": "MemberExpression",
                "value": "LU[1]"
            }
        },
        "undocumented": true,
        "name": "U",
        "longname": "Matrix#solve~U",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20146,
                20164
            ],
            "filename": "matrix.js",
            "lineno": 896,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001710",
                "name": "n",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "Matrix#solve~n",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20171,
                20176
            ],
            "filename": "matrix.js",
            "lineno": 897,
            "columnno": 6,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001717",
                "name": "s",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "s",
        "longname": "Matrix#solve~s",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20185,
                20191
            ],
            "filename": "matrix.js",
            "lineno": 898,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001721",
                "name": "c",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "c",
        "longname": "Matrix#solve~c",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20200,
                20206
            ],
            "filename": "matrix.js",
            "lineno": 899,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001725",
                "name": "x",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "x",
        "longname": "Matrix#solve~x",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20219,
                20224
            ],
            "filename": "matrix.js",
            "lineno": 901,
            "columnno": 11,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001730",
                "name": "k",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "k",
        "longname": "Matrix#solve~k",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20253,
                20258
            ],
            "filename": "matrix.js",
            "lineno": 902,
            "columnno": 13,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001741",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#solve~j",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20280,
                20310
            ],
            "filename": "matrix.js",
            "lineno": 903,
            "columnno": 6,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001751",
                "name": "s",
                "type": "BinaryExpression",
                "funcscope": "Matrix#solve",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "s",
        "longname": "Matrix#solve~s",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20321,
                20336
            ],
            "filename": "matrix.js",
            "lineno": 905,
            "columnno": 4,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001767",
                "name": "c[undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#solve",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "Matrix#solve~c.undefined]",
        "kind": "member",
        "memberof": "Matrix#solve~c",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20341,
                20346
            ],
            "filename": "matrix.js",
            "lineno": 906,
            "columnno": 4,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001777",
                "name": "s",
                "type": "Literal",
                "funcscope": "Matrix#solve",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "s",
        "longname": "Matrix#solve~s",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20362,
                20371
            ],
            "filename": "matrix.js",
            "lineno": 908,
            "columnno": 11,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001782",
                "name": "a",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "a",
        "longname": "Matrix#solve~a",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20396,
                20401
            ],
            "filename": "matrix.js",
            "lineno": 909,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001795",
                "name": "t",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "t",
        "longname": "Matrix#solve~t",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20415,
                20424
            ],
            "filename": "matrix.js",
            "lineno": 910,
            "columnno": 13,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001800",
                "name": "b",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "b",
        "longname": "Matrix#solve~b",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20446,
                20476
            ],
            "filename": "matrix.js",
            "lineno": 911,
            "columnno": 6,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001812",
                "name": "t",
                "type": "BinaryExpression",
                "funcscope": "Matrix#solve",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "t",
        "longname": "Matrix#solve~t",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20487,
                20522
            ],
            "filename": "matrix.js",
            "lineno": 913,
            "columnno": 4,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001828",
                "name": "x[undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#solve",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "Matrix#solve~x.undefined]",
        "kind": "member",
        "memberof": "Matrix#solve~x",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member inverse\n * @instance\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[1, 1], [2, 4]]).inverse()\n * // [ [ 2, -0.5 ], [ -1, 0.5 ] ]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 918,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "inverse",
        "scope": "instance",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [2, 4]]).inverse()\n// [ [ 2, -0.5 ], [ -1, 0.5 ] ]"
        ],
        "longname": "Matrix#inverse"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20726,
                21035
            ],
            "filename": "matrix.js",
            "lineno": 929,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001848",
                "name": "Matrix.prototype.inverse",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "A": "Matrix#inverse~A",
                "I": "Matrix#inverse~I",
                "Inv": "Matrix#inverse~Inv",
                "result": "Matrix#inverse~result",
                "": null
            }
        },
        "undocumented": true,
        "name": "inverse",
        "longname": "Matrix#inverse",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20775,
                20791
            ],
            "filename": "matrix.js",
            "lineno": 930,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001857",
                "name": "A",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "A",
        "longname": "Matrix#inverse~A",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20800,
                20816
            ],
            "filename": "matrix.js",
            "lineno": 931,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001864",
                "name": "I",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "I",
        "longname": "Matrix#inverse~I",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20825,
                20849
            ],
            "filename": "matrix.js",
            "lineno": 932,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001871",
                "name": "Inv",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Inv",
        "longname": "Matrix#inverse~Inv",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20859,
                21006
            ],
            "filename": "matrix.js",
            "lineno": 934,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001882",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "Matrix#inverse~result",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20919,
                20938
            ],
            "filename": "matrix.js",
            "lineno": 935,
            "columnno": 10,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001896",
                "name": "half",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "half",
        "longname": "<anonymous>~half",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member rank\n * @instance\n * @returns {Number}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 942,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "rank",
        "scope": "instance",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "longname": "Matrix#rank"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21115,
                21296
            ],
            "filename": "matrix.js",
            "lineno": 948,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001926",
                "name": "Matrix.prototype.rank",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "rref": "Matrix#rank~rref",
                "result": "Matrix#rank~result",
                "i": "Matrix#rank~i"
            }
        },
        "undocumented": true,
        "name": "rank",
        "longname": "Matrix#rank",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21161,
                21179
            ],
            "filename": "matrix.js",
            "lineno": 949,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001935",
                "name": "rref",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "rref",
        "longname": "Matrix#rank~rref",
        "kind": "constant",
        "memberof": "Matrix#rank",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21186,
                21196
            ],
            "filename": "matrix.js",
            "lineno": 950,
            "columnno": 6,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001942",
                "name": "result",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "Matrix#rank~result",
        "kind": "member",
        "memberof": "Matrix#rank",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21208,
                21213
            ],
            "filename": "matrix.js",
            "lineno": 951,
            "columnno": 11,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001947",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rank~i",
        "kind": "member",
        "memberof": "Matrix#rank",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21246,
                21274
            ],
            "filename": "matrix.js",
            "lineno": 952,
            "columnno": 4,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001960",
                "name": "result",
                "type": "MemberExpression",
                "funcscope": "Matrix#rank",
                "value": "rref.__value[undefined][undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "Matrix#rank~result",
        "kind": "member",
        "memberof": "Matrix#rank",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member dimension\n * @instance\n * @see rank\n * @returns {Number}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 957,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "dimension",
        "scope": "instance",
        "see": [
            "rank"
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "longname": "Matrix#dimension"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21394,
                21459
            ],
            "filename": "matrix.js",
            "lineno": 964,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001972",
                "name": "Matrix.prototype.dimension",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dimension",
        "longname": "Matrix#dimension",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member diag\n * @instance\n * @desc Returns an array containing the values on the diagonal\n * @returns {Array}\n * @example\n *\n * const diag1 = Matrix.ones(3, 3).diag()\n * // [1, 1, 1]\n *\n * const diag0 = Matrix.zeros(5, 5).diag()\n * // [0, 0, 0, 0, 0]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 968,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "diag",
        "scope": "instance",
        "description": "Returns an array containing the values on the diagonal",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.ones(3, 3).diag()\n// [1, 1, 1]\n\nconst diag0 = Matrix.zeros(5, 5).diag()\n// [0, 0, 0, 0, 0]"
        ],
        "longname": "Matrix#diag"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21746,
                21871
            ],
            "filename": "matrix.js",
            "lineno": 983,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100001986",
                "name": "Matrix.prototype.diag",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "diag",
        "longname": "Matrix#diag",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function diag\n * @desc Returns an array containing the values on the diagonal\n * @param M {Matrix|Array} Matrix from which to return the diagonal\n * @returns {Array}\n * @example\n *\n * const diag1 = Matrix.diag([[2, 1], [1, 5]])\n * // [2, 5]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 989,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "diag",
        "description": "Returns an array containing the values on the diagonal",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix from which to return the diagonal",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.diag([[2, 1], [1, 5]])\n// [2, 5]"
        ],
        "scope": "static",
        "longname": "Matrix.diag"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22149,
                22208
            ],
            "filename": "matrix.js",
            "lineno": 1001,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002017",
                "name": "Matrix.diag",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "diag",
        "longname": "Matrix.diag",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member diagproduct\n * @instance\n * @desc Returns the product of the values on the diagonal\n * @returns {Number}\n * @example\n *\n * const diag1 = Matrix.ones(3, 3).diagproduct()\n * // 1\n *\n * const diag0 = Matrix.zeros(5, 5).diagproduct()\n * // 0\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1005,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "diagproduct",
        "scope": "instance",
        "description": "Returns the product of the values on the diagonal",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.ones(3, 3).diagproduct()\n// 1\n\nconst diag0 = Matrix.zeros(5, 5).diagproduct()\n// 0"
        ],
        "longname": "Matrix#diagproduct"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22490,
                22624
            ],
            "filename": "matrix.js",
            "lineno": 1020,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002034",
                "name": "Matrix.prototype.diagproduct",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "diagproduct",
        "longname": "Matrix#diagproduct",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22572,
                22585
            ],
            "filename": "matrix.js",
            "lineno": 1022,
            "columnno": 4,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002053",
                "name": "acc",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "x[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function diagproduct\n * @desc Returns the product of the values on the diagonal\n * @param M {Matrix|Array} Matrix from which to return the diagonal\n * @returns {Number}\n * @example\n *\n * const diag1 = Matrix.diagproduct([[2, 1], [1, 5]])\n * // 10\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1027,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "diagproduct",
        "description": "Returns the product of the values on the diagonal",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix from which to return the diagonal",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.diagproduct([[2, 1], [1, 5]])\n// 10"
        ],
        "scope": "static",
        "longname": "Matrix.diagproduct"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22908,
                22981
            ],
            "filename": "matrix.js",
            "lineno": 1039,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002065",
                "name": "Matrix.diagproduct",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "diagproduct",
        "longname": "Matrix.diagproduct",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member sum\n * @instance\n * @desc Returns the sum of the values in the Matrix\n * @returns {Number}\n * @example\n *\n * const diag1 = Matrix.ones(3, 3).sum()\n * // 9\n *\n * const diag0 = Matrix.zeros(5, 5).sum()\n * // 0\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1043,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "sum",
        "scope": "instance",
        "description": "Returns the sum of the values in the Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.ones(3, 3).sum()\n// 9\n\nconst diag0 = Matrix.zeros(5, 5).sum()\n// 0"
        ],
        "longname": "Matrix#sum"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23233,
                23387
            ],
            "filename": "matrix.js",
            "lineno": 1058,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002082",
                "name": "Matrix.prototype.sum",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "sum",
        "longname": "Matrix#sum",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23302,
                23348
            ],
            "filename": "matrix.js",
            "lineno": 1060,
            "columnno": 4,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002100",
                "name": "acc",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function sum\n * @desc Returns the sum of the values in the Matrix\n * @param M {Matrix|Array} Matrix from which to return the diagonal\n * @returns {Number}\n * @example\n *\n * const diag1 = Matrix.sum([[2, 1], [1, 5]])\n * // 9\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1065,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "sum",
        "description": "Returns the sum of the values in the Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix from which to return the diagonal",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.sum([[2, 1], [1, 5]])\n// 9"
        ],
        "scope": "static",
        "longname": "Matrix.sum"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23648,
                23705
            ],
            "filename": "matrix.js",
            "lineno": 1077,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002121",
                "name": "Matrix.sum",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "sum",
        "longname": "Matrix.sum",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member kronecker\n * @instance\n * @desc The Kronecker product is an operation on two matrices of arbitrary size resulting in a block matrix.\n * @param M {Matrix} The right side Matrix of the product (this ⊗ M)\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1081,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "kronecker",
        "scope": "instance",
        "description": "The Kronecker product is an operation on two matrices of arbitrary size resulting in a block matrix.",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The right side Matrix of the product (this ⊗ M)",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#kronecker"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23969,
                24472
            ],
            "filename": "matrix.js",
            "lineno": 1089,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002138",
                "name": "Matrix.prototype.kronecker",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "m": "Matrix#kronecker~m",
                "n": "Matrix#kronecker~n",
                "p": "Matrix#kronecker~p",
                "q": "Matrix#kronecker~q",
                "left": "Matrix#kronecker~left",
                "right": "Matrix#kronecker~right",
                "frame": "Matrix#kronecker~frame",
                "i": "Matrix#kronecker~i",
                "j": "Matrix#kronecker~j",
                "k": "Matrix#kronecker~k",
                "l": "Matrix#kronecker~l",
                "frame[undefined][undefined]": "Matrix#kronecker~frame.undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "kronecker",
        "longname": "Matrix#kronecker",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24021,
                24039
            ],
            "filename": "matrix.js",
            "lineno": 1090,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002148",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix#kronecker~m",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24048,
                24066
            ],
            "filename": "matrix.js",
            "lineno": 1091,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002155",
                "name": "n",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "Matrix#kronecker~n",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24075,
                24090
            ],
            "filename": "matrix.js",
            "lineno": 1092,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002162",
                "name": "p",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "p",
        "longname": "Matrix#kronecker~p",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24099,
                24114
            ],
            "filename": "matrix.js",
            "lineno": 1093,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002169",
                "name": "q",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "q",
        "longname": "Matrix#kronecker~q",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24124,
                24143
            ],
            "filename": "matrix.js",
            "lineno": 1095,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002176",
                "name": "left",
                "type": "MemberExpression",
                "value": "this.__value"
            }
        },
        "undocumented": true,
        "name": "left",
        "longname": "Matrix#kronecker~left",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24152,
                24169
            ],
            "filename": "matrix.js",
            "lineno": 1096,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002182",
                "name": "right",
                "type": "MemberExpression",
                "value": "M.__value"
            }
        },
        "undocumented": true,
        "name": "right",
        "longname": "Matrix#kronecker~right",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24179,
                24209
            ],
            "filename": "matrix.js",
            "lineno": 1098,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002188",
                "name": "frame",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "frame",
        "longname": "Matrix#kronecker~frame",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24222,
                24227
            ],
            "filename": "matrix.js",
            "lineno": 1100,
            "columnno": 11,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002200",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#kronecker~i",
        "kind": "member",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24256,
                24261
            ],
            "filename": "matrix.js",
            "lineno": 1101,
            "columnno": 13,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002211",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#kronecker~j",
        "kind": "member",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24292,
                24297
            ],
            "filename": "matrix.js",
            "lineno": 1102,
            "columnno": 15,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002222",
                "name": "k",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "k",
        "longname": "Matrix#kronecker~k",
        "kind": "member",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24330,
                24335
            ],
            "filename": "matrix.js",
            "lineno": 1103,
            "columnno": 17,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002233",
                "name": "l",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "l",
        "longname": "Matrix#kronecker~l",
        "kind": "member",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24361,
                24415
            ],
            "filename": "matrix.js",
            "lineno": 1104,
            "columnno": 10,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002243",
                "name": "frame[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#kronecker",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined][undefined]",
        "longname": "Matrix#kronecker~frame.undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#kronecker~frame",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function kronecker\n * @desc The Kronecker product is an operation on two matrices of arbitrary size resulting in a block matrix.\n * @param A {Matrix} The left side Matrix of the product (A ⊗ B)\n * @param B {Matrix} The right side Matrix of the product (A ⊗ B)\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1113,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "kronecker",
        "description": "The Kronecker product is an operation on two matrices of arbitrary size resulting in a block matrix.",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The left side Matrix of the product (A ⊗ B)",
                "name": "A"
            },
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The right side Matrix of the product (A ⊗ B)",
                "name": "B"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "scope": "static",
        "longname": "Matrix.kronecker"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24787,
                24860
            ],
            "filename": "matrix.js",
            "lineno": 1121,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002275",
                "name": "Matrix.kronecker",
                "type": "FunctionExpression",
                "paramnames": [
                    "A",
                    "B"
                ]
            }
        },
        "undocumented": true,
        "name": "kronecker",
        "longname": "Matrix.kronecker",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member gpuMap\n * @description Maps over the rows of the matrix using a map function using the GPU\n * @param f {function} An GPU.js enabled iterator function\n * @returns {Matrix}\n * @example\n *\n * function gpuMapper (a) { return a[this.thread.y][this.thread.x] }\n * const m = Matrix.of([[2, 2], [2, 2]], GPUJS)\n * m.gpuMap(gpuMapper)\n * // [Float32Array(2,2), Float32Array(2,2)]\n *\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1129,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "gpuMap",
        "description": "Maps over the rows of the matrix using a map function using the GPU",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "An GPU.js enabled iterator function",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "function gpuMapper (a) { return a[this.thread.y][this.thread.x] }\nconst m = Matrix.of([[2, 2], [2, 2]], GPUJS)\nm.gpuMap(gpuMapper)\n// [Float32Array(2,2), Float32Array(2,2)]"
        ],
        "longname": "Matrix#gpuMap"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25367,
                25465
            ],
            "filename": "matrix.js",
            "lineno": 1145,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002294",
                "name": "Matrix.prototype.gpuMap",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            }
        },
        "undocumented": true,
        "name": "gpuMap",
        "longname": "Matrix#gpuMap",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function gpuMap\n * @description Static function that maps over the rows of the matrix using a map function using the GPU\n * @param f {function} An GPU.js enabled iterator function\n * @param M {Matrix|array} Matrix or array to map\n * @returns {Matrix}\n * @example\n *\n * function gpuMapper (a) { return a[this.thread.y][this.thread.x] }\n * const m = Matrix.gpuMap(GPUJS, gpuMapper, [[2, 2], [2, 2]])\n * // [Float32Array(2,2), Float32Array(2,2)]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1149,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "gpuMap",
        "description": "Static function that maps over the rows of the matrix using a map function using the GPU",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "An GPU.js enabled iterator function",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "array"
                    ]
                },
                "description": "Matrix or array to map",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "function gpuMapper (a) { return a[this.thread.y][this.thread.x] }\nconst m = Matrix.gpuMap(GPUJS, gpuMapper, [[2, 2], [2, 2]])\n// [Float32Array(2,2), Float32Array(2,2)]"
        ],
        "longname": "Matrix.gpuMap"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25956,
                26040
            ],
            "filename": "matrix.js",
            "lineno": 1164,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002318",
                "name": "Matrix.gpuMap",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "gpuMap",
        "longname": "Matrix.gpuMap",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member gpuFold\n * @description Folds the rows of the matrix using a GPUS.js enqbled reduce function, using the GPU\n * @param f {function} An iterator function\n * @returns {Matrix}\n * @example\n *\n * const m = Matrix.of([[1, 1], [1, 1]])\n * m.map(x => x.map(y => y+ 1))\n * // [[2, 2], [2, 2]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1168,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "gpuFold",
        "description": "Folds the rows of the matrix using a GPUS.js enqbled reduce function, using the GPU",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "An iterator function",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const m = Matrix.of([[1, 1], [1, 1]])\nm.map(x => x.map(y => y+ 1))\n// [[2, 2], [2, 2]]"
        ],
        "longname": "Matrix#gpuFold"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26381,
                26497
            ],
            "filename": "matrix.js",
            "lineno": 1182,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002341",
                "name": "Matrix.prototype.gpuFold",
                "type": "FunctionExpression",
                "paramnames": [
                    "f",
                    "output"
                ]
            }
        },
        "undocumented": true,
        "name": "gpuFold",
        "longname": "Matrix#gpuFold",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26499,
                26626
            ],
            "filename": "matrix.js",
            "lineno": 1186,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002367",
                "name": "Matrix.prototype.gpuProduct",
                "type": "FunctionExpression",
                "paramnames": [
                    "f",
                    "output",
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "gpuProduct",
        "longname": "Matrix#gpuProduct",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26628,
                26649
            ],
            "filename": "matrix.js",
            "lineno": 1190,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src",
            "code": {
                "id": "astnode100002395",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                37,
                139
            ],
            "filename": "addMatrix.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002405",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                37,
                99
            ],
            "filename": "addScalar.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002442",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function concat\n * @param M {Matrix}\n * @param m {Array}\n * @param idx {number}\n * @returns {Array}\n */",
        "meta": {
            "filename": "concat.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "concat",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "M"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "idx"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "concat",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                152,
                233
            ],
            "filename": "concat.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002467",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function dot\n * @param B {Matrix}\n * @param a {Array}\n * @returns {Array}\n */",
        "meta": {
            "filename": "dot.js",
            "lineno": 4,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "dot",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "B"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "a"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "dot",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                157,
                339
            ],
            "filename": "dot.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002498",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                252,
                295
            ],
            "filename": "dot.js",
            "lineno": 12,
            "columnno": 4,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002522",
                "name": "acc",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                31,
                60
            ],
            "filename": "empty.js",
            "lineno": 2,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002551",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function generate\n * @desc Generator function for a matrix array, values are set to undefined\n * @param rows {number}\n * @param cols {number}\n * @returns {any[][]}\n */",
        "meta": {
            "filename": "generate.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "generate",
        "description": "Generator function for a matrix array, values are set to undefined",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Array.<any>>"
                    ]
                }
            }
        ],
        "longname": "generate",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                206,
                376
            ],
            "filename": "generate.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002563",
                "name": "module.exports",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "rows",
                    "cols",
                    "value"
                ]
            },
            "vars": {
                "_cols": "module.exports~_cols",
                "y": "module.exports~y",
                "": null
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                270,
                290
            ],
            "filename": "generate.js",
            "lineno": 11,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002574",
                "name": "_cols",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "_cols",
        "longname": "module.exports~_cols",
        "kind": "constant",
        "memberof": "module.exports",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                299,
                336
            ],
            "filename": "generate.js",
            "lineno": 12,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002580",
                "name": "y",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "y",
        "longname": "module.exports~y",
        "kind": "constant",
        "memberof": "module.exports",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                0,
                215
            ],
            "filename": "gpudot.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002603",
                "name": "module.exports",
                "type": "FunctionDeclaration",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15,
                215
            ],
            "filename": "gpudot.js",
            "lineno": 1,
            "columnno": 15,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002604",
                "name": "dot",
                "type": "FunctionDeclaration",
                "paramnames": []
            },
            "vars": {
                "a": "dot~a",
                "b": "dot~b",
                "sum": "dot~sum",
                "i": "dot~i"
            }
        },
        "undocumented": true,
        "name": "dot",
        "longname": "dot",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                41,
                57
            ],
            "filename": "gpudot.js",
            "lineno": 2,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002608",
                "name": "a",
                "type": "MemberExpression",
                "value": "arguments[0]"
            }
        },
        "undocumented": true,
        "name": "a",
        "longname": "dot~a",
        "kind": "constant",
        "memberof": "dot",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66,
                82
            ],
            "filename": "gpudot.js",
            "lineno": 3,
            "columnno": 8,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002614",
                "name": "b",
                "type": "MemberExpression",
                "value": "arguments[1]"
            }
        },
        "undocumented": true,
        "name": "b",
        "longname": "dot~b",
        "kind": "constant",
        "memberof": "dot",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                89,
                96
            ],
            "filename": "gpudot.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002620",
                "name": "sum",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "sum",
        "longname": "dot~sum",
        "kind": "member",
        "memberof": "dot",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                108,
                113
            ],
            "filename": "gpudot.js",
            "lineno": 5,
            "columnno": 11,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002625",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "dot~i",
        "kind": "member",
        "memberof": "dot",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                148,
                196
            ],
            "filename": "gpudot.js",
            "lineno": 6,
            "columnno": 4,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002639",
                "name": "sum",
                "type": "BinaryExpression",
                "funcscope": "dot",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sum",
        "longname": "dot~sum",
        "kind": "member",
        "memberof": "dot",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                0,
                229
            ],
            "filename": "gpufold.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002664",
                "name": "module.exports",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "gpu",
                    "f",
                    "output",
                    "matrix",
                    "constants"
                ]
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15,
                229
            ],
            "filename": "gpufold.js",
            "lineno": 1,
            "columnno": 15,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002665",
                "name": "gpufold",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "gpu",
                    "f",
                    "output",
                    "matrix",
                    "constants"
                ]
            }
        },
        "undocumented": true,
        "name": "gpufold",
        "longname": "gpufold",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                111,
                193
            ],
            "filename": "gpufold.js",
            "lineno": 3,
            "columnno": 23,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002685",
                "name": "constants",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "constants",
        "longname": "constants",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                142,
                158
            ],
            "filename": "gpufold.js",
            "lineno": 3,
            "columnno": 54,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002692",
                "name": "m",
                "type": "MemberExpression",
                "value": "matrix.length"
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "m",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                160,
                179
            ],
            "filename": "gpufold.js",
            "lineno": 3,
            "columnno": 72,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002696",
                "name": "n",
                "type": "MemberExpression",
                "value": "matrix[0].length"
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "n",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                41,
                174
            ],
            "filename": "gpumap.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002708",
                "name": "module.exports",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "gpu",
                    "f",
                    "matrix"
                ]
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                56,
                174
            ],
            "filename": "gpumap.js",
            "lineno": 3,
            "columnno": 15,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002709",
                "name": "gpumap",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "gpu",
                    "f",
                    "matrix"
                ]
            }
        },
        "undocumented": true,
        "name": "gpumap",
        "longname": "gpumap",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * @function identity\n * @desc Creates an identiy matrix from an empty array\n * @param m {Array}\n * @param idx {number}\n * @return {Matrix}\n */",
        "meta": {
            "filename": "identity.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "identity",
        "description": "Creates an identiy matrix from an empty array",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "idx"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "identity",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                178,
                245
            ],
            "filename": "identity.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002741",
                "name": "module.exports",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "m",
                    "idx"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function round\n * @param value {number}\n * @param decimals {number}\n * @returns {Number}\n */",
        "meta": {
            "filename": "round.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "round",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "decimals"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "longname": "round",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                101,
                222
            ],
            "filename": "round.js",
            "lineno": 7,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002759",
                "name": "module.exports",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value",
                    "decimals"
                ]
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                116,
                222
            ],
            "filename": "round.js",
            "lineno": 7,
            "columnno": 15,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002760",
                "name": "round",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value",
                    "decimals"
                ]
            }
        },
        "undocumented": true,
        "name": "round",
        "longname": "round",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * @function transpose\n * @desc Transposes a array of arrays using the Matrix.map function\n * @param m {Array}\n * @param idx {number}\n * @return {Matrix}\n */",
        "meta": {
            "filename": "transpose.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "transpose",
        "description": "Transposes a array of arrays using the Matrix.map function",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "idx"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "transpose",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                199,
                292
            ],
            "filename": "transpose.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/Volumes/BigOne/Github/fun-matrix/src/util",
            "code": {
                "id": "astnode100002789",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/Volumes/BigOne/Github/fun-matrix/src/matrix.js",
            "/Volumes/BigOne/Github/fun-matrix/src/util/addMatrix.js",
            "/Volumes/BigOne/Github/fun-matrix/src/util/addScalar.js",
            "/Volumes/BigOne/Github/fun-matrix/src/util/concat.js",
            "/Volumes/BigOne/Github/fun-matrix/src/util/dot.js",
            "/Volumes/BigOne/Github/fun-matrix/src/util/empty.js",
            "/Volumes/BigOne/Github/fun-matrix/src/util/generate.js",
            "/Volumes/BigOne/Github/fun-matrix/src/util/gpudot.js",
            "/Volumes/BigOne/Github/fun-matrix/src/util/gpufold.js",
            "/Volumes/BigOne/Github/fun-matrix/src/util/gpumap.js",
            "/Volumes/BigOne/Github/fun-matrix/src/util/identity.js",
            "/Volumes/BigOne/Github/fun-matrix/src/util/round.js",
            "/Volumes/BigOne/Github/fun-matrix/src/util/transpose.js"
        ]
    }
]
