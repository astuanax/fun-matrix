[
    {
        "comment": "/**\n * @class Matrix\n * @classdesc Matrix applicative providing standard matrix operations\n * @summary The Matrix class should not be instantiated with the new keyword. Instead use the Matrix.of syntax to create a new Matrix. Unfortunatly jsdocs does not allow for the constructor to be hidden.\n * @hidecontructor\n * @see of\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "kind": "class",
        "name": "Matrix",
        "classdesc": "Matrix applicative providing standard matrix operations",
        "summary": "The Matrix class should not be instantiated with the new keyword. Instead use the Matrix.of syntax to create a new Matrix. Unfortunatly jsdocs does not allow for the constructor to be hidden.",
        "tags": [
            {
                "originalTitle": "hidecontructor",
                "title": "hidecontructor",
                "text": ""
            }
        ],
        "see": [
            "of"
        ],
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])"
        ],
        "longname": "Matrix",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                708,
                756
            ],
            "filename": "matrix.js",
            "lineno": 22,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000039",
                "name": "Matrix",
                "type": "FunctionExpression"
            },
            "vars": {
                "this.__value": null
            }
        },
        "undocumented": true,
        "name": "Matrix",
        "longname": "Matrix",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                736,
                754
            ],
            "filename": "matrix.js",
            "lineno": 23,
            "columnno": 2,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000045",
                "name": "this.__value",
                "type": "Identifier",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value",
        "longname": "__value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @property {string} type\n * @type {string}\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n * m.type === 'Matrix'\n */",
        "meta": {
            "range": [
                914,
                946
            ],
            "filename": "matrix.js",
            "lineno": 35,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000051",
                "name": "Matrix.prototype.type",
                "type": "Literal",
                "value": "Matrix",
                "paramnames": []
            }
        },
        "memberof": "Matrix",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "type"
            }
        ],
        "type": {
            "names": [
                "string"
            ]
        },
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])\nm.type === 'Matrix'"
        ],
        "name": "type",
        "longname": "Matrix#type",
        "kind": "member",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @property {number} precision\n * @type {number}\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n * m.precision === 4\n */",
        "meta": {
            "range": [
                1107,
                1137
            ],
            "filename": "matrix.js",
            "lineno": 46,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000059",
                "name": "Matrix.prototype.precision",
                "type": "Literal",
                "value": 4,
                "paramnames": []
            }
        },
        "memberof": "Matrix",
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "precision"
            }
        ],
        "type": {
            "names": [
                "number"
            ]
        },
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])\nm.precision === 4"
        ],
        "name": "precision",
        "longname": "Matrix#precision",
        "kind": "member",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member setPrecision\n * @param precision {number} Set the number of decimals for rounding\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n * m.setPrecision(10)\n * m.precision === 10\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 48,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "setPrecision",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Set the number of decimals for rounding",
                "name": "precision"
            }
        ],
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])\nm.setPrecision(10)\nm.precision === 10"
        ],
        "longname": "Matrix#setPrecision"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1377,
                1462
            ],
            "filename": "matrix.js",
            "lineno": 59,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000067",
                "name": "Matrix.prototype.setPrecision",
                "type": "FunctionExpression",
                "paramnames": [
                    "precision"
                ]
            },
            "vars": {
                "this.precision": "Matrix#setPrecision#precision"
            }
        },
        "undocumented": true,
        "name": "setPrecision",
        "longname": "Matrix#setPrecision",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1434,
                1460
            ],
            "filename": "matrix.js",
            "lineno": 60,
            "columnno": 2,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000077",
                "name": "this.precision",
                "type": "Identifier",
                "value": "precision",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "precision",
        "longname": "Matrix#setPrecision#precision",
        "kind": "member",
        "memberof": "Matrix#setPrecision",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member isSymmetric\n * @returns {boolean}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * true === A.isSymmetric()\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 63,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "isSymmetric",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\ntrue === A.isSymmetric()"
        ],
        "longname": "Matrix#isSymmetric"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1637,
                1773
            ],
            "filename": "matrix.js",
            "lineno": 74,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000083",
                "name": "Matrix.prototype.isSymmetric",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "a": "Matrix#isSymmetric~a",
                "b": "Matrix#isSymmetric~b"
            }
        },
        "undocumented": true,
        "name": "isSymmetric",
        "longname": "Matrix#isSymmetric",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1690,
                1706
            ],
            "filename": "matrix.js",
            "lineno": 75,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000092",
                "name": "a",
                "type": "MemberExpression",
                "value": "this.__value"
            }
        },
        "undocumented": true,
        "name": "a",
        "longname": "Matrix#isSymmetric~a",
        "kind": "constant",
        "memberof": "Matrix#isSymmetric",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1715,
                1749
            ],
            "filename": "matrix.js",
            "lineno": 76,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000098",
                "name": "b",
                "type": "MemberExpression",
                "value": ".__value"
            }
        },
        "undocumented": true,
        "name": "b",
        "longname": "Matrix#isSymmetric~b",
        "kind": "constant",
        "memberof": "Matrix#isSymmetric",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member isOrthogonal\n * @param M {Matrix|array}\n * @returns {boolean}\n * @example\n *\n * const result = [[-0.3092, -0.9510], [-0.9510, 0.3092]]\n * const A = Matrix.fromArray(result)\n * true  === A.isOrthogonal()\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 80,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "isOrthogonal",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "array"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "examples": [
            "const result = [[-0.3092, -0.9510], [-0.9510, 0.3092]]\nconst A = Matrix.fromArray(result)\ntrue  === A.isOrthogonal()"
        ],
        "longname": "Matrix#isOrthogonal"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2030,
                2172
            ],
            "filename": "matrix.js",
            "lineno": 92,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000113",
                "name": "Matrix.prototype.isOrthogonal",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "AxAt": "Matrix#isOrthogonal~AxAt",
                "I": "Matrix#isOrthogonal~I"
            }
        },
        "undocumented": true,
        "name": "isOrthogonal",
        "longname": "Matrix#isOrthogonal",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2084,
                2117
            ],
            "filename": "matrix.js",
            "lineno": 93,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000122",
                "name": "AxAt",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "AxAt",
        "longname": "Matrix#isOrthogonal~AxAt",
        "kind": "constant",
        "memberof": "Matrix#isOrthogonal",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2126,
                2145
            ],
            "filename": "matrix.js",
            "lineno": 94,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000133",
                "name": "I",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "I",
        "longname": "Matrix#isOrthogonal~I",
        "kind": "constant",
        "memberof": "Matrix#isOrthogonal",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member getCols\n * @returns {number}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * A.getCols()  === 2\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 98,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "getCols",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\nA.getCols()  === 2"
        ],
        "longname": "Matrix#getCols"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2336,
                2410
            ],
            "filename": "matrix.js",
            "lineno": 109,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000145",
                "name": "Matrix.prototype.getCols",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getCols",
        "longname": "Matrix#getCols",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member equals\n * @param M {Matrix|array}\n * @returns {Boolean}\n * @example\n *\n * var a = [[1, 1], [1, 1]]\n * var A = Matrix.of(a)\n * var B = Matrix.of(a)\n * true  === A.equals(B)\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 113,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "equals",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "array"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "var a = [[1, 1], [1, 1]]\nvar A = Matrix.of(a)\nvar B = Matrix.of(a)\ntrue  === A.equals(B)"
        ],
        "longname": "Matrix#equals"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2636,
                2724
            ],
            "filename": "matrix.js",
            "lineno": 126,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000162",
                "name": "Matrix.prototype.equals",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "equals",
        "longname": "Matrix#equals",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member getRows\n * @returns {number}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * A.getRows()  // 2\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 130,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "getRows",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\nA.getRows()  // 2"
        ],
        "longname": "Matrix#getRows"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2884,
                2955
            ],
            "filename": "matrix.js",
            "lineno": 140,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000183",
                "name": "Matrix.prototype.getRows",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getRows",
        "longname": "Matrix#getRows",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member getShape\n * @returns {array}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * A.getShape()  // [2, 2]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 144,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "getShape",
        "returns": [
            {
                "type": {
                    "names": [
                        "array"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\nA.getShape()  // [2, 2]"
        ],
        "longname": "Matrix#getShape"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3121,
                3206
            ],
            "filename": "matrix.js",
            "lineno": 154,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000198",
                "name": "Matrix.prototype.getShape",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getShape",
        "longname": "Matrix#getShape",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function of\n * @desc Creates a Matrix object and flattens the Matrix\n * @param val {array|function} An array of arrays\n * @returns {Matrix}\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 158,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "of",
        "description": "Creates a Matrix object and flattens the Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "array",
                        "function"
                    ]
                },
                "description": "An array of arrays",
                "name": "val"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])"
        ],
        "longname": "Matrix.of"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3454,
                3624
            ],
            "filename": "matrix.js",
            "lineno": 170,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000217",
                "name": "Matrix.of",
                "type": "FunctionExpression",
                "paramnames": [
                    "val"
                ]
            },
            "vars": {
                "this.__value": "Matrix.of#__value"
            }
        },
        "undocumented": true,
        "name": "of",
        "longname": "Matrix.of",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3559,
                3577
            ],
            "filename": "matrix.js",
            "lineno": 173,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000236",
                "name": "this.__value",
                "type": "Identifier",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value",
        "longname": "Matrix.of#__value",
        "kind": "member",
        "memberof": "Matrix.of",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member map\n * @description Maps over the rows of the matrix using a map function\n * @param f {function} An iterator function\n * @returns {Matrix}\n * @example\n *\n * const m = Matrix.of([[1, 1], [1, 1]])\n * m.map(x => x.map(y => y+ 1))\n * // [[2, 2], [2, 2]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 179,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "map",
        "description": "Maps over the rows of the matrix using a map function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "An iterator function",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const m = Matrix.of([[1, 1], [1, 1]])\nm.map(x => x.map(y => y+ 1))\n// [[2, 2], [2, 2]]"
        ],
        "longname": "Matrix#map"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3931,
                4011
            ],
            "filename": "matrix.js",
            "lineno": 193,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000248",
                "name": "Matrix.prototype.map",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "Matrix#map",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function map\n * @description Static function that maps over the rows of the matrix using a map function\n * @param f {function} An iterator function\n * @param M {Matrix|array} Matrix or array to map\n * @returns {Matrix}\n * @example\n *\n * const m = Matrix.map(x= > x.map(y => y+ 1), [[1, 1], [1, 1]])\n * // [[2, 2], [2, 2]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 197,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "map",
        "description": "Static function that maps over the rows of the matrix using a map function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "An iterator function",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "array"
                    ]
                },
                "description": "Matrix or array to map",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const m = Matrix.map(x= > x.map(y => y+ 1), [[1, 1], [1, 1]])\n// [[2, 2], [2, 2]]"
        ],
        "longname": "Matrix.map"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4381,
                4449
            ],
            "filename": "matrix.js",
            "lineno": 211,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000270",
                "name": "Matrix.map",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "Matrix.map",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member fold\n * @description Reduce the matrix rows using a reduce function\n * @param f {function} A reduce/fold function\n * @returns {Matrix}\n * @example\n *\n * // Flatten Matrix\n * Matrix.of([[1, 1], [1, 1]]).fold((prev, next) => prev.concat(next))\n * // [1, 1, 1, 1]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 215,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "fold",
        "description": "Reduce the matrix rows using a reduce function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A reduce/fold function",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "// Flatten Matrix\nMatrix.of([[1, 1], [1, 1]]).fold((prev, next) => prev.concat(next))\n// [1, 1, 1, 1]"
        ],
        "longname": "Matrix#fold"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4764,
                4850
            ],
            "filename": "matrix.js",
            "lineno": 228,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000291",
                "name": "Matrix.prototype.fold",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            }
        },
        "undocumented": true,
        "name": "fold",
        "longname": "Matrix#fold",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function fold\n * @description Static function to reduce the matrix rows using a reduce function\n * @param f {function} A reduce/fold function\n * @param M {Matrix} The Matrix to reduce\n * @returns {Matrix}\n * @example\n\n * // Sum of all matrix values\n * const reducer = (prev, next) => Number(prev) + next.reduce((acc, x) => acc + x, 0)\n * const A = Matrix.of([[1, 1], [1, 1]]\n * Matrix.fold(reducer, A)\n * // 4\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 232,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "fold",
        "description": "Static function to reduce the matrix rows using a reduce function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A reduce/fold function",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The Matrix to reduce",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "// Sum of all matrix values\nconst reducer = (prev, next) => Number(prev) + next.reduce((acc, x) => acc + x, 0)\nconst A = Matrix.of([[1, 1], [1, 1]]\nMatrix.fold(reducer, A)\n// 4"
        ],
        "longname": "Matrix.fold"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5305,
                5375
            ],
            "filename": "matrix.js",
            "lineno": 248,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000314",
                "name": "Matrix.fold",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "fold",
        "longname": "Matrix.fold",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member ap\n * @description Applies a Matrix to a function\n * @param M {Matrix}\n * @returns {Matrix}\n * @example\n *\n * const f = x => x.reduce((prev, next) => prev + next)\n * const A = Matrix.of([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n * Matrix.of(f).ap(M)\n * // [[6], [15], [24]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 252,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "ap",
        "description": "Applies a Matrix to a function",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const f = x => x.reduce((prev, next) => prev + next)\nconst A = Matrix.of([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nMatrix.of(f).ap(M)\n// [[6], [15], [24]"
        ],
        "longname": "Matrix#ap"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5695,
                5773
            ],
            "filename": "matrix.js",
            "lineno": 266,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000335",
                "name": "Matrix.prototype.ap",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "ap",
        "longname": "Matrix#ap",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function ap\n * @description Applies a Matrix to a function\n * @param f {function}\n * @param M {Matrix|array}\n * @returns {Matrix}\n * @example\n *\n * const f = x => x.reduce((prev, next) => prev + next)\n * Matrix.ap(f, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n * // [[6], [15], [24]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 270,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "ap",
        "description": "Applies a Matrix to a function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "array"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const f = x => x.reduce((prev, next) => prev + next)\nMatrix.ap(f, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n// [[6], [15], [24]"
        ],
        "longname": "Matrix.ap"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6093,
                6159
            ],
            "filename": "matrix.js",
            "lineno": 284,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000357",
                "name": "Matrix.ap",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ap",
        "longname": "Matrix.ap",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member concat\n * @description Concatenates 2 Matrices using a function as operator\n * @param M {Matrix}\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 288,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "concat",
        "description": "Concatenates 2 Matrices using a function as operator",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#concat"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6331,
                6420
            ],
            "filename": "matrix.js",
            "lineno": 296,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000378",
                "name": "Matrix.prototype.concat",
                "type": "FunctionExpression",
                "paramnames": [
                    "M",
                    "f"
                ]
            }
        },
        "undocumented": true,
        "name": "concat",
        "longname": "Matrix#concat",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function concat\n * @description Concatenates 2 Matrices using a function as operator\n * @param A {Matrix}\n * @param B {Matrix}\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 300,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "concat",
        "description": "Concatenates 2 Matrices using a function as operator",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "A"
            },
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "B"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.concat"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6613,
                6699
            ],
            "filename": "matrix.js",
            "lineno": 309,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000403",
                "name": "Matrix.concat",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "concat",
        "longname": "Matrix.concat",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member empty\n * @description Return an empty Matrix from an existing Matrix\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 313,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "empty",
        "description": "Return an empty Matrix from an existing Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#empty"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6843,
                6919
            ],
            "filename": "matrix.js",
            "lineno": 320,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000429",
                "name": "Matrix.prototype.empty",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "empty",
        "longname": "Matrix#empty",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function empty\n * @description Return an empty Matrix from an existing Matrix\n * @param rows {number}\n * @param cols {number}\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 324,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "empty",
        "description": "Return an empty Matrix from an existing Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.empty"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7111,
                7283
            ],
            "filename": "matrix.js",
            "lineno": 333,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000448",
                "name": "Matrix.empty",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "empty",
        "longname": "Matrix.empty",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7172,
                7247
            ],
            "filename": "matrix.js",
            "lineno": 334,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000463",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "<anonymous>~m",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member identity\n * @desc Returns an identity matrix\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 340,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "identity",
        "description": "Returns an identity matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#identity"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7425,
                7506
            ],
            "filename": "matrix.js",
            "lineno": 347,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000497",
                "name": "Matrix.prototype.identity",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "identity",
        "longname": "Matrix#identity",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function identity\n * @desc Returns an identity matrix\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 351,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "identity",
        "description": "Returns an identity matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.identity"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7626,
                7788
            ],
            "filename": "matrix.js",
            "lineno": 358,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000516",
                "name": "Matrix.identity",
                "type": "FunctionExpression",
                "paramnames": [
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "m": "Matrix.identity~m",
                "": null
            }
        },
        "undocumented": true,
        "name": "identity",
        "longname": "Matrix.identity",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7676,
                7751
            ],
            "filename": "matrix.js",
            "lineno": 359,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000525",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix.identity~m",
        "kind": "constant",
        "memberof": "Matrix.identity",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member combine\n * @see Matrix.concat\n * @param M\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 363,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "combine",
        "see": [
            "Matrix.concat"
        ],
        "params": [
            {
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#combine"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7905,
                8002
            ],
            "filename": "matrix.js",
            "lineno": 371,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000559",
                "name": "Matrix.prototype.combine",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "combine",
        "longname": "Matrix#combine",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function combine\n * @see Matrix.concat\n * @param M\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 375,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "combine",
        "see": [
            "Matrix.concat"
        ],
        "params": [
            {
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.combine"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8119,
                8206
            ],
            "filename": "matrix.js",
            "lineno": 383,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000584",
                "name": "Matrix.combine",
                "type": "FunctionExpression",
                "paramnames": [
                    "A",
                    "B"
                ]
            }
        },
        "undocumented": true,
        "name": "combine",
        "longname": "Matrix.combine",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member dot\n * @description Returns the dot product between 2 matrices\n * @param M\n * @param f\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 387,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "dot",
        "description": "Returns the dot product between 2 matrices",
        "params": [
            {
                "name": "M"
            },
            {
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#dot"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8368,
                8474
            ],
            "filename": "matrix.js",
            "lineno": 396,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000608",
                "name": "Matrix.prototype.dot",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "dot",
        "longname": "Matrix#dot",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function dot\n * @description Returns the dot product between 2 matrices\n * @param M\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 400,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "dot",
        "description": "Returns the dot product between 2 matrices",
        "params": [
            {
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.dot"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8624,
                8696
            ],
            "filename": "matrix.js",
            "lineno": 408,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000637",
                "name": "Matrix.dot",
                "type": "FunctionExpression",
                "paramnames": [
                    "A",
                    "B"
                ]
            }
        },
        "undocumented": true,
        "name": "dot",
        "longname": "Matrix.dot",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member fill\n * @desc Fill up an empty matrix with the provided map function\n * @param f\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 412,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "fill",
        "description": "Fill up an empty matrix with the provided map function",
        "params": [
            {
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#fill"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8852,
                8937
            ],
            "filename": "matrix.js",
            "lineno": 420,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000660",
                "name": "Matrix.prototype.fill",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "fill",
        "longname": "Matrix#fill",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member zeros\n * @desc Fill up an empty matrix with zeros\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 424,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "zeros",
        "description": "Fill up an empty matrix with zeros",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#zeros"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9062,
                9140
            ],
            "filename": "matrix.js",
            "lineno": 431,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000686",
                "name": "Matrix.prototype.zeros",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "zeros",
        "longname": "Matrix#zeros",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member ones\n * @desc Fill up an empty matrix with ones\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 435,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "ones",
        "description": "Fill up an empty matrix with ones",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#ones"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9263,
                9340
            ],
            "filename": "matrix.js",
            "lineno": 442,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000707",
                "name": "Matrix.prototype.ones",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "ones",
        "longname": "Matrix#ones",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member random\n * @desc Fill up an empty matrix with random values\n * @param {function} [f = e => Math.random() * 2 - 1]\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 446,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "random",
        "description": "Fill up an empty matrix with random values",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "defaultvalue": "e => Math.random() * 2 - 1",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#random"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9528,
                9632
            ],
            "filename": "matrix.js",
            "lineno": 454,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000728",
                "name": "Matrix.prototype.random",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "random",
        "longname": "Matrix#random",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member toArray\n * @desc Returns the array from the matrix\n * @returns {array}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 458,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "toArray",
        "description": "Returns the array from the matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "array"
                    ]
                }
            }
        ],
        "longname": "Matrix#toArray"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9757,
                9853
            ],
            "filename": "matrix.js",
            "lineno": 465,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000759",
                "name": "Matrix.prototype.toArray",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toArray",
        "longname": "Matrix#toArray",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member clone\n * @desc Returns a clone of the matrix\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 469,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "clone",
        "description": "Returns a clone of the matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#clone"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9973,
                10053
            ],
            "filename": "matrix.js",
            "lineno": 476,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000784",
                "name": "Matrix.prototype.clone",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "clone",
        "longname": "Matrix#clone",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member fromArray\n * @desc Returns a Matrix from an array\n * @returns {array}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 480,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "fromArray",
        "description": "Returns a Matrix from an array",
        "returns": [
            {
                "type": {
                    "names": [
                        "array"
                    ]
                }
            }
        ],
        "longname": "Matrix#fromArray"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10177,
                10272
            ],
            "filename": "matrix.js",
            "lineno": 487,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000801",
                "name": "Matrix.fromArray",
                "type": "FunctionExpression",
                "paramnames": [
                    "arr"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "fromArray",
        "longname": "Matrix.fromArray",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member transpose\n * @desc Returns a transposed Matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([-1, 2], [3, 4], [-8, 2])\n * const b = A.transpose().toArray()\n * // returns [[-1, 3,-8], [2, 4, 2]]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 491,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "transpose",
        "description": "Returns a transposed Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([-1, 2], [3, 4], [-8, 2])\nconst b = A.transpose().toArray()\n// returns [[-1, 3,-8], [2, 4, 2]]"
        ],
        "longname": "Matrix#transpose"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10533,
                10631
            ],
            "filename": "matrix.js",
            "lineno": 503,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000827",
                "name": "Matrix.prototype.transpose",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "transpose",
        "longname": "Matrix#transpose",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function transpose\n * @desc Returns a transposed Matrix\n * @param M {Matrix|array} A Matrix or a matrix array\n * @returns {Matrix}\n * @example\n *\n * const a = [-1, 2], [3, 4], [-8, 2]\n * const b = Matrix.transpose(a).toArray()\n * // returns [[-1, 3,-8], [2, 4, 2]]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 507,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "transpose",
        "description": "Returns a transposed Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "array"
                    ]
                },
                "description": "A Matrix or a matrix array",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [-1, 2], [3, 4], [-8, 2]\nconst b = Matrix.transpose(a).toArray()\n// returns [[-1, 3,-8], [2, 4, 2]]"
        ],
        "scope": "static",
        "longname": "Matrix.transpose"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10930,
                10999
            ],
            "filename": "matrix.js",
            "lineno": 519,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000848",
                "name": "Matrix.transpose",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "transpose",
        "longname": "Matrix.transpose",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member add\n * @instance\n * @param M {Matrix|number} Add a Matrix or a number\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.add(1) // [[6, 5]]\n * const B = Matrix.of([[5, 5]])\n * B.add(B) // [[10, 10]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 523,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "add",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "number"
                    ]
                },
                "description": "Add a Matrix or a number",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.add(1) // [[6, 5]]\nconst B = Matrix.of([[5, 5]])\nB.add(B) // [[10, 10]]"
        ],
        "longname": "Matrix#add"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11265,
                11611
            ],
            "filename": "matrix.js",
            "lineno": 537,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000865",
                "name": "Matrix.prototype.add",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "add",
        "longname": "Matrix#add",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member subtract\n * @instance\n * @param M {Matrix|number} Subtract a Matrix or a number\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.subtract(1) // [[4, 2]]\n * const B = Matrix.of([[5, 5]])\n * B.subtract(B) // [[0, 0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 548,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "subtract",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "number"
                    ]
                },
                "description": "Subtract a Matrix or a number",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.subtract(1) // [[4, 2]]\nconst B = Matrix.of([[5, 5]])\nB.subtract(B) // [[0, 0]]"
        ],
        "longname": "Matrix#subtract"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11895,
                12251
            ],
            "filename": "matrix.js",
            "lineno": 562,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000942",
                "name": "Matrix.prototype.subtract",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "subtract",
        "longname": "Matrix#subtract",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member multiply\n * @instance\n * @desc Mutliply a scalar or a mtraix with a matrix. Throws an error if the multiplication is not possible.\n * @param M {Matrix|number}\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.multiply(2) // [[10, 8]]\n * const B = Matrix.of([[5, 5]])\n * B.multiply(B) // [[25, 25]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 573,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "multiply",
        "scope": "instance",
        "description": "Mutliply a scalar or a mtraix with a matrix. Throws an error if the multiplication is not possible.",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "number"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.multiply(2) // [[10, 8]]\nconst B = Matrix.of([[5, 5]])\nB.multiply(B) // [[25, 25]]"
        ],
        "longname": "Matrix#multiply"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12617,
                13063
            ],
            "filename": "matrix.js",
            "lineno": 588,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001019",
                "name": "Matrix.prototype.multiply",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "multiply",
        "longname": "Matrix#multiply",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member additiveinverse\n * @instance\n * @desc Function that returns the matrix obtained by changing the sign of every matrix element. The additive inverse of matrix A is written –A.\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5,-5], [-4, 4]])\n * const minusA = A.additiveinverse()\n * // [[-5, 5], [4, -4]]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 600,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "additiveinverse",
        "scope": "instance",
        "description": "Function that returns the matrix obtained by changing the sign of every matrix element. The additive inverse of matrix A is written –A.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5,-5], [-4, 4]])\nconst minusA = A.additiveinverse()\n// [[-5, 5], [4, -4]]"
        ],
        "longname": "Matrix#additiveinverse"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13419,
                13507
            ],
            "filename": "matrix.js",
            "lineno": 612,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001102",
                "name": "Matrix.prototype.additiveinverse",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "additiveinverse",
        "longname": "Matrix#additiveinverse",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member hadamard\n * @instance\n * @see multiply\n * @param M\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.hadamard(2) // [[10, 8]]\n * const B = Matrix.of([[5, 5]])\n * B.hadamard(B) // [[25, 25]]\n\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 616,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "hadamard",
        "scope": "instance",
        "see": [
            "multiply"
        ],
        "params": [
            {
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.hadamard(2) // [[10, 8]]\nconst B = Matrix.of([[5, 5]])\nB.hadamard(B) // [[25, 25]]"
        ],
        "longname": "Matrix#hadamard"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13763,
                13844
            ],
            "filename": "matrix.js",
            "lineno": 631,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001122",
                "name": "Matrix.prototype.hadamard",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "hadamard",
        "longname": "Matrix#hadamard",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member lu\n * @desc Calculates LU decomposition of the current Matrix\n * @returns {Matrix[]}\n * @example\n *\n * const result = [[3, -7, -2, 2], [-3, 5, 1, 0], [6, -4, 0, -5], [-9, 5, -5, 12]]\n * const A = Matrix.fromArray(result)\n * const lu = A.lu()\n * // L.__value = [ [ 1, 0, 0, 0 ], [ -1, 1, 0, 0 ], [ 2, -5, 1, 0 ], [ -3, 8, 3, 1 ] ]\n * // U.__value =  [ [ 3, -7, -2, 2 ], [ 0, -2, -1, 2 ], [ 0, 0, -1, 1 ], [ 0, 0, 0, -1 ] ]\n * Matrix.dot(lu[0], lu[1]) // returns clone of A\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 635,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "lu",
        "description": "Calculates LU decomposition of the current Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Matrix>"
                    ]
                }
            }
        ],
        "examples": [
            "const result = [[3, -7, -2, 2], [-3, 5, 1, 0], [6, -4, 0, -5], [-9, 5, -5, 12]]\nconst A = Matrix.fromArray(result)\nconst lu = A.lu()\n// L.__value = [ [ 1, 0, 0, 0 ], [ -1, 1, 0, 0 ], [ 2, -5, 1, 0 ], [ -3, 8, 3, 1 ] ]\n// U.__value =  [ [ 3, -7, -2, 2 ], [ 0, -2, -1, 2 ], [ 0, 0, -1, 1 ], [ 0, 0, 0, -1 ] ]\nMatrix.dot(lu[0], lu[1]) // returns clone of A"
        ],
        "longname": "Matrix#lu"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14373,
                15010
            ],
            "filename": "matrix.js",
            "lineno": 651,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001142",
                "name": "Matrix.prototype.lu",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "n": "Matrix#lu~n",
                "tol": "Matrix#lu~tol",
                "A": "Matrix#lu~A",
                "L": "Matrix#lu~L",
                "U": "Matrix#lu~U",
                "k": "Matrix#lu~k",
                "L.__value[undefined][undefined]": "Matrix#lu~L.__value[undefined][undefined]",
                "i": "Matrix#lu~i",
                "j": "Matrix#lu~j",
                "A.__value[undefined][undefined]": "Matrix#lu~A.__value[undefined][undefined]",
                "l": "Matrix#lu~l",
                "U.__value[undefined][undefined]": "Matrix#lu~U.__value[undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "lu",
        "longname": "Matrix#lu",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14417,
                14435
            ],
            "filename": "matrix.js",
            "lineno": 652,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001151",
                "name": "n",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "Matrix#lu~n",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14444,
                14454
            ],
            "filename": "matrix.js",
            "lineno": 653,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001158",
                "name": "tol",
                "type": "Literal",
                "value": 0.000001
            }
        },
        "undocumented": true,
        "name": "tol",
        "longname": "Matrix#lu~tol",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14463,
                14479
            ],
            "filename": "matrix.js",
            "lineno": 654,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001162",
                "name": "A",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "A",
        "longname": "Matrix#lu~A",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14488,
                14504
            ],
            "filename": "matrix.js",
            "lineno": 655,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001169",
                "name": "L",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "L",
        "longname": "Matrix#lu~L",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14513,
                14529
            ],
            "filename": "matrix.js",
            "lineno": 656,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001176",
                "name": "U",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "U",
        "longname": "Matrix#lu~U",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14542,
                14547
            ],
            "filename": "matrix.js",
            "lineno": 658,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001184",
                "name": "k",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "k",
        "longname": "Matrix#lu~k",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14661,
                14680
            ],
            "filename": "matrix.js",
            "lineno": 660,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001212",
                "name": "L.__value[undefined][undefined]",
                "type": "Literal",
                "funcscope": "Matrix#lu",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~L.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~L",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14694,
                14703
            ],
            "filename": "matrix.js",
            "lineno": 661,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001223",
                "name": "i",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#lu~i",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14725,
                14776
            ],
            "filename": "matrix.js",
            "lineno": 662,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001235",
                "name": "L.__value[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#lu",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~L.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~L",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14792,
                14801
            ],
            "filename": "matrix.js",
            "lineno": 663,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001260",
                "name": "j",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#lu~j",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14825,
                14894
            ],
            "filename": "matrix.js",
            "lineno": 664,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001272",
                "name": "A.__value[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#lu",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~A.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~A",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14922,
                14927
            ],
            "filename": "matrix.js",
            "lineno": 667,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001305",
                "name": "l",
                "type": "Identifier",
                "value": "k"
            }
        },
        "undocumented": true,
        "name": "l",
        "longname": "Matrix#lu~l",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14949,
                14982
            ],
            "filename": "matrix.js",
            "lineno": 668,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001315",
                "name": "U.__value[undefined][undefined]",
                "type": "MemberExpression",
                "funcscope": "Matrix#lu",
                "value": "A.__value[undefined][undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~U.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~U",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member rref\n * @returns {Matrix|array}\n * @example\n *\n * var A = Matrix.of([[-1, 1], [-1, 0], [0, -1], [-1, -2]])\n * A.rref() //  [ [ 1, 0 ], [ -0, 1 ], [ 0, 0 ], [ 0, 0 ] ]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 674,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "rref",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "array"
                    ]
                }
            }
        ],
        "examples": [
            "var A = Matrix.of([[-1, 1], [-1, 0], [0, -1], [-1, -2]])\nA.rref() //  [ [ 1, 0 ], [ -0, 1 ], [ 0, 0 ], [ 0, 0 ] ]"
        ],
        "longname": "Matrix#rref"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15231,
                16217
            ],
            "filename": "matrix.js",
            "lineno": 684,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001335",
                "name": "Matrix.prototype.rref",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "lead": "Matrix#rref~lead",
                "resultMatrix": "Matrix#rref~resultMatrix",
                "r": "Matrix#rref~r",
                "i": "Matrix#rref~i",
                "tmp": "Matrix#rref~tmp",
                "resultMatrix.__value[undefined]": "Matrix#rref~resultMatrix.__value[undefined]",
                "val": "Matrix#rref~val",
                "j": "Matrix#rref~j",
                "resultMatrix.__value[undefined][undefined]": "Matrix#rref~resultMatrix.__value[undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "rref",
        "longname": "Matrix#rref",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15275,
                15283
            ],
            "filename": "matrix.js",
            "lineno": 685,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001344",
                "name": "lead",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "lead",
        "longname": "Matrix#rref~lead",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15292,
                15319
            ],
            "filename": "matrix.js",
            "lineno": 686,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001348",
                "name": "resultMatrix",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "resultMatrix",
        "longname": "Matrix#rref~resultMatrix",
        "kind": "constant",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15332,
                15337
            ],
            "filename": "matrix.js",
            "lineno": 688,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001356",
                "name": "r",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "r",
        "longname": "Matrix#rref~r",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15440,
                15445
            ],
            "filename": "matrix.js",
            "lineno": 692,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001379",
                "name": "i",
                "type": "Identifier",
                "value": "r"
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rref~i",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15548,
                15553
            ],
            "filename": "matrix.js",
            "lineno": 696,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001405",
                "name": "i",
                "type": "Identifier",
                "funcscope": "Matrix#rref",
                "value": "r",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rref~i",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15671,
                15700
            ],
            "filename": "matrix.js",
            "lineno": 704,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001422",
                "name": "tmp",
                "type": "MemberExpression",
                "value": "resultMatrix.__value[undefined]"
            }
        },
        "undocumented": true,
        "name": "tmp",
        "longname": "Matrix#rref~tmp",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15705,
                15754
            ],
            "filename": "matrix.js",
            "lineno": 705,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001430",
                "name": "resultMatrix.__value[undefined]",
                "type": "MemberExpression",
                "funcscope": "Matrix#rref",
                "value": "resultMatrix.__value[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15759,
                15788
            ],
            "filename": "matrix.js",
            "lineno": 706,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001442",
                "name": "resultMatrix.__value[undefined]",
                "type": "Identifier",
                "funcscope": "Matrix#rref",
                "value": "tmp",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15798,
                15833
            ],
            "filename": "matrix.js",
            "lineno": 708,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001450",
                "name": "val",
                "type": "MemberExpression",
                "value": "resultMatrix.__value[undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "Matrix#rref~val",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15847,
                15852
            ],
            "filename": "matrix.js",
            "lineno": 709,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001461",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#rref~j",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15887,
                15920
            ],
            "filename": "matrix.js",
            "lineno": 710,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001474",
                "name": "resultMatrix.__value[undefined][undefined]",
                "type": "Identifier",
                "funcscope": "Matrix#rref",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15941,
                15946
            ],
            "filename": "matrix.js",
            "lineno": 713,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001485",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rref~i",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16009,
                16044
            ],
            "filename": "matrix.js",
            "lineno": 715,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001503",
                "name": "val",
                "type": "MemberExpression",
                "funcscope": "Matrix#rref",
                "value": "resultMatrix.__value[undefined][undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "Matrix#rref~val",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16060,
                16065
            ],
            "filename": "matrix.js",
            "lineno": 716,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001514",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#rref~j",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16102,
                16164
            ],
            "filename": "matrix.js",
            "lineno": 717,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001527",
                "name": "resultMatrix.__value[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#rref",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @instance\n * @member solve\n * @param b\n * @returns {Array}\n * @example\n *\n * // Solve xA = b\n * // 5x + y  = 7\n * // 3x - 4y = 18\n * // Solution for x and y:\n * // x = 2\n * // y = -3\n *\n * const A = Matrix.of([[5, 1], [3, -4]])\n * const solveA = A.solve([7, 18]) // [2, -3]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 725,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "instance",
        "kind": "member",
        "name": "solve",
        "params": [
            {
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "// Solve xA = b\n// 5x + y  = 7\n// 3x - 4y = 18\n// Solution for x and y:\n// x = 2\n// y = -3\n\nconst A = Matrix.of([[5, 1], [3, -4]])\nconst solveA = A.solve([7, 18]) // [2, -3]"
        ],
        "longname": "Matrix#solve"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16527,
                17049
            ],
            "filename": "matrix.js",
            "lineno": 744,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001550",
                "name": "Matrix.prototype.solve",
                "type": "FunctionExpression",
                "paramnames": [
                    "b"
                ]
            },
            "vars": {
                "A": "Matrix#solve~A",
                "LU": "Matrix#solve~LU",
                "L": "Matrix#solve~L",
                "U": "Matrix#solve~U",
                "n": "Matrix#solve~n",
                "s": "Matrix#solve~s",
                "c": "Matrix#solve~c",
                "x": "Matrix#solve~x",
                "k": "Matrix#solve~k",
                "j": "Matrix#solve~j",
                "c[undefined]": "Matrix#solve~c.undefined]",
                "a": "Matrix#solve~a",
                "t": "Matrix#solve~t",
                "b": "Matrix#solve~b",
                "x[undefined]": "Matrix#solve~x.undefined]"
            }
        },
        "undocumented": true,
        "name": "solve",
        "longname": "Matrix#solve",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16575,
                16591
            ],
            "filename": "matrix.js",
            "lineno": 745,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001560",
                "name": "A",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "A",
        "longname": "Matrix#solve~A",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16600,
                16611
            ],
            "filename": "matrix.js",
            "lineno": 746,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001567",
                "name": "LU",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "LU",
        "longname": "Matrix#solve~LU",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16620,
                16629
            ],
            "filename": "matrix.js",
            "lineno": 747,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001574",
                "name": "L",
                "type": "MemberExpression",
                "value": "LU[0]"
            }
        },
        "undocumented": true,
        "name": "L",
        "longname": "Matrix#solve~L",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16638,
                16647
            ],
            "filename": "matrix.js",
            "lineno": 748,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001580",
                "name": "U",
                "type": "MemberExpression",
                "value": "LU[1]"
            }
        },
        "undocumented": true,
        "name": "U",
        "longname": "Matrix#solve~U",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16656,
                16674
            ],
            "filename": "matrix.js",
            "lineno": 749,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001586",
                "name": "n",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "Matrix#solve~n",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16681,
                16686
            ],
            "filename": "matrix.js",
            "lineno": 750,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001593",
                "name": "s",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "s",
        "longname": "Matrix#solve~s",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16695,
                16701
            ],
            "filename": "matrix.js",
            "lineno": 751,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001597",
                "name": "c",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "c",
        "longname": "Matrix#solve~c",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16710,
                16716
            ],
            "filename": "matrix.js",
            "lineno": 752,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001601",
                "name": "x",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "x",
        "longname": "Matrix#solve~x",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16729,
                16734
            ],
            "filename": "matrix.js",
            "lineno": 754,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001606",
                "name": "k",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "k",
        "longname": "Matrix#solve~k",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16763,
                16768
            ],
            "filename": "matrix.js",
            "lineno": 755,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001617",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#solve~j",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16790,
                16820
            ],
            "filename": "matrix.js",
            "lineno": 756,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001627",
                "name": "s",
                "type": "BinaryExpression",
                "funcscope": "Matrix#solve",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "s",
        "longname": "Matrix#solve~s",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16831,
                16846
            ],
            "filename": "matrix.js",
            "lineno": 758,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001643",
                "name": "c[undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#solve",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "Matrix#solve~c.undefined]",
        "kind": "member",
        "memberof": "Matrix#solve~c",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16851,
                16856
            ],
            "filename": "matrix.js",
            "lineno": 759,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001653",
                "name": "s",
                "type": "Literal",
                "funcscope": "Matrix#solve",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "s",
        "longname": "Matrix#solve~s",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16872,
                16881
            ],
            "filename": "matrix.js",
            "lineno": 761,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001658",
                "name": "a",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "a",
        "longname": "Matrix#solve~a",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16906,
                16911
            ],
            "filename": "matrix.js",
            "lineno": 762,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001671",
                "name": "t",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "t",
        "longname": "Matrix#solve~t",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16925,
                16934
            ],
            "filename": "matrix.js",
            "lineno": 763,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001676",
                "name": "b",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "b",
        "longname": "Matrix#solve~b",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16956,
                16986
            ],
            "filename": "matrix.js",
            "lineno": 764,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001688",
                "name": "t",
                "type": "BinaryExpression",
                "funcscope": "Matrix#solve",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "t",
        "longname": "Matrix#solve~t",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16997,
                17032
            ],
            "filename": "matrix.js",
            "lineno": 766,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001704",
                "name": "x[undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#solve",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "Matrix#solve~x.undefined]",
        "kind": "member",
        "memberof": "Matrix#solve~x",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member inverse\n * @instance\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[1, 1], [2, 4]]).inverse()\n * // [ [ 2, -0.5 ], [ -1, 0.5 ] ]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 771,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "inverse",
        "scope": "instance",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [2, 4]]).inverse()\n// [ [ 2, -0.5 ], [ -1, 0.5 ] ]"
        ],
        "longname": "Matrix#inverse"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17236,
                17545
            ],
            "filename": "matrix.js",
            "lineno": 782,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001724",
                "name": "Matrix.prototype.inverse",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "A": "Matrix#inverse~A",
                "I": "Matrix#inverse~I",
                "Inv": "Matrix#inverse~Inv",
                "result": "Matrix#inverse~result",
                "": null
            }
        },
        "undocumented": true,
        "name": "inverse",
        "longname": "Matrix#inverse",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17285,
                17301
            ],
            "filename": "matrix.js",
            "lineno": 783,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001733",
                "name": "A",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "A",
        "longname": "Matrix#inverse~A",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17310,
                17326
            ],
            "filename": "matrix.js",
            "lineno": 784,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001740",
                "name": "I",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "I",
        "longname": "Matrix#inverse~I",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17335,
                17359
            ],
            "filename": "matrix.js",
            "lineno": 785,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001747",
                "name": "Inv",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Inv",
        "longname": "Matrix#inverse~Inv",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17369,
                17516
            ],
            "filename": "matrix.js",
            "lineno": 787,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001758",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "Matrix#inverse~result",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17429,
                17448
            ],
            "filename": "matrix.js",
            "lineno": 788,
            "columnno": 10,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001772",
                "name": "half",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "half",
        "longname": "<anonymous>~half",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member rank\n * @instance\n * @returns {number}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 795,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "rank",
        "scope": "instance",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "longname": "Matrix#rank"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17625,
                17806
            ],
            "filename": "matrix.js",
            "lineno": 801,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001802",
                "name": "Matrix.prototype.rank",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "rref": "Matrix#rank~rref",
                "result": "Matrix#rank~result",
                "i": "Matrix#rank~i"
            }
        },
        "undocumented": true,
        "name": "rank",
        "longname": "Matrix#rank",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17671,
                17689
            ],
            "filename": "matrix.js",
            "lineno": 802,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001811",
                "name": "rref",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "rref",
        "longname": "Matrix#rank~rref",
        "kind": "constant",
        "memberof": "Matrix#rank",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17696,
                17706
            ],
            "filename": "matrix.js",
            "lineno": 803,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001818",
                "name": "result",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "Matrix#rank~result",
        "kind": "member",
        "memberof": "Matrix#rank",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17718,
                17723
            ],
            "filename": "matrix.js",
            "lineno": 804,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001823",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rank~i",
        "kind": "member",
        "memberof": "Matrix#rank",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17756,
                17784
            ],
            "filename": "matrix.js",
            "lineno": 805,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001836",
                "name": "result",
                "type": "MemberExpression",
                "funcscope": "Matrix#rank",
                "value": "rref.__value[undefined][undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "Matrix#rank~result",
        "kind": "member",
        "memberof": "Matrix#rank",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member dimension\n * @instance\n * @see rank\n * @returns {number}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 810,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "dimension",
        "scope": "instance",
        "see": [
            "rank"
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "longname": "Matrix#dimension"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17904,
                17969
            ],
            "filename": "matrix.js",
            "lineno": 817,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001848",
                "name": "Matrix.prototype.dimension",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dimension",
        "longname": "Matrix#dimension",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17971,
                17992
            ],
            "filename": "matrix.js",
            "lineno": 821,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001861",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71,
                173
            ],
            "filename": "addMatrix.js",
            "lineno": 4,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100001873",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71,
                133
            ],
            "filename": "addScalar.js",
            "lineno": 4,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100001912",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function concat\n * @param M {Matrix}\n * @param m {Array}\n * @param idx {number}\n * @returns {Array}\n */",
        "meta": {
            "filename": "concat.js",
            "lineno": 4,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "concat",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "M"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "idx"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "concat",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                189,
                270
            ],
            "filename": "concat.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100001939",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function dot\n * @param B {Matrix}\n * @param a {Array}\n * @returns {Array}\n */",
        "meta": {
            "filename": "dot.js",
            "lineno": 6,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "dot",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "B"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "a"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "dot",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                220,
                402
            ],
            "filename": "dot.js",
            "lineno": 12,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100001974",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                315,
                358
            ],
            "filename": "dot.js",
            "lineno": 14,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100001998",
                "name": "acc",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                38,
                67
            ],
            "filename": "empty.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002027",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function identity\n * @desc Creates an identiy matrix from an empty array\n * @param m {array}\n * @param idx {number}\n * @return {Matrix}\n */",
        "meta": {
            "filename": "identity.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "identity",
        "description": "Creates an identiy matrix from an empty array",
        "params": [
            {
                "type": {
                    "names": [
                        "array"
                    ]
                },
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "idx"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "identity",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                182,
                249
            ],
            "filename": "identity.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002039",
                "name": "module.exports",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "m",
                    "idx"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function round\n * @param value {number}\n * @param decimals {number}\n * @returns {number}\n */",
        "meta": {
            "filename": "round.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "round",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "decimals"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "longname": "round",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                101,
                222
            ],
            "filename": "round.js",
            "lineno": 7,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002057",
                "name": "module.exports",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value",
                    "decimals"
                ]
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                116,
                222
            ],
            "filename": "round.js",
            "lineno": 7,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002058",
                "name": "round",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value",
                    "decimals"
                ]
            }
        },
        "undocumented": true,
        "name": "round",
        "longname": "round",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * @function transpose\n * @desc Transposes a array of arrays using the Matrix.map function\n * @param m {array}\n * @param idx {number}\n * @return {Matrix}\n */",
        "meta": {
            "filename": "transpose.js",
            "lineno": 4,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "transpose",
        "description": "Transposes a array of arrays using the Matrix.map function",
        "params": [
            {
                "type": {
                    "names": [
                        "array"
                    ]
                },
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "idx"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "transpose",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                233,
                326
            ],
            "filename": "transpose.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002089",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/Volumes/BigOne/github/funMatrix/src/matrix.js",
            "/Volumes/BigOne/github/funMatrix/src/util/addMatrix.js",
            "/Volumes/BigOne/github/funMatrix/src/util/addScalar.js",
            "/Volumes/BigOne/github/funMatrix/src/util/concat.js",
            "/Volumes/BigOne/github/funMatrix/src/util/dot.js",
            "/Volumes/BigOne/github/funMatrix/src/util/empty.js",
            "/Volumes/BigOne/github/funMatrix/src/util/identity.js",
            "/Volumes/BigOne/github/funMatrix/src/util/round.js",
            "/Volumes/BigOne/github/funMatrix/src/util/transpose.js"
        ]
    }
]
