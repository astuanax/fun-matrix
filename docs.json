[
    {
        "comment": "/**\n * @class Matrix\n * @classdesc Matrix applicative providing standard matrix operations\n * @summary The Matrix class should not be instantiated with the new keyword. Instead use the Matrix.of syntax to create a new Matrix. Unfortunatly jsdocs does not allow for the constructor to be hidden.\n * @hidecontructor\n * @see Matrix.of\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "kind": "class",
        "name": "Matrix",
        "classdesc": "Matrix applicative providing standard matrix operations",
        "summary": "The Matrix class should not be instantiated with the new keyword. Instead use the Matrix.of syntax to create a new Matrix. Unfortunatly jsdocs does not allow for the constructor to be hidden.",
        "tags": [
            {
                "originalTitle": "hidecontructor",
                "title": "hidecontructor",
                "text": ""
            }
        ],
        "see": [
            "Matrix.of"
        ],
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])"
        ],
        "longname": "Matrix",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                752,
                800
            ],
            "filename": "matrix.js",
            "lineno": 22,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000053",
                "name": "Matrix",
                "type": "FunctionExpression"
            },
            "vars": {
                "this.__value": null
            }
        },
        "undocumented": true,
        "name": "Matrix",
        "longname": "Matrix",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                780,
                798
            ],
            "filename": "matrix.js",
            "lineno": 23,
            "columnno": 2,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000059",
                "name": "this.__value",
                "type": "Identifier",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value",
        "longname": "__value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.of\n * @desc Creates a Matrix object and flattens the Matrix\n * @param {Array|Function} val - An array of arrays\n * @returns {Matrix}\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 26,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "of",
        "description": "Creates a Matrix object and flattens the Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Array",
                        "function"
                    ]
                },
                "description": "An array of arrays",
                "name": "val"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])"
        ],
        "longname": "Matrix.of"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1057,
                1227
            ],
            "filename": "matrix.js",
            "lineno": 38,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000065",
                "name": "Matrix.of",
                "type": "FunctionExpression",
                "paramnames": [
                    "val"
                ]
            },
            "vars": {
                "this.__value": "Matrix.of#__value"
            }
        },
        "undocumented": true,
        "name": "of",
        "longname": "Matrix.of",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1162,
                1180
            ],
            "filename": "matrix.js",
            "lineno": 41,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000084",
                "name": "this.__value",
                "type": "Identifier",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value",
        "longname": "Matrix.of#__value",
        "kind": "member",
        "memberof": "Matrix.of",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @property {String} type - Returns the string 'Matrix' for all Matrix objects\n * @type {String}\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n * m.type === 'Matrix'\n */",
        "meta": {
            "range": [
                1438,
                1470
            ],
            "filename": "matrix.js",
            "lineno": 56,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000096",
                "name": "Matrix.prototype.type",
                "type": "Literal",
                "value": "Matrix",
                "paramnames": []
            }
        },
        "memberof": "Matrix",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Returns the string 'Matrix' for all Matrix objects",
                "name": "type"
            }
        ],
        "type": {
            "names": [
                "String"
            ]
        },
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])\nm.type === 'Matrix'"
        ],
        "name": "type",
        "longname": "Matrix#type",
        "kind": "member",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @property {Number} precision - Floating point precision is set to 4 by default\n * @type {Number}\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n * m.precision === 4\n */",
        "meta": {
            "range": [
                1681,
                1711
            ],
            "filename": "matrix.js",
            "lineno": 67,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000104",
                "name": "Matrix.prototype.precision",
                "type": "Literal",
                "value": 4,
                "paramnames": []
            }
        },
        "memberof": "Matrix",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Floating point precision is set to 4 by default",
                "name": "precision"
            }
        ],
        "type": {
            "names": [
                "Number"
            ]
        },
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])\nm.precision === 4"
        ],
        "name": "precision",
        "longname": "Matrix#precision",
        "kind": "member",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#setPrecision\n * @desc The precision is used in floating point calculations for the dot product\n * @param {Number} [precision=4] - Set the number of decimals for rounding\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n * m.setPrecision(10)\n * m.precision === 10\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 69,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "setPrecision",
        "description": "The precision is used in floating point calculations for the dot product",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 4,
                "description": "Set the number of decimals for rounding",
                "name": "precision"
            }
        ],
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])\nm.setPrecision(10)\nm.precision === 10"
        ],
        "longname": "Matrix#setPrecision",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2035,
                2120
            ],
            "filename": "matrix.js",
            "lineno": 80,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000112",
                "name": "Matrix.prototype.setPrecision",
                "type": "FunctionExpression",
                "paramnames": [
                    "precision"
                ]
            },
            "vars": {
                "this.precision": "Matrix#setPrecision#precision"
            }
        },
        "undocumented": true,
        "name": "setPrecision",
        "longname": "Matrix#setPrecision",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2092,
                2118
            ],
            "filename": "matrix.js",
            "lineno": 81,
            "columnno": 2,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000122",
                "name": "this.precision",
                "type": "Identifier",
                "value": "precision",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "precision",
        "longname": "Matrix#setPrecision#precision",
        "kind": "member",
        "memberof": "Matrix#setPrecision",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#isSymmetric\n * @desc Boolean indicating whether the Matrix is symmetric by testing for equality of the transposed Matrix.\n * @returns {Boolean}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * true === A.isSymmetric()\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 84,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "isSymmetric",
        "description": "Boolean indicating whether the Matrix is symmetric by testing for equality of the transposed Matrix.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\ntrue === A.isSymmetric()"
        ],
        "longname": "Matrix#isSymmetric",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2401,
                2537
            ],
            "filename": "matrix.js",
            "lineno": 95,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000128",
                "name": "Matrix.prototype.isSymmetric",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "a": "Matrix#isSymmetric~a",
                "b": "Matrix#isSymmetric~b"
            }
        },
        "undocumented": true,
        "name": "isSymmetric",
        "longname": "Matrix#isSymmetric",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2454,
                2470
            ],
            "filename": "matrix.js",
            "lineno": 96,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000137",
                "name": "a",
                "type": "MemberExpression",
                "value": "this.__value"
            }
        },
        "undocumented": true,
        "name": "a",
        "longname": "Matrix#isSymmetric~a",
        "kind": "constant",
        "memberof": "Matrix#isSymmetric",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2479,
                2513
            ],
            "filename": "matrix.js",
            "lineno": 97,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000143",
                "name": "b",
                "type": "MemberExpression",
                "value": ".__value"
            }
        },
        "undocumented": true,
        "name": "b",
        "longname": "Matrix#isSymmetric~b",
        "kind": "constant",
        "memberof": "Matrix#isSymmetric",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#isSquare\n * @desc Boolean indicating whether the Matrix object is square.\n * @returns {Boolean}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * true === A.isSquare()\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 101,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "isSquare",
        "description": "Boolean indicating whether the Matrix object is square.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\ntrue === A.isSquare()"
        ],
        "longname": "Matrix#isSquare",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2767,
                2858
            ],
            "filename": "matrix.js",
            "lineno": 112,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000158",
                "name": "Matrix.prototype.isSquare",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "isSquare",
        "longname": "Matrix#isSquare",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#isOrthogonal\n * @desc Boolean indicating whether the Matrix is orthogonal by testing for equality between Identity Matrix and the dot product of the Matrix and its transpose.\n * @returns {Boolean}\n * @example\n *\n * const result = [[-0.3092, -0.9510], [-0.9510, 0.3092]]\n * const A = Matrix.fromArray(result)\n * true  === A.isOrthogonal()\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 116,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "isOrthogonal",
        "description": "Boolean indicating whether the Matrix is orthogonal by testing for equality between Identity Matrix and the dot product of the Matrix and its transpose.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "const result = [[-0.3092, -0.9510], [-0.9510, 0.3092]]\nconst A = Matrix.fromArray(result)\ntrue  === A.isOrthogonal()"
        ],
        "longname": "Matrix#isOrthogonal",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3246,
                3388
            ],
            "filename": "matrix.js",
            "lineno": 127,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000178",
                "name": "Matrix.prototype.isOrthogonal",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "AxAt": "Matrix#isOrthogonal~AxAt",
                "I": "Matrix#isOrthogonal~I"
            }
        },
        "undocumented": true,
        "name": "isOrthogonal",
        "longname": "Matrix#isOrthogonal",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3300,
                3333
            ],
            "filename": "matrix.js",
            "lineno": 128,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000187",
                "name": "AxAt",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "AxAt",
        "longname": "Matrix#isOrthogonal~AxAt",
        "kind": "constant",
        "memberof": "Matrix#isOrthogonal",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3342,
                3361
            ],
            "filename": "matrix.js",
            "lineno": 129,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000198",
                "name": "I",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "I",
        "longname": "Matrix#isOrthogonal~I",
        "kind": "constant",
        "memberof": "Matrix#isOrthogonal",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#getCols\n * @desc Number indicating the number of columns in the Matrix\n * @returns {Number}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * A.getCols()  === 2\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 133,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "getCols",
        "description": "Number indicating the number of columns in the Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\nA.getCols()  === 2"
        ],
        "longname": "Matrix#getCols",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3611,
                3685
            ],
            "filename": "matrix.js",
            "lineno": 144,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000210",
                "name": "Matrix.prototype.getCols",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getCols",
        "longname": "Matrix#getCols",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#equals\n * @desc Function returning a boolean testing for equality of the values of a Matrix or Array\n * @param {Matrix|Array} M - Matrix or Array to compare for equality\n * @returns {Boolean}\n * @example\n *\n * var a = [[1, 1], [1, 1]]\n * var A = Matrix.of(a)\n * var B = Matrix.of(a)\n * true  === A.equals(B)\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 148,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "equals",
        "description": "Function returning a boolean testing for equality of the values of a Matrix or Array",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix or Array to compare for equality",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "var a = [[1, 1], [1, 1]]\nvar A = Matrix.of(a)\nvar B = Matrix.of(a)\ntrue  === A.equals(B)"
        ],
        "longname": "Matrix#equals",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4043,
                4131
            ],
            "filename": "matrix.js",
            "lineno": 161,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000227",
                "name": "Matrix.prototype.equals",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "equals",
        "longname": "Matrix#equals",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#getRows\n * @desc Number indicating the number of rows in the Matrix\n * @returns {Number}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * A.getRows()  // 2\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 165,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "getRows",
        "description": "Number indicating the number of rows in the Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\nA.getRows()  // 2"
        ],
        "longname": "Matrix#getRows",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4347,
                4418
            ],
            "filename": "matrix.js",
            "lineno": 175,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000248",
                "name": "Matrix.prototype.getRows",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getRows",
        "longname": "Matrix#getRows",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#getShape\n * @returns {Array}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * A.getShape()  // [2, 2]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 179,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "getShape",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\nA.getShape()  // [2, 2]"
        ],
        "longname": "Matrix#getShape",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4580,
                4665
            ],
            "filename": "matrix.js",
            "lineno": 188,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000263",
                "name": "Matrix.prototype.getShape",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getShape",
        "longname": "Matrix#getShape",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#map\n * @description Maps over the rows of the matrix using a map function\n * @param {Function} f - An iterator function\n * @returns {Matrix}\n * @example\n *\n * const m = Matrix.of([[1, 1], [1, 1]])\n * m.map(x => x.map(y => y+ 1))\n * // [[2, 2], [2, 2]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 192,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "map",
        "description": "Maps over the rows of the matrix using a map function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "An iterator function",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const m = Matrix.of([[1, 1], [1, 1]])\nm.map(x => x.map(y => y+ 1))\n// [[2, 2], [2, 2]]"
        ],
        "longname": "Matrix#map",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4970,
                5050
            ],
            "filename": "matrix.js",
            "lineno": 205,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000282",
                "name": "Matrix.prototype.map",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "Matrix#map",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.map\n * @description Curried function that maps over the rows of the matrix using a map function\n * @param {Function} f - An iterator function\n * @param {Matrix|Array} M - Matrix or array to map\n * @returns {Matrix}\n * @example\n *\n * const m = Matrix.map(x= > x.map(y => y+ 1), [[1, 1], [1, 1]])\n * // [[2, 2], [2, 2]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 209,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "map",
        "description": "Curried function that maps over the rows of the matrix using a map function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "An iterator function",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix or array to map",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const m = Matrix.map(x= > x.map(y => y+ 1), [[1, 1], [1, 1]])\n// [[2, 2], [2, 2]]"
        ],
        "longname": "Matrix.map"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5432,
                5500
            ],
            "filename": "matrix.js",
            "lineno": 223,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000304",
                "name": "Matrix.map",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "Matrix.map",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#flatMap\n * @description Runs flatMap on the value of hte Matrix\n * @param {Function} fn Flatten function\n * @returns {*}\n * @example\n *\n * const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n * const A = Matrix.of(a)\n * const flattenedArray = A.flatMap(x => x)  // [1, 2, 3, 4, 5, 6, 7, 8, 9]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 227,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "flatMap",
        "description": "Runs flatMap on the value of hte Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Flatten function",
                "name": "fn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nconst A = Matrix.of(a)\nconst flattenedArray = A.flatMap(x => x)  // [1, 2, 3, 4, 5, 6, 7, 8, 9]"
        ],
        "longname": "Matrix#flatMap",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5838,
                5917
            ],
            "filename": "matrix.js",
            "lineno": 240,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000325",
                "name": "Matrix.prototype.flatMap",
                "type": "FunctionExpression",
                "paramnames": [
                    "fn"
                ]
            }
        },
        "undocumented": true,
        "name": "flatMap",
        "longname": "Matrix#flatMap",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.flatMap\n * @description Runs flatMap on the value of hte Matrix\n * @param {Function} fn Flatten function\n * @param {Matrix | Array} M\n * @returns {*}\n * @example\n *\n * const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n * const flattenedArray = Matrix.flatMap(x => x, a)  // [1, 2, 3, 4, 5, 6, 7, 8, 9]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 244,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "flatMap",
        "description": "Runs flatMap on the value of hte Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Flatten function",
                "name": "fn"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nconst flattenedArray = Matrix.flatMap(x => x, a)  // [1, 2, 3, 4, 5, 6, 7, 8, 9]"
        ],
        "longname": "Matrix.flatMap",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6266,
                6344
            ],
            "filename": "matrix.js",
            "lineno": 257,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000343",
                "name": "Matrix.flatMap",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "flatMap",
        "longname": "Matrix.flatMap",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#flatten\n * @description Flattens the value of a Matrix into an one dimensional array\n * @returns {Array}\n * @example\n *\n * const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n * const A = Matrix.of(a)\n * const flattenedArray = A.flatten()  // [1, 2, 3, 4, 5, 6, 7, 8, 9]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 261,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "flatten",
        "description": "Flattens the value of a Matrix into an one dimensional array",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nconst A = Matrix.of(a)\nconst flattenedArray = A.flatten()  // [1, 2, 3, 4, 5, 6, 7, 8, 9]"
        ],
        "longname": "Matrix#flatten",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6660,
                6734
            ],
            "filename": "matrix.js",
            "lineno": 273,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000364",
                "name": "Matrix.prototype.flatten",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "flatten",
        "longname": "Matrix#flatten",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.flatten\n * @description Flattens the value of a Matrix into an one dimensional array\n * @returns {Array}\n * @returns {*}\n * @example\n *\n * const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n * const flattenedArray = Matrix.flatten(a)  // [1, 2, 3, 4, 5, 6, 7, 8, 9]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 277,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "flatten",
        "description": "Flattens the value of a Matrix into an one dimensional array",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nconst flattenedArray = Matrix.flatten(a)  // [1, 2, 3, 4, 5, 6, 7, 8, 9]"
        ],
        "longname": "Matrix.flatten",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7046,
                7119
            ],
            "filename": "matrix.js",
            "lineno": 289,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000379",
                "name": "Matrix.flatten",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "flatten",
        "longname": "Matrix.flatten",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#fold\n * @description Reduce the matrix rows using a reduce function\n * @param {Function} f - A reduce/fold function\n * @returns {Matrix}\n * @example\n *\n * // Flatten Matrix\n * Matrix.of([[1, 1], [1, 1]]).fold((prev, next) => prev.concat(next))\n * // [1, 1, 1, 1]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 293,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "fold",
        "description": "Reduce the matrix rows using a reduce function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A reduce/fold function",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "// Flatten Matrix\nMatrix.of([[1, 1], [1, 1]]).fold((prev, next) => prev.concat(next))\n// [1, 1, 1, 1]"
        ],
        "longname": "Matrix#fold",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7432,
                7518
            ],
            "filename": "matrix.js",
            "lineno": 305,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000397",
                "name": "Matrix.prototype.fold",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            }
        },
        "undocumented": true,
        "name": "fold",
        "longname": "Matrix#fold",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.fold\n * @description Static function to reduce the matrix rows using a reduce function\n * @param {Function} f - A reduce/fold function\n * @param {Matrix|Array} M - The Matrix to reduce\n * @returns {Matrix}\n * @example\n\n * // Sum of all matrix values\n * const reducer = (prev, next) => Number(prev) + next.reduce((acc, x) => acc + x, 0)\n * const A = Matrix.of([[1, 1], [1, 1]]\n * Matrix.fold(reducer, A)\n * // 4\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 309,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "fold",
        "description": "Static function to reduce the matrix rows using a reduce function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A reduce/fold function",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "The Matrix to reduce",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "// Sum of all matrix values\nconst reducer = (prev, next) => Number(prev) + next.reduce((acc, x) => acc + x, 0)\nconst A = Matrix.of([[1, 1], [1, 1]]\nMatrix.fold(reducer, A)\n// 4"
        ],
        "longname": "Matrix.fold"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7990,
                8060
            ],
            "filename": "matrix.js",
            "lineno": 325,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000420",
                "name": "Matrix.fold",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "fold",
        "longname": "Matrix.fold",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#ap\n * @description Function that applies a function to a Matrix\n * @param {Matrix|Array} M - Matrix or Array to apply a function\n * @returns {Matrix}\n * @example\n *\n * const f = x => x.reduce((prev, next) => prev + next)\n * const A = Matrix.of([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n * Matrix.of(f).ap(M)\n * // [[6], [15], [24]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 329,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "ap",
        "description": "Function that applies a function to a Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix or Array to apply a function",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const f = x => x.reduce((prev, next) => prev + next)\nconst A = Matrix.of([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nMatrix.of(f).ap(M)\n// [[6], [15], [24]"
        ],
        "longname": "Matrix#ap",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8434,
                8512
            ],
            "filename": "matrix.js",
            "lineno": 342,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000441",
                "name": "Matrix.prototype.ap",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "ap",
        "longname": "Matrix#ap",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.ap\n * @description Curried function that applies a function to a Matrix\n * @param {Function} f - Function that accepts a Matrix as input\n * @param {Matrix|Array} M - Matrix or Array to apply a function\n * @returns {Matrix}\n * @example\n *\n * const f = x => x.reduce((prev, next) => prev + next)\n * Matrix.ap(f, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n * // [[6], [15], [24]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 346,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "ap",
        "description": "Curried function that applies a function to a Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function that accepts a Matrix as input",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix or Array to apply a function",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const f = x => x.reduce((prev, next) => prev + next)\nMatrix.ap(f, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n// [[6], [15], [24]"
        ],
        "longname": "Matrix.ap"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8941,
                9007
            ],
            "filename": "matrix.js",
            "lineno": 360,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000463",
                "name": "Matrix.ap",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ap",
        "longname": "Matrix.ap",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#concat\n * @description Concatenates 2 Matrices using a function as operator\n * @param {Matrix} M - The right side of the concatenation/product\n * @param {Function} [f=concat] - A curried function accepting 2 matrices as input\n * @returns {Matrix}\n * @example\n *\n * const a = [[0, 1, 1], [2, 3, 4]]\n * const b = [[2, 2, 2], [3, 3, 3]]\n * const A = Matrix.of(a)\n * const B = Matrix.of(b)\n * const M = A.concat(B)\n * // [[0, 1, 1, 2, 2, 2], [2, 3, 4, 3, 3, 3]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 364,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "concat",
        "description": "Concatenates 2 Matrices using a function as operator",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The right side of the concatenation/product",
                "name": "M"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "defaultvalue": "concat",
                "description": "A curried function accepting 2 matrices as input",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[0, 1, 1], [2, 3, 4]]\nconst b = [[2, 2, 2], [3, 3, 3]]\nconst A = Matrix.of(a)\nconst B = Matrix.of(b)\nconst M = A.concat(B)\n// [[0, 1, 1, 2, 2, 2], [2, 3, 4, 3, 3, 3]]"
        ],
        "longname": "Matrix#concat",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9518,
                9596
            ],
            "filename": "matrix.js",
            "lineno": 381,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000484",
                "name": "Matrix.prototype.concat",
                "type": "FunctionExpression",
                "paramnames": [
                    "M",
                    "f"
                ]
            }
        },
        "undocumented": true,
        "name": "concat",
        "longname": "Matrix#concat",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.concat\n * @description A curried function that concatenates 2 Matrices using a function as operator\n * @param {Matrix} A - Left side Matrix of the concatenation\n * @param {Matrix} B - Right side Matrix of the concatenation\n * @param {Function} [f=concat] - A curried function accepting 2 matrices as input\n * @returns {Matrix}\n * @example\n *\n * const a = [[0, 1, 1], [2, 3, 4]]\n * const b = [[2, 2, 2], [3, 3, 3]]\n * const A = Matrix.of(a)\n * const B = Matrix.of(b)\n * const M = Matrix.concat(A, B)\n * // [[0, 1, 1, 2, 2, 2], [2, 3, 4, 3, 3, 3]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 385,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "concat",
        "description": "A curried function that concatenates 2 Matrices using a function as operator",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "Left side Matrix of the concatenation",
                "name": "A"
            },
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "Right side Matrix of the concatenation",
                "name": "B"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "defaultvalue": "concat",
                "description": "A curried function accepting 2 matrices as input",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[0, 1, 1], [2, 3, 4]]\nconst b = [[2, 2, 2], [3, 3, 3]]\nconst A = Matrix.of(a)\nconst B = Matrix.of(b)\nconst M = Matrix.concat(A, B)\n// [[0, 1, 1, 2, 2, 2], [2, 3, 4, 3, 3, 3]]"
        ],
        "longname": "Matrix.concat"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10206,
                10292
            ],
            "filename": "matrix.js",
            "lineno": 404,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000505",
                "name": "Matrix.concat",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "concat",
        "longname": "Matrix.concat",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#empty\n * @description Returns an empty Matrix from an existing Matrix\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 408,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "empty",
        "description": "Returns an empty Matrix from an existing Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#empty",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10433,
                10498
            ],
            "filename": "matrix.js",
            "lineno": 414,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000531",
                "name": "Matrix.prototype.empty",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "empty",
        "longname": "Matrix#empty",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.empty\n * @description Returns an empty Matrix from an existing Matrix\n * @param {Number} [rows=0] - Rows to generate\n * @param {Number} [cols=0] - Cols to generate\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 418,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "empty",
        "description": "Returns an empty Matrix from an existing Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "Rows to generate",
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "Cols to generate",
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.empty"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10744,
                10940
            ],
            "filename": "matrix.js",
            "lineno": 427,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000546",
                "name": "Matrix.empty",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "empty",
        "longname": "Matrix.empty",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10805,
                10829
            ],
            "filename": "matrix.js",
            "lineno": 428,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000561",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "<anonymous>~m",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#matrixIdentity\n * @desc Returns an matrixIdentity matrix\n * @returns {Matrix}\n * @example\n *\n * const a = [[1, 2, 3], [4, 5, 6]]\n * const A = Matrix.of(a)\n * const Aidentity = A.matrixIdentity()\n * // [[1, 0, 0], [0, 1, 0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 434,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "matrixIdentity",
        "description": "Returns an matrixIdentity matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[1, 2, 3], [4, 5, 6]]\nconst A = Matrix.of(a)\nconst Aidentity = A.matrixIdentity()\n// [[1, 0, 0], [0, 1, 0]]"
        ],
        "longname": "Matrix#matrixIdentity",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11239,
                11326
            ],
            "filename": "matrix.js",
            "lineno": 447,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000578",
                "name": "Matrix.prototype.identity",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "identity",
        "longname": "Matrix#identity",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.matrixIdentity\n * @desc curried fucntion that returns an matrixIdentity matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.matrixIdentity(3, 2)\n * // [[1, 0, 0], [0, 1, 0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 451,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "matrixIdentity",
        "description": "curried fucntion that returns an matrixIdentity matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.matrixIdentity(3, 2)\n// [[1, 0, 0], [0, 1, 0]]"
        ],
        "longname": "Matrix.matrixIdentity"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11575,
                11774
            ],
            "filename": "matrix.js",
            "lineno": 463,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000597",
                "name": "Matrix.identity",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "identity",
        "longname": "Matrix.identity",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11631,
                11655
            ],
            "filename": "matrix.js",
            "lineno": 464,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000608",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "<anonymous>~m",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#combine\n * @desc Concatenates 2 Matrices together.\n * @see Matrix.concat\n * @param {Matrix } M - Right side Matrix of the combine operation\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 468,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "combine",
        "description": "Concatenates 2 Matrices together.",
        "see": [
            "Matrix.concat"
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "Right side Matrix of the combine operation",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#combine",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11985,
                12071
            ],
            "filename": "matrix.js",
            "lineno": 476,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000625",
                "name": "Matrix.prototype.combine",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "combine",
        "longname": "Matrix#combine",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.combine\n * @desc Curried fucntion that combines 2 Matrices\n * @see Matrix.concat\n * @param {Matrix} A - Left side of the combine operator\n * @param {Matrix} A - Right side of the combine operator\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 480,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "combine",
        "description": "Curried fucntion that combines 2 Matrices",
        "see": [
            "Matrix.concat"
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "Left side of the combine operator",
                "name": "A"
            },
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "Right side of the combine operator",
                "name": "A"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.combine"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12349,
                12443
            ],
            "filename": "matrix.js",
            "lineno": 490,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000646",
                "name": "Matrix.combine",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "combine",
        "longname": "Matrix.combine",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#dot\n * @description Returns the dot product between 2 matrices\n * @param {Matrix|Array} M - Right side of the dot product\n * @returns {Matrix}\n * @example\n *\n * // Create matrix\n * const m = Matrix.of([[1, 2], [3, 4]])\n *\n * // Generate matrixIdentity matrix\n * const I  = m.matrixIdentity() // [[1, 0], [0, 1]]\n *\n * if(m.dot(I).equals(m)) {\n *    console.log('Dot product with matrixIdentity matrix returns the same matrix')\n * }\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 494,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "dot",
        "description": "Returns the dot product between 2 matrices",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Right side of the dot product",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "// Create matrix\nconst m = Matrix.of([[1, 2], [3, 4]])\n\n// Generate matrixIdentity matrix\nconst I  = m.matrixIdentity() // [[1, 0], [0, 1]]\n\nif(m.dot(I).equals(m)) {\n   console.log('Dot product with matrixIdentity matrix returns the same matrix')\n}"
        ],
        "longname": "Matrix#dot",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12928,
                13023
            ],
            "filename": "matrix.js",
            "lineno": 513,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000672",
                "name": "Matrix.prototype.dot",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "dot",
        "longname": "Matrix#dot",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.dot\n * @description Curried fucntion that returns the dot product of 2 matrices\n * @param {Matrix|Array} A - Left side of the dot product\n * @param {Matrix|Array} B - Right side of the dot product\n * @returns {Matrix}\n * @example\n * const a = [[1, 2, 3], [4, 5, 6]]\n * const b = [[7, 8], [9, 10], [11, 12]]\n *\n * const A = Matrix.of(a)\n * const B = Matrix.of(b)\n *\n * Matrix.dot(A, B) // [[58, 64], [139, 154]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 517,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "dot",
        "description": "Curried fucntion that returns the dot product of 2 matrices",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Left side of the dot product",
                "name": "A"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Right side of the dot product",
                "name": "B"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[1, 2, 3], [4, 5, 6]]\nconst b = [[7, 8], [9, 10], [11, 12]]\n\nconst A = Matrix.of(a)\nconst B = Matrix.of(b)\n\nMatrix.dot(A, B) // [[58, 64], [139, 154]]"
        ],
        "longname": "Matrix.dot"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13498,
                13577
            ],
            "filename": "matrix.js",
            "lineno": 535,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000697",
                "name": "Matrix.dot",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dot",
        "longname": "Matrix.dot",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#fill\n * @desc Fill up an empty matrix with the provided map function\n * @param {Function} f - Function that generates a value\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).fill(x => 42)\n * // [[42,42,42], [42,42,42], [42,42,42]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 539,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "fill",
        "description": "Fill up an empty matrix with the provided map function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function that generates a value",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).fill(x => 42)\n// [[42,42,42], [42,42,42], [42,42,42]]"
        ],
        "longname": "Matrix#fill",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13901,
                13975
            ],
            "filename": "matrix.js",
            "lineno": 551,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000722",
                "name": "Matrix.prototype.fill",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "fill",
        "longname": "Matrix#fill",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#zeros\n * @desc Fill up an empty matrix with zeros\n * @returns {Matrix}\n *\n * @example\n *\n * const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).zeros()\n * // [[0,0,0], [0,0,0], [0,0,0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 555,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "zeros",
        "description": "Fill up an empty matrix with zeros",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).zeros()\n// [[0,0,0], [0,0,0], [0,0,0]]"
        ],
        "longname": "Matrix#zeros",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14211,
                14278
            ],
            "filename": "matrix.js",
            "lineno": 567,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000744",
                "name": "Matrix.prototype.zeros",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "zeros",
        "longname": "Matrix#zeros",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.zeros\n * @desc Fill up an empty matrix with zeros\n * @param {Number} rows - Defines the rows of the matrix\n * @param {Number} cols - Defines the columns of the matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.zeros(3, 3)\n * // [[0,0,0], [0,0,0], [0,0,0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 571,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "zeros",
        "description": "Fill up an empty matrix with zeros",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the rows of the matrix",
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the columns of the matrix",
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.zeros(3, 3)\n// [[0,0,0], [0,0,0], [0,0,0]]"
        ],
        "longname": "Matrix.zeros",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14600,
                14708
            ],
            "filename": "matrix.js",
            "lineno": 584,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000761",
                "name": "Matrix.zeros",
                "type": "FunctionExpression",
                "paramnames": [
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "m": "Matrix.zeros~m",
                "": null
            }
        },
        "undocumented": true,
        "name": "zeros",
        "longname": "Matrix.zeros",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14647,
                14671
            ],
            "filename": "matrix.js",
            "lineno": 585,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000770",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix.zeros~m",
        "kind": "constant",
        "memberof": "Matrix.zeros",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#ones\n * @desc Fill up an empty matrix with ones\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).ones()\n * // [[1,1,1], [1,1,1], [1,1,1]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 589,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "ones",
        "description": "Fill up an empty matrix with ones",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).ones()\n// [[1,1,1], [1,1,1], [1,1,1]]"
        ],
        "longname": "Matrix#ones",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14939,
                15005
            ],
            "filename": "matrix.js",
            "lineno": 601,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000789",
                "name": "Matrix.prototype.ones",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "ones",
        "longname": "Matrix#ones",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.ones\n * @desc Fill up an empty matrix with ones\n * @param {Number} rows - Defines the rows of the matrix\n * @param {Number} cols - Defines the columns of the matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.ones(1, 1)\n * // [[1,1,1], [1,1,1], [1,1,1]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 605,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "ones",
        "description": "Fill up an empty matrix with ones",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the rows of the matrix",
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the columns of the matrix",
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.ones(1, 1)\n// [[1,1,1], [1,1,1], [1,1,1]]"
        ],
        "longname": "Matrix.ones",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15324,
                15431
            ],
            "filename": "matrix.js",
            "lineno": 618,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000806",
                "name": "Matrix.ones",
                "type": "FunctionExpression",
                "paramnames": [
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "m": "Matrix.ones~m",
                "": null
            }
        },
        "undocumented": true,
        "name": "ones",
        "longname": "Matrix.ones",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15370,
                15394
            ],
            "filename": "matrix.js",
            "lineno": 619,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000815",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix.ones~m",
        "kind": "constant",
        "memberof": "Matrix.ones",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#random\n * @desc Fill up an empty matrix with random values\n * @param {Function} [f = e => Math.random() * 2 - 1] - Function producing random values, can be any type of value\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 623,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "random",
        "description": "Fill up an empty matrix with random values",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "defaultvalue": "e => Math.random() * 2 - 1",
                "description": "Function producing random values, can be any type of value",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#random",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15676,
                15769
            ],
            "filename": "matrix.js",
            "lineno": 630,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000834",
                "name": "Matrix.prototype.random",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "random",
        "longname": "Matrix#random",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.random\n * @desc Fill up an empty matrix with random numbers\n * @param {Function} f - Function which returns random values. Default random values are between -1 and 1\n * @param {Number} rows - Defines the rows of the matrix\n * @param {Number} cols - Defines the columns of the matrix\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 634,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "random",
        "description": "Fill up an empty matrix with random numbers",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function which returns random values. Default random values are between -1 and 1",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the rows of the matrix",
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the columns of the matrix",
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.random",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16123,
                16261
            ],
            "filename": "matrix.js",
            "lineno": 643,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000861",
                "name": "Matrix.random",
                "type": "FunctionExpression",
                "paramnames": [
                    "f",
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "": null,
                "m": "Matrix.random~m"
            }
        },
        "undocumented": true,
        "name": "random",
        "longname": "Matrix.random",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16205,
                16229
            ],
            "filename": "matrix.js",
            "lineno": 644,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000882",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix.random~m",
        "kind": "constant",
        "memberof": "Matrix.random",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#toArray\n * @desc Returns the array from the matrix\n * @returns {Array}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 648,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "toArray",
        "description": "Returns the array from the matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "Matrix#toArray",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16382,
                16478
            ],
            "filename": "matrix.js",
            "lineno": 654,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000899",
                "name": "Matrix.prototype.toArray",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toArray",
        "longname": "Matrix#toArray",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#clone\n * @desc Returns a clone of the matrix\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 658,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "clone",
        "description": "Returns a clone of the matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#clone",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16594,
                16721
            ],
            "filename": "matrix.js",
            "lineno": 664,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000924",
                "name": "Matrix.prototype.clone",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "M": "Matrix#clone~M"
            }
        },
        "undocumented": true,
        "name": "clone",
        "longname": "Matrix#clone",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16641,
                16675
            ],
            "filename": "matrix.js",
            "lineno": 665,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000933",
                "name": "M",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "M",
        "longname": "Matrix#clone~M",
        "kind": "constant",
        "memberof": "Matrix#clone",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#fromArray\n * @desc Returns a Matrix from an array\n * @returns {Array}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 670,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "fromArray",
        "description": "Returns a Matrix from an array",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "Matrix#fromArray",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16841,
                16936
            ],
            "filename": "matrix.js",
            "lineno": 676,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000953",
                "name": "Matrix.fromArray",
                "type": "FunctionExpression",
                "paramnames": [
                    "arr"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "fromArray",
        "longname": "Matrix.fromArray",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#transpose\n * @desc Returns a transposed Matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([-1, 2], [3, 4], [-8, 2])\n * const b = A.transpose().toArray()\n * // returns [[-1, 3,-8], [2, 4, 2]]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 680,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "transpose",
        "description": "Returns a transposed Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([-1, 2], [3, 4], [-8, 2])\nconst b = A.transpose().toArray()\n// returns [[-1, 3,-8], [2, 4, 2]]"
        ],
        "longname": "Matrix#transpose",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17193,
                17291
            ],
            "filename": "matrix.js",
            "lineno": 691,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000979",
                "name": "Matrix.prototype.transpose",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "transpose",
        "longname": "Matrix#transpose",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.transpose\n * @desc Returns a transposed Matrix\n * @param {Matrix|Array} M - A Matrix or a matrix array\n * @returns {Matrix}\n * @example\n *\n * const a = [-1, 2], [3, 4], [-8, 2]\n * const b = Matrix.transpose(a).toArray()\n * // returns [[-1, 3,-8], [2, 4, 2]]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 695,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "transpose",
        "description": "Returns a transposed Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "A Matrix or a matrix array",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [-1, 2], [3, 4], [-8, 2]\nconst b = Matrix.transpose(a).toArray()\n// returns [[-1, 3,-8], [2, 4, 2]]"
        ],
        "longname": "Matrix.transpose",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17599,
                17668
            ],
            "filename": "matrix.js",
            "lineno": 707,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001000",
                "name": "Matrix.transpose",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "transpose",
        "longname": "Matrix.transpose",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#add\n * @desc Adds a number or a Matrix to this\n * @param {Matrix|Number} M - Add a Matrix or a number\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.add(1) // [[6, 5]]\n * const B = Matrix.of([[5, 5]])\n * B.add(B) // [[10, 10]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 711,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "add",
        "description": "Adds a number or a Matrix to this",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Number"
                    ]
                },
                "description": "Add a Matrix or a number",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.add(1) // [[6, 5]]\nconst B = Matrix.of([[5, 5]])\nB.add(B) // [[10, 10]]"
        ],
        "longname": "Matrix#add",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17975,
                18321
            ],
            "filename": "matrix.js",
            "lineno": 725,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001017",
                "name": "Matrix.prototype.add",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "add",
        "longname": "Matrix#add",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#subtract\n * @desc Subtracts a number or a Matrix from this\n * @param {Matrix|Number} M - Subtract a Matrix or a number\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.subtract(1) // [[4, 2]]\n * const B = Matrix.of([[5, 5]])\n * B.subtract(B) // [[0, 0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 736,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "subtract",
        "description": "Subtracts a number or a Matrix from this",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Number"
                    ]
                },
                "description": "Subtract a Matrix or a number",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.subtract(1) // [[4, 2]]\nconst B = Matrix.of([[5, 5]])\nB.subtract(B) // [[0, 0]]"
        ],
        "longname": "Matrix#subtract",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18653,
                19009
            ],
            "filename": "matrix.js",
            "lineno": 750,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001094",
                "name": "Matrix.prototype.subtract",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "subtract",
        "longname": "Matrix#subtract",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#multiply\n * @desc Mutliply a scalar or a matrix with a matrix. Throws an error if the multiplication is not possible.\n * @param {Matrix|Number} M - A Matrix M or a Number to multiply a Matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.multiply(2) // [[10, 8]]\n * const B = Matrix.of([[5, 5]])\n * B.multiply(B) // [[25, 25]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 761,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "multiply",
        "description": "Mutliply a scalar or a matrix with a matrix. Throws an error if the multiplication is not possible.",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Number"
                    ]
                },
                "description": "A Matrix M or a Number to multiply a Matrix",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.multiply(2) // [[10, 8]]\nconst B = Matrix.of([[5, 5]])\nB.multiply(B) // [[25, 25]]"
        ],
        "longname": "Matrix#multiply",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19417,
                19863
            ],
            "filename": "matrix.js",
            "lineno": 775,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001171",
                "name": "Matrix.prototype.multiply",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "multiply",
        "longname": "Matrix#multiply",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#additiveinverse\n * @desc Function that returns the matrix obtained by changing the sign of every matrix element. The additive inverse of matrix A is written –A.\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5,-5], [-4, 4]])\n * const minusA = A.additiveinverse()\n * // [[-5, 5], [4, -4]]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 787,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "additiveinverse",
        "description": "Function that returns the matrix obtained by changing the sign of every matrix element. The additive inverse of matrix A is written –A.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5,-5], [-4, 4]])\nconst minusA = A.additiveinverse()\n// [[-5, 5], [4, -4]]"
        ],
        "longname": "Matrix#additiveinverse",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20215,
                20292
            ],
            "filename": "matrix.js",
            "lineno": 798,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001254",
                "name": "Matrix.prototype.additiveinverse",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "additiveinverse",
        "longname": "Matrix#additiveinverse",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#hadamard\n * @desc Hadamar is an alias of the multiply function\n * @see Matrix.multiply\n * @param {Matrix|Number} M - A Matrix M or a Number to multiply a Matrix\n * @returns {Matrix}\n * @see Matrix.hadamard\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.hadamard(2) // [[10, 8]]\n * const B = Matrix.of([[5, 5]])\n * B.hadamard(B) // [[25, 25]]\n\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 802,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "hadamard",
        "description": "Hadamar is an alias of the multiply function",
        "see": [
            "Matrix.multiply",
            "Matrix.hadamard"
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Number"
                    ]
                },
                "description": "A Matrix M or a Number to multiply a Matrix",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.hadamard(2) // [[10, 8]]\nconst B = Matrix.of([[5, 5]])\nB.hadamard(B) // [[25, 25]]"
        ],
        "longname": "Matrix#hadamard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20691,
                20761
            ],
            "filename": "matrix.js",
            "lineno": 818,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001270",
                "name": "Matrix.prototype.hadamard",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "hadamard",
        "longname": "Matrix#hadamard",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#lu\n * @desc Calculates LU decomposition of the Matrix\n * @returns {Matrix[]}\n * @example\n *\n * const result = [[3, -7, -2, 2], [-3, 5, 1, 0], [6, -4, 0, -5], [-9, 5, -5, 12]]\n * const A = Matrix.fromArray(result)\n * const lu = A.lu()\n * // L.__value = [ [ 1, 0, 0, 0 ], [ -1, 1, 0, 0 ], [ 2, -5, 1, 0 ], [ -3, 8, 3, 1 ] ]\n * // U.__value =  [ [ 3, -7, -2, 2 ], [ 0, -2, -1, 2 ], [ 0, 0, -1, 1 ], [ 0, 0, 0, -1 ] ]\n * Matrix.dot(lu[0], lu[1]) // returns clone of A\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 822,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "lu",
        "description": "Calculates LU decomposition of the Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Matrix>"
                    ]
                }
            }
        ],
        "examples": [
            "const result = [[3, -7, -2, 2], [-3, 5, 1, 0], [6, -4, 0, -5], [-9, 5, -5, 12]]\nconst A = Matrix.fromArray(result)\nconst lu = A.lu()\n// L.__value = [ [ 1, 0, 0, 0 ], [ -1, 1, 0, 0 ], [ 2, -5, 1, 0 ], [ -3, 8, 3, 1 ] ]\n// U.__value =  [ [ 3, -7, -2, 2 ], [ 0, -2, -1, 2 ], [ 0, 0, -1, 1 ], [ 0, 0, 0, -1 ] ]\nMatrix.dot(lu[0], lu[1]) // returns clone of A"
        ],
        "longname": "Matrix#lu",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21278,
                21915
            ],
            "filename": "matrix.js",
            "lineno": 837,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001286",
                "name": "Matrix.prototype.lu",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "n": "Matrix#lu~n",
                "tol": "Matrix#lu~tol",
                "A": "Matrix#lu~A",
                "L": "Matrix#lu~L",
                "U": "Matrix#lu~U",
                "k": "Matrix#lu~k",
                "L.__value[undefined][undefined]": "Matrix#lu~L.__value[undefined][undefined]",
                "i": "Matrix#lu~i",
                "j": "Matrix#lu~j",
                "A.__value[undefined][undefined]": "Matrix#lu~A.__value[undefined][undefined]",
                "l": "Matrix#lu~l",
                "U.__value[undefined][undefined]": "Matrix#lu~U.__value[undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "lu",
        "longname": "Matrix#lu",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21322,
                21340
            ],
            "filename": "matrix.js",
            "lineno": 838,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001295",
                "name": "n",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "Matrix#lu~n",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21349,
                21359
            ],
            "filename": "matrix.js",
            "lineno": 839,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001302",
                "name": "tol",
                "type": "Literal",
                "value": 0.000001
            }
        },
        "undocumented": true,
        "name": "tol",
        "longname": "Matrix#lu~tol",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21368,
                21384
            ],
            "filename": "matrix.js",
            "lineno": 840,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001306",
                "name": "A",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "A",
        "longname": "Matrix#lu~A",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21393,
                21409
            ],
            "filename": "matrix.js",
            "lineno": 841,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001313",
                "name": "L",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "L",
        "longname": "Matrix#lu~L",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21418,
                21434
            ],
            "filename": "matrix.js",
            "lineno": 842,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001320",
                "name": "U",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "U",
        "longname": "Matrix#lu~U",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21447,
                21452
            ],
            "filename": "matrix.js",
            "lineno": 844,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001328",
                "name": "k",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "k",
        "longname": "Matrix#lu~k",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21566,
                21585
            ],
            "filename": "matrix.js",
            "lineno": 846,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001356",
                "name": "L.__value[undefined][undefined]",
                "type": "Literal",
                "funcscope": "Matrix#lu",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~L.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~L",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21599,
                21608
            ],
            "filename": "matrix.js",
            "lineno": 847,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001367",
                "name": "i",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#lu~i",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21630,
                21681
            ],
            "filename": "matrix.js",
            "lineno": 848,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001379",
                "name": "L.__value[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#lu",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~L.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~L",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21697,
                21706
            ],
            "filename": "matrix.js",
            "lineno": 849,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001404",
                "name": "j",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#lu~j",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21730,
                21799
            ],
            "filename": "matrix.js",
            "lineno": 850,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001416",
                "name": "A.__value[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#lu",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~A.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~A",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21827,
                21832
            ],
            "filename": "matrix.js",
            "lineno": 853,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001449",
                "name": "l",
                "type": "Identifier",
                "value": "k"
            }
        },
        "undocumented": true,
        "name": "l",
        "longname": "Matrix#lu~l",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21854,
                21887
            ],
            "filename": "matrix.js",
            "lineno": 854,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001459",
                "name": "U.__value[undefined][undefined]",
                "type": "MemberExpression",
                "funcscope": "Matrix#lu",
                "value": "A.__value[undefined][undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~U.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~U",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#rref\n * @desc Returns a Matrix containing the row reduced echelon form\n * @returns {Matrix}\n * @example\n *\n * var A = Matrix.of([[-1, 1], [-1, 0], [0, -1], [-1, -2]])\n * A.rref() //  [ [ 1, 0 ], [ -0, 1 ], [ 0, 0 ], [ 0, 0 ] ]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 860,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "rref",
        "description": "Returns a Matrix containing the row reduced echelon form",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "var A = Matrix.of([[-1, 1], [-1, 0], [0, -1], [-1, -2]])\nA.rref() //  [ [ 1, 0 ], [ -0, 1 ], [ 0, 0 ], [ 0, 0 ] ]"
        ],
        "longname": "Matrix#rref",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22192,
                23178
            ],
            "filename": "matrix.js",
            "lineno": 870,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001479",
                "name": "Matrix.prototype.rref",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "lead": "Matrix#rref~lead",
                "resultMatrix": "Matrix#rref~resultMatrix",
                "r": "Matrix#rref~r",
                "i": "Matrix#rref~i",
                "tmp": "Matrix#rref~tmp",
                "resultMatrix.__value[undefined]": "Matrix#rref~resultMatrix.__value[undefined]",
                "val": "Matrix#rref~val",
                "j": "Matrix#rref~j",
                "resultMatrix.__value[undefined][undefined]": "Matrix#rref~resultMatrix.__value[undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "rref",
        "longname": "Matrix#rref",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22236,
                22244
            ],
            "filename": "matrix.js",
            "lineno": 871,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001488",
                "name": "lead",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "lead",
        "longname": "Matrix#rref~lead",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22253,
                22280
            ],
            "filename": "matrix.js",
            "lineno": 872,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001492",
                "name": "resultMatrix",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "resultMatrix",
        "longname": "Matrix#rref~resultMatrix",
        "kind": "constant",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22293,
                22298
            ],
            "filename": "matrix.js",
            "lineno": 874,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001500",
                "name": "r",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "r",
        "longname": "Matrix#rref~r",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22401,
                22406
            ],
            "filename": "matrix.js",
            "lineno": 878,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001523",
                "name": "i",
                "type": "Identifier",
                "value": "r"
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rref~i",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22509,
                22514
            ],
            "filename": "matrix.js",
            "lineno": 882,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001549",
                "name": "i",
                "type": "Identifier",
                "funcscope": "Matrix#rref",
                "value": "r",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rref~i",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22632,
                22661
            ],
            "filename": "matrix.js",
            "lineno": 890,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001566",
                "name": "tmp",
                "type": "MemberExpression",
                "value": "resultMatrix.__value[undefined]"
            }
        },
        "undocumented": true,
        "name": "tmp",
        "longname": "Matrix#rref~tmp",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22666,
                22715
            ],
            "filename": "matrix.js",
            "lineno": 891,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001574",
                "name": "resultMatrix.__value[undefined]",
                "type": "MemberExpression",
                "funcscope": "Matrix#rref",
                "value": "resultMatrix.__value[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22720,
                22749
            ],
            "filename": "matrix.js",
            "lineno": 892,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001586",
                "name": "resultMatrix.__value[undefined]",
                "type": "Identifier",
                "funcscope": "Matrix#rref",
                "value": "tmp",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22759,
                22794
            ],
            "filename": "matrix.js",
            "lineno": 894,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001594",
                "name": "val",
                "type": "MemberExpression",
                "value": "resultMatrix.__value[undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "Matrix#rref~val",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22808,
                22813
            ],
            "filename": "matrix.js",
            "lineno": 895,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001605",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#rref~j",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22848,
                22881
            ],
            "filename": "matrix.js",
            "lineno": 896,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001618",
                "name": "resultMatrix.__value[undefined][undefined]",
                "type": "Identifier",
                "funcscope": "Matrix#rref",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22902,
                22907
            ],
            "filename": "matrix.js",
            "lineno": 899,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001629",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rref~i",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22970,
                23005
            ],
            "filename": "matrix.js",
            "lineno": 901,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001647",
                "name": "val",
                "type": "MemberExpression",
                "funcscope": "Matrix#rref",
                "value": "resultMatrix.__value[undefined][undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "Matrix#rref~val",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23021,
                23026
            ],
            "filename": "matrix.js",
            "lineno": 902,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001658",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#rref~j",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23063,
                23125
            ],
            "filename": "matrix.js",
            "lineno": 903,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001671",
                "name": "resultMatrix.__value[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#rref",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#solve\n * @desc Returns the solution for a system of linear equations\n * @param {Array} b - The numbers for which to solve the system of linear equations\n * @returns {Array}\n * @example\n *\n * // Solve xA = b\n * // 5x + y  = 7\n * // 3x - 4y = 18\n * // Solution for x and y:\n * // x = 2\n * // y = -3\n *\n * const A = Matrix.of([[5, 1], [3, -4]])\n * const solveA = A.solve([7, 18]) // [2, -3]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 911,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "solve",
        "description": "Returns the solution for a system of linear equations",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The numbers for which to solve the system of linear equations",
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "// Solve xA = b\n// 5x + y  = 7\n// 3x - 4y = 18\n// Solution for x and y:\n// x = 2\n// y = -3\n\nconst A = Matrix.of([[5, 1], [3, -4]])\nconst solveA = A.solve([7, 18]) // [2, -3]"
        ],
        "longname": "Matrix#solve",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23619,
                23774
            ],
            "filename": "matrix.js",
            "lineno": 930,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001694",
                "name": "Matrix.prototype.solve",
                "type": "FunctionExpression",
                "paramnames": [
                    "b"
                ]
            },
            "vars": {
                "LU": "Matrix#solve~LU",
                "L": "Matrix#solve~L",
                "U": "Matrix#solve~U",
                "n": "Matrix#solve~n"
            }
        },
        "undocumented": true,
        "name": "solve",
        "longname": "Matrix#solve",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23667,
                23681
            ],
            "filename": "matrix.js",
            "lineno": 931,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001704",
                "name": "LU",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "LU",
        "longname": "Matrix#solve~LU",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23690,
                23699
            ],
            "filename": "matrix.js",
            "lineno": 932,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001711",
                "name": "L",
                "type": "MemberExpression",
                "value": "LU[0]"
            }
        },
        "undocumented": true,
        "name": "L",
        "longname": "Matrix#solve~L",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23708,
                23717
            ],
            "filename": "matrix.js",
            "lineno": 933,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001717",
                "name": "U",
                "type": "MemberExpression",
                "value": "LU[1]"
            }
        },
        "undocumented": true,
        "name": "U",
        "longname": "Matrix#solve~U",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23726,
                23744
            ],
            "filename": "matrix.js",
            "lineno": 934,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001723",
                "name": "n",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "Matrix#solve~n",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#inverse\n * @desc Returns the inverse of a Matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[1, 1], [2, 4]]).inverse()\n * // [ [ 2, -0.5 ], [ -1, 0.5 ] ]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 939,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "inverse",
        "description": "Returns the inverse of a Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [2, 4]]).inverse()\n// [ [ 2, -0.5 ], [ -1, 0.5 ] ]"
        ],
        "longname": "Matrix#inverse",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23998,
                24307
            ],
            "filename": "matrix.js",
            "lineno": 950,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001737",
                "name": "Matrix.prototype.inverse",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "A": "Matrix#inverse~A",
                "I": "Matrix#inverse~I",
                "Inv": "Matrix#inverse~Inv",
                "result": "Matrix#inverse~result",
                "": null
            }
        },
        "undocumented": true,
        "name": "inverse",
        "longname": "Matrix#inverse",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24047,
                24063
            ],
            "filename": "matrix.js",
            "lineno": 951,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001746",
                "name": "A",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "A",
        "longname": "Matrix#inverse~A",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24072,
                24088
            ],
            "filename": "matrix.js",
            "lineno": 952,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001753",
                "name": "I",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "I",
        "longname": "Matrix#inverse~I",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24097,
                24121
            ],
            "filename": "matrix.js",
            "lineno": 953,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001760",
                "name": "Inv",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Inv",
        "longname": "Matrix#inverse~Inv",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24131,
                24278
            ],
            "filename": "matrix.js",
            "lineno": 955,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001771",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "Matrix#inverse~result",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24191,
                24210
            ],
            "filename": "matrix.js",
            "lineno": 956,
            "columnno": 10,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001785",
                "name": "half",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "half",
        "longname": "<anonymous>~half",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#rank\n * @desc Number indicating the maximum number of linearly independent columns.\n * @returns {Number}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 963,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "rank",
        "description": "Number indicating the maximum number of linearly independent columns.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "longname": "Matrix#rank",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24462,
                24643
            ],
            "filename": "matrix.js",
            "lineno": 969,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001815",
                "name": "Matrix.prototype.rank",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "rref": "Matrix#rank~rref",
                "result": "Matrix#rank~result",
                "i": "Matrix#rank~i"
            }
        },
        "undocumented": true,
        "name": "rank",
        "longname": "Matrix#rank",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24508,
                24526
            ],
            "filename": "matrix.js",
            "lineno": 970,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001824",
                "name": "rref",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "rref",
        "longname": "Matrix#rank~rref",
        "kind": "constant",
        "memberof": "Matrix#rank",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24533,
                24543
            ],
            "filename": "matrix.js",
            "lineno": 971,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001831",
                "name": "result",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "Matrix#rank~result",
        "kind": "member",
        "memberof": "Matrix#rank",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24555,
                24560
            ],
            "filename": "matrix.js",
            "lineno": 972,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001836",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rank~i",
        "kind": "member",
        "memberof": "Matrix#rank",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24593,
                24621
            ],
            "filename": "matrix.js",
            "lineno": 973,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001849",
                "name": "result",
                "type": "MemberExpression",
                "funcscope": "Matrix#rank",
                "value": "rref.__value[undefined][undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "Matrix#rank~result",
        "kind": "member",
        "memberof": "Matrix#rank",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#dimension\n * @desc Number indicating the maximum number of linearly independent columns.\n * @see Matrix.rank\n * @returns {Number}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 978,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "dimension",
        "description": "Number indicating the maximum number of linearly independent columns.",
        "see": [
            "Matrix.rank"
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "longname": "Matrix#dimension",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24823,
                24888
            ],
            "filename": "matrix.js",
            "lineno": 985,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001861",
                "name": "Matrix.prototype.dimension",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dimension",
        "longname": "Matrix#dimension",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#diag\n * @desc Returns an array containing the values on the diagonal\n * @returns {Array}\n * @example\n *\n * const diag1 = Matrix.ones(3, 3).diag()\n * // [1, 1, 1]\n *\n * const diag0 = Matrix.zeros(5, 5).diag()\n * // [0, 0, 0, 0, 0]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 989,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "diag",
        "description": "Returns an array containing the values on the diagonal",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.ones(3, 3).diag()\n// [1, 1, 1]\n\nconst diag0 = Matrix.zeros(5, 5).diag()\n// [0, 0, 0, 0, 0]"
        ],
        "longname": "Matrix#diag",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25171,
                25296
            ],
            "filename": "matrix.js",
            "lineno": 1003,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001875",
                "name": "Matrix.prototype.diag",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "diag",
        "longname": "Matrix#diag",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.diag\n * @desc Returns an array containing the values on the diagonal\n * @param {Matrix|Array} M - Matrix from which to return the diagonal\n * @returns {Array}\n * @example\n *\n * const diag1 = Matrix.diag([[2, 1], [1, 5]])\n * // [2, 5]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1009,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "diag",
        "description": "Returns an array containing the values on the diagonal",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix from which to return the diagonal",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.diag([[2, 1], [1, 5]])\n// [2, 5]"
        ],
        "longname": "Matrix.diag",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25583,
                25642
            ],
            "filename": "matrix.js",
            "lineno": 1021,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001906",
                "name": "Matrix.diag",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "diag",
        "longname": "Matrix.diag",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#diagproduct\n * @desc Returns the product of the values on the diagonal\n * @returns {Number}\n * @example\n *\n * const diag1 = Matrix.ones(3, 3).diagproduct()\n * // 1\n *\n * const diag0 = Matrix.zeros(5, 5).diagproduct()\n * // 0\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1025,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "diagproduct",
        "description": "Returns the product of the values on the diagonal",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.ones(3, 3).diagproduct()\n// 1\n\nconst diag0 = Matrix.zeros(5, 5).diagproduct()\n// 0"
        ],
        "longname": "Matrix#diagproduct",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25920,
                26054
            ],
            "filename": "matrix.js",
            "lineno": 1039,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001923",
                "name": "Matrix.prototype.diagproduct",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "diagproduct",
        "longname": "Matrix#diagproduct",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26002,
                26015
            ],
            "filename": "matrix.js",
            "lineno": 1041,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001942",
                "name": "acc",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "x[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.diagproduct\n * @desc Returns the product of the values on the diagonal\n * @param {Matrix|Array} M - Matrix from which to return the diagonal\n * @returns {Number}\n * @example\n *\n * const diag1 = Matrix.diagproduct([[2, 1], [1, 5]])\n * // 10\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1046,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "diagproduct",
        "description": "Returns the product of the values on the diagonal",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix from which to return the diagonal",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.diagproduct([[2, 1], [1, 5]])\n// 10"
        ],
        "longname": "Matrix.diagproduct",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26347,
                26420
            ],
            "filename": "matrix.js",
            "lineno": 1058,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001954",
                "name": "Matrix.diagproduct",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "diagproduct",
        "longname": "Matrix.diagproduct",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#sum\n * @desc Returns the sum of the values in the Matrix\n * @returns {Number}\n * @example\n *\n * const diag1 = Matrix.ones(3, 3).sum()\n * // 9\n *\n * const diag0 = Matrix.zeros(5, 5).sum()\n * // 0\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1062,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "sum",
        "description": "Returns the sum of the values in the Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.ones(3, 3).sum()\n// 9\n\nconst diag0 = Matrix.zeros(5, 5).sum()\n// 0"
        ],
        "longname": "Matrix#sum",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26668,
                26822
            ],
            "filename": "matrix.js",
            "lineno": 1076,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001971",
                "name": "Matrix.prototype.sum",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "sum",
        "longname": "Matrix#sum",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26737,
                26783
            ],
            "filename": "matrix.js",
            "lineno": 1078,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001989",
                "name": "acc",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.sum\n * @desc Returns the sum of the values in the Matrix\n * @param {Matrix|Array} M - Matrix from which to return the diagonal\n * @returns {Number}\n * @example\n *\n * const diag1 = Matrix.sum([[2, 1], [1, 5]])\n * // 9\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1083,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "sum",
        "description": "Returns the sum of the values in the Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix from which to return the diagonal",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.sum([[2, 1], [1, 5]])\n// 9"
        ],
        "longname": "Matrix.sum",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27092,
                27149
            ],
            "filename": "matrix.js",
            "lineno": 1095,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002010",
                "name": "Matrix.sum",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "sum",
        "longname": "Matrix.sum",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#kronecker\n * @desc The Kronecker product is an operation on two matrices of arbitrary size resulting in a block matrix.\n * @param {Matrix} M - The right side Matrix of the product (this ⊗ M)\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1099,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "kronecker",
        "description": "The Kronecker product is an operation on two matrices of arbitrary size resulting in a block matrix.",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The right side Matrix of the product (this ⊗ M)",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#kronecker",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27411,
                27914
            ],
            "filename": "matrix.js",
            "lineno": 1106,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002027",
                "name": "Matrix.prototype.kronecker",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "m": "Matrix#kronecker~m",
                "n": "Matrix#kronecker~n",
                "p": "Matrix#kronecker~p",
                "q": "Matrix#kronecker~q",
                "left": "Matrix#kronecker~left",
                "right": "Matrix#kronecker~right",
                "frame": "Matrix#kronecker~frame",
                "i": "Matrix#kronecker~i",
                "j": "Matrix#kronecker~j",
                "k": "Matrix#kronecker~k",
                "l": "Matrix#kronecker~l",
                "frame[undefined][undefined]": "Matrix#kronecker~frame.undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "kronecker",
        "longname": "Matrix#kronecker",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27463,
                27481
            ],
            "filename": "matrix.js",
            "lineno": 1107,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002037",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix#kronecker~m",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27490,
                27508
            ],
            "filename": "matrix.js",
            "lineno": 1108,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002044",
                "name": "n",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "Matrix#kronecker~n",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27517,
                27532
            ],
            "filename": "matrix.js",
            "lineno": 1109,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002051",
                "name": "p",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "p",
        "longname": "Matrix#kronecker~p",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27541,
                27556
            ],
            "filename": "matrix.js",
            "lineno": 1110,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002058",
                "name": "q",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "q",
        "longname": "Matrix#kronecker~q",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27566,
                27585
            ],
            "filename": "matrix.js",
            "lineno": 1112,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002065",
                "name": "left",
                "type": "MemberExpression",
                "value": "this.__value"
            }
        },
        "undocumented": true,
        "name": "left",
        "longname": "Matrix#kronecker~left",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27594,
                27611
            ],
            "filename": "matrix.js",
            "lineno": 1113,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002071",
                "name": "right",
                "type": "MemberExpression",
                "value": "M.__value"
            }
        },
        "undocumented": true,
        "name": "right",
        "longname": "Matrix#kronecker~right",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27621,
                27651
            ],
            "filename": "matrix.js",
            "lineno": 1115,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002077",
                "name": "frame",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "frame",
        "longname": "Matrix#kronecker~frame",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27664,
                27669
            ],
            "filename": "matrix.js",
            "lineno": 1117,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002089",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#kronecker~i",
        "kind": "member",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27698,
                27703
            ],
            "filename": "matrix.js",
            "lineno": 1118,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002100",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#kronecker~j",
        "kind": "member",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27734,
                27739
            ],
            "filename": "matrix.js",
            "lineno": 1119,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002111",
                "name": "k",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "k",
        "longname": "Matrix#kronecker~k",
        "kind": "member",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27772,
                27777
            ],
            "filename": "matrix.js",
            "lineno": 1120,
            "columnno": 17,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002122",
                "name": "l",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "l",
        "longname": "Matrix#kronecker~l",
        "kind": "member",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27803,
                27857
            ],
            "filename": "matrix.js",
            "lineno": 1121,
            "columnno": 10,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002132",
                "name": "frame[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#kronecker",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined][undefined]",
        "longname": "Matrix#kronecker~frame.undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#kronecker~frame",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.kronecker\n * @desc The Kronecker product is an operation on two matrices of arbitrary size resulting in a block matrix.\n * @param {Matrix} A - The left side Matrix of the product (A ⊗ B)\n * @param {Matrix} B - The right side Matrix of the product (A ⊗ B)\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1130,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "kronecker",
        "description": "The Kronecker product is an operation on two matrices of arbitrary size resulting in a block matrix.",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The left side Matrix of the product (A ⊗ B)",
                "name": "A"
            },
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The right side Matrix of the product (A ⊗ B)",
                "name": "B"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.kronecker",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28240,
                28313
            ],
            "filename": "matrix.js",
            "lineno": 1138,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002164",
                "name": "Matrix.kronecker",
                "type": "FunctionExpression",
                "paramnames": [
                    "A",
                    "B"
                ]
            }
        },
        "undocumented": true,
        "name": "kronecker",
        "longname": "Matrix.kronecker",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#determinant\n * @desc Calculates the determinant of a square Matrix using Sarrus' rule or LU decomposition\n * @returns {Number}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1142,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "determinant",
        "description": "Calculates the determinant of a square Matrix using Sarrus' rule or LU decomposition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "longname": "Matrix#determinant",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28490,
                29007
            ],
            "filename": "matrix.js",
            "lineno": 1148,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002183",
                "name": "Matrix.prototype.determinant",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "a": "Matrix#determinant~a",
                "b": "Matrix#determinant~b",
                "c": "Matrix#determinant~c",
                "d": "Matrix#determinant~d",
                "lu": "Matrix#determinant~lu",
                "detA": "Matrix#determinant~detA",
                "detB": "Matrix#determinant~detB"
            }
        },
        "undocumented": true,
        "name": "determinant",
        "longname": "Matrix#determinant",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28604,
                28626
            ],
            "filename": "matrix.js",
            "lineno": 1151,
            "columnno": 12,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002206",
                "name": "a",
                "type": "MemberExpression",
                "value": "this.__value[0][0]"
            }
        },
        "undocumented": true,
        "name": "a",
        "longname": "Matrix#determinant~a",
        "kind": "constant",
        "memberof": "Matrix#determinant",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28639,
                28661
            ],
            "filename": "matrix.js",
            "lineno": 1152,
            "columnno": 12,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002216",
                "name": "b",
                "type": "MemberExpression",
                "value": "this.__value[0][1]"
            }
        },
        "undocumented": true,
        "name": "b",
        "longname": "Matrix#determinant~b",
        "kind": "constant",
        "memberof": "Matrix#determinant",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28674,
                28696
            ],
            "filename": "matrix.js",
            "lineno": 1153,
            "columnno": 12,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002226",
                "name": "c",
                "type": "MemberExpression",
                "value": "this.__value[1][0]"
            }
        },
        "undocumented": true,
        "name": "c",
        "longname": "Matrix#determinant~c",
        "kind": "constant",
        "memberof": "Matrix#determinant",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28709,
                28731
            ],
            "filename": "matrix.js",
            "lineno": 1154,
            "columnno": 12,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002236",
                "name": "d",
                "type": "MemberExpression",
                "value": "this.__value[1][1]"
            }
        },
        "undocumented": true,
        "name": "d",
        "longname": "Matrix#determinant~d",
        "kind": "constant",
        "memberof": "Matrix#determinant",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28776,
                28790
            ],
            "filename": "matrix.js",
            "lineno": 1158,
            "columnno": 10,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002254",
                "name": "lu",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "lu",
        "longname": "Matrix#determinant~lu",
        "kind": "constant",
        "memberof": "Matrix#determinant",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28801,
                28835
            ],
            "filename": "matrix.js",
            "lineno": 1159,
            "columnno": 10,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002261",
                "name": "detA",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "detA",
        "longname": "Matrix#determinant~detA",
        "kind": "constant",
        "memberof": "Matrix#determinant",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28846,
                28880
            ],
            "filename": "matrix.js",
            "lineno": 1160,
            "columnno": 10,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002272",
                "name": "detB",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "detB",
        "longname": "Matrix#determinant~detB",
        "kind": "constant",
        "memberof": "Matrix#determinant",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.determinant\n * @desc Calculates the determinant of a square Matrix using Sarrus' rule or LU decomposition\n * @param {Matrix|Array} A - Matrix as input to calculate the determinant\n * @returns {Number}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1167,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "determinant",
        "description": "Calculates the determinant of a square Matrix using Sarrus' rule or LU decomposition",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix as input to calculate the determinant",
                "name": "A"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "longname": "Matrix.determinant",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29258,
                29331
            ],
            "filename": "matrix.js",
            "lineno": 1174,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002292",
                "name": "Matrix.determinant",
                "type": "FunctionExpression",
                "paramnames": [
                    "A"
                ]
            }
        },
        "undocumented": true,
        "name": "determinant",
        "longname": "Matrix.determinant",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#max\n * @desc Returns the largest number in the Matrix\n * @returns {*}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1178,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "max",
        "description": "Returns the largest number in the Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "longname": "Matrix#max",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29451,
                29545
            ],
            "filename": "matrix.js",
            "lineno": 1184,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002309",
                "name": "Matrix.prototype.max",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "max",
        "longname": "Matrix#max",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#min\n * @desc Returns the smallest number in the Matrix\n * @returns {*}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1188,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "min",
        "description": "Returns the smallest number in the Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "longname": "Matrix#min",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29666,
                29760
            ],
            "filename": "matrix.js",
            "lineno": 1194,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002332",
                "name": "Matrix.prototype.min",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "min",
        "longname": "Matrix#min",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#divide\n * @desc Divide a scalar or a matrix by a matrix. Throws an error if the division is not possible.\n * @param {Matrix|Number} M - A Matrix M or a Number to divide a Matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.divide(2) // [[10, 8]]\n * const B = Matrix.of([[1, 1], [2, 4]])\n * B.divide(B) // [[1, 0], [0, 1]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1198,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "divide",
        "description": "Divide a scalar or a matrix by a matrix. Throws an error if the division is not possible.",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Number"
                    ]
                },
                "description": "A Matrix M or a Number to divide a Matrix",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.divide(2) // [[10, 8]]\nconst B = Matrix.of([[1, 1], [2, 4]])\nB.divide(B) // [[1, 0], [0, 1]]"
        ],
        "longname": "Matrix#divide",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30164,
                30594
            ],
            "filename": "matrix.js",
            "lineno": 1212,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002355",
                "name": "Matrix.prototype.divide",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "mInv": "Matrix#divide~mInv"
            }
        },
        "undocumented": true,
        "name": "divide",
        "longname": "Matrix#divide",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30501,
                30519
            ],
            "filename": "matrix.js",
            "lineno": 1220,
            "columnno": 10,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002407",
                "name": "mInv",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "mInv",
        "longname": "Matrix#divide~mInv",
        "kind": "constant",
        "memberof": "Matrix#divide",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#getColumn\n * @desc Returns the values of a Matrix column\n * @param {Number} index Index of the column\n * @returns {Array}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1227,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "getColumn",
        "description": "Returns the values of a Matrix column",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Index of the column",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "Matrix#getColumn",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30766,
                30852
            ],
            "filename": "matrix.js",
            "lineno": 1234,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002429",
                "name": "Matrix.prototype.getColumn",
                "type": "FunctionExpression",
                "paramnames": [
                    "index"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "getColumn",
        "longname": "Matrix#getColumn",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.getColumn\n * @desc Returns the values of a Matrix column\n * @param {Number} index Index of the column\n * @param {Matrix | Array} M\n * @returns {Array}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1238,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "getColumn",
        "description": "Returns the values of a Matrix column",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Index of the column",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "Matrix.getColumn",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                31053,
                31141
            ],
            "filename": "matrix.js",
            "lineno": 1246,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002449",
                "name": "Matrix.getColumn",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getColumn",
        "longname": "Matrix.getColumn",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#getRow\n * @desc Returns the values of a Matrix row\n * @param {Number} index Index of the row\n * @returns {Array}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1250,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "getRow",
        "description": "Returns the values of a Matrix row",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Index of the row",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "Matrix#getRow",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                31304,
                31379
            ],
            "filename": "matrix.js",
            "lineno": 1257,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002470",
                "name": "Matrix.prototype.getRow",
                "type": "FunctionExpression",
                "paramnames": [
                    "index"
                ]
            }
        },
        "undocumented": true,
        "name": "getRow",
        "longname": "Matrix#getRow",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.getRow\n * @desc Returns the values of a Matrix row\n * @param {Number} index Index of the row\n * @param {Matrix | Array} M\n * @returns {Array}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1261,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "getRow",
        "description": "Returns the values of a Matrix row",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Index of the row",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "Matrix.getRow",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                31571,
                31653
            ],
            "filename": "matrix.js",
            "lineno": 1269,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002486",
                "name": "Matrix.getRow",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getRow",
        "longname": "Matrix.getRow",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                31655,
                31676
            ],
            "filename": "matrix.js",
            "lineno": 1273,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002506",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                37,
                139
            ],
            "filename": "addMatrix.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002516",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                37,
                99
            ],
            "filename": "addScalar.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002553",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function concat\n * @desc Helper function concatenating/combining 2 Matrices\n * @param {Matrix} M - Left side of the concat operatior\n * @param {Array} m - right side of the contac operator\n * @param {Number} idx - Index of the row\n * @returns {Array}\n */",
        "meta": {
            "filename": "concat.js",
            "lineno": 2,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "concat",
        "description": "Helper function concatenating/combining 2 Matrices",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "Left side of the concat operatior",
                "name": "M"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "right side of the contac operator",
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Index of the row",
                "name": "idx"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "concat",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                302,
                383
            ],
            "filename": "concat.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002578",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function dot\n * @desc Helper function to generate the dotproduct of 2 Matrices\n * @param {Matrix} B - Right side of hte dot product\n * @param {Array} a - Array representing theleft side of the dot product\n * @returns {Array}\n */",
        "meta": {
            "filename": "dot.js",
            "lineno": 4,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "dot",
        "description": "Helper function to generate the dotproduct of 2 Matrices",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "Right side of hte dot product",
                "name": "B"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "Array representing theleft side of the dot product",
                "name": "a"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "dot",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                308,
                490
            ],
            "filename": "dot.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002609",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                403,
                446
            ],
            "filename": "dot.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002633",
                "name": "acc",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @function empty\n * @desc Helper function to generate an empty Matrix\n */",
        "meta": {
            "filename": "empty.js",
            "lineno": 2,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "empty",
        "description": "Helper function to generate an empty Matrix",
        "longname": "empty",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                111,
                140
            ],
            "filename": "empty.js",
            "lineno": 6,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002662",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function generate\n * @desc Generator function for a matrix array, values are set to undefined\n * @param {Number} rows\n * @param {Number} cols\n * @returns {any[][]}\n */",
        "meta": {
            "filename": "generate.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "generate",
        "description": "Generator function for a matrix array, values are set to undefined",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Array.<any>>"
                    ]
                }
            }
        ],
        "longname": "generate",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                176,
                278
            ],
            "filename": "generate.js",
            "lineno": 8,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002670",
                "name": "module.exports",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function matrixIdentity\n * @desc Creates an identiy matrix from an empty array\n * @param m {Array}\n * @param idx {Number}\n * @return {Matrix}\n */",
        "meta": {
            "filename": "identity.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "matrixIdentity",
        "description": "Creates an identiy matrix from an empty array",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "idx"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "matrixIdentity",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                184,
                251
            ],
            "filename": "identity.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002701",
                "name": "module.exports",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "m",
                    "idx"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function round\n * @param value {Number}\n * @param decimals {Number}\n * @returns {Number}\n */",
        "meta": {
            "filename": "round.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "round",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "decimals"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "longname": "round",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                101,
                220
            ],
            "filename": "round.js",
            "lineno": 7,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002719",
                "name": "module.exports",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value",
                    "decimals"
                ]
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                116,
                220
            ],
            "filename": "round.js",
            "lineno": 7,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002720",
                "name": "round",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value",
                    "decimals"
                ]
            }
        },
        "undocumented": true,
        "name": "round",
        "longname": "round",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * @function solveL\n * @desc solve the xA = b equation for lower triangular\n * @param n\n * @param L\n * @param b\n * @returns {Array}\n */",
        "meta": {
            "filename": "solve.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "solveL",
        "description": "solve the xA = b equation for lower triangular",
        "params": [
            {
                "name": "n"
            },
            {
                "name": "L"
            },
            {
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "solveL",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                140,
                351
            ],
            "filename": "solve.js",
            "lineno": 9,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002741",
                "name": "solveL",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "n",
                    "L",
                    "b"
                ]
            },
            "vars": {
                "s": "solveL~s",
                "c": "solveL~c",
                "k": "solveL~k",
                "j": "solveL~j",
                "c[undefined]": "solveL~c.undefined]"
            }
        },
        "undocumented": true,
        "name": "solveL",
        "longname": "solveL",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                174,
                179
            ],
            "filename": "solve.js",
            "lineno": 10,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002748",
                "name": "s",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "s",
        "longname": "solveL~s",
        "kind": "member",
        "memberof": "solveL",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                188,
                194
            ],
            "filename": "solve.js",
            "lineno": 11,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002752",
                "name": "c",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "c",
        "longname": "solveL~c",
        "kind": "constant",
        "memberof": "solveL",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                207,
                212
            ],
            "filename": "solve.js",
            "lineno": 13,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002757",
                "name": "k",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "k",
        "longname": "solveL~k",
        "kind": "member",
        "memberof": "solveL",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                241,
                246
            ],
            "filename": "solve.js",
            "lineno": 14,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002768",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "solveL~j",
        "kind": "member",
        "memberof": "solveL",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                268,
                298
            ],
            "filename": "solve.js",
            "lineno": 15,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002778",
                "name": "s",
                "type": "BinaryExpression",
                "funcscope": "solveL",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "s",
        "longname": "solveL~s",
        "kind": "member",
        "memberof": "solveL",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                309,
                324
            ],
            "filename": "solve.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002794",
                "name": "c[undefined]",
                "type": "BinaryExpression",
                "funcscope": "solveL",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "solveL~c.undefined]",
        "kind": "member",
        "memberof": "solveL~c",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                329,
                334
            ],
            "filename": "solve.js",
            "lineno": 18,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002804",
                "name": "s",
                "type": "Literal",
                "funcscope": "solveL",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "s",
        "longname": "solveL~s",
        "kind": "member",
        "memberof": "solveL",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @function solveU\n * @desc solve the xA = b equation for upper triangular\n * @param n\n * @param U\n * @param c\n * @param b\n */",
        "meta": {
            "filename": "solve.js",
            "lineno": 23,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "solveU",
        "description": "solve the xA = b equation for upper triangular",
        "params": [
            {
                "name": "n"
            },
            {
                "name": "U"
            },
            {
                "name": "c"
            },
            {
                "name": "b"
            }
        ],
        "longname": "solveU",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                485,
                719
            ],
            "filename": "solve.js",
            "lineno": 31,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002809",
                "name": "solveU",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "n",
                    "U",
                    "c",
                    "b"
                ]
            },
            "vars": {
                "x": "solveU~x",
                "a": "solveU~a",
                "t": "solveU~t",
                "b": "solveU~b",
                "x[undefined]": "solveU~x.undefined]"
            }
        },
        "undocumented": true,
        "name": "solveU",
        "longname": "solveU",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                524,
                530
            ],
            "filename": "solve.js",
            "lineno": 32,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002817",
                "name": "x",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "x",
        "longname": "solveU~x",
        "kind": "constant",
        "memberof": "solveU",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                542,
                551
            ],
            "filename": "solve.js",
            "lineno": 33,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002822",
                "name": "a",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "a",
        "longname": "solveU~a",
        "kind": "member",
        "memberof": "solveU",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                576,
                581
            ],
            "filename": "solve.js",
            "lineno": 34,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002835",
                "name": "t",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "t",
        "longname": "solveU~t",
        "kind": "member",
        "memberof": "solveU",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                595,
                604
            ],
            "filename": "solve.js",
            "lineno": 35,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002840",
                "name": "b",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "b",
        "longname": "solveU~b",
        "kind": "member",
        "memberof": "solveU",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                626,
                656
            ],
            "filename": "solve.js",
            "lineno": 36,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002852",
                "name": "t",
                "type": "BinaryExpression",
                "funcscope": "solveU",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "t",
        "longname": "solveU~t",
        "kind": "member",
        "memberof": "solveU",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                667,
                702
            ],
            "filename": "solve.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002868",
                "name": "x[undefined]",
                "type": "BinaryExpression",
                "funcscope": "solveU",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "solveU~x.undefined]",
        "kind": "member",
        "memberof": "solveU~x",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function solve\n * @desc Helper function for xA = b solver\n * @param n\n * @param L\n * @param U\n * @param b\n */",
        "meta": {
            "filename": "solve.js",
            "lineno": 43,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "solve",
        "description": "Helper function for xA = b solver",
        "params": [
            {
                "name": "n"
            },
            {
                "name": "L"
            },
            {
                "name": "U"
            },
            {
                "name": "b"
            }
        ],
        "longname": "solve",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                839,
                941
            ],
            "filename": "solve.js",
            "lineno": 51,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002887",
                "name": "module.exports",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "n",
                    "L",
                    "U",
                    "b"
                ]
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                854,
                941
            ],
            "filename": "solve.js",
            "lineno": 51,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002888",
                "name": "solve",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "n",
                    "L",
                    "U",
                    "b"
                ]
            },
            "vars": {
                "c": "solve~c"
            }
        },
        "undocumented": true,
        "name": "solve",
        "longname": "solve",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                892,
                911
            ],
            "filename": "solve.js",
            "lineno": 52,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002896",
                "name": "c",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "c",
        "longname": "solve~c",
        "kind": "constant",
        "memberof": "solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @function transpose\n * @desc Transposes a array of arrays using the Matrix.map function\n * @param m {Array}\n * @param idx {Number}\n * @return {Matrix}\n */",
        "meta": {
            "filename": "transpose.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "transpose",
        "description": "Transposes a array of arrays using the Matrix.map function",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "idx"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "transpose",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                199,
                292
            ],
            "filename": "transpose.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002918",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/Volumes/BigOne/github/funMatrix/src/matrix.js",
            "/Volumes/BigOne/github/funMatrix/src/util/addMatrix.js",
            "/Volumes/BigOne/github/funMatrix/src/util/addScalar.js",
            "/Volumes/BigOne/github/funMatrix/src/util/concat.js",
            "/Volumes/BigOne/github/funMatrix/src/util/dot.js",
            "/Volumes/BigOne/github/funMatrix/src/util/empty.js",
            "/Volumes/BigOne/github/funMatrix/src/util/generate.js",
            "/Volumes/BigOne/github/funMatrix/src/util/identity.js",
            "/Volumes/BigOne/github/funMatrix/src/util/round.js",
            "/Volumes/BigOne/github/funMatrix/src/util/solve.js",
            "/Volumes/BigOne/github/funMatrix/src/util/transpose.js"
        ]
    }
]
