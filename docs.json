[
    {
        "comment": "/**\n * @class Matrix\n * @classdesc Matrix applicative providing standard matrix operations\n * @summary The Matrix class should not be instantiated with the new keyword. Instead use the Matrix.of syntax to create a new Matrix. Unfortunatly jsdocs does not allow for the constructor to be hidden.\n * @hidecontructor\n * @see of\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 12,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "kind": "class",
        "name": "Matrix",
        "classdesc": "Matrix applicative providing standard matrix operations",
        "summary": "The Matrix class should not be instantiated with the new keyword. Instead use the Matrix.of syntax to create a new Matrix. Unfortunatly jsdocs does not allow for the constructor to be hidden.",
        "tags": [
            {
                "originalTitle": "hidecontructor",
                "title": "hidecontructor",
                "text": ""
            }
        ],
        "see": [
            "of"
        ],
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])"
        ],
        "longname": "Matrix",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                757,
                805
            ],
            "filename": "matrix.js",
            "lineno": 23,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000043",
                "name": "Matrix",
                "type": "FunctionExpression"
            },
            "vars": {
                "this.__value": null
            }
        },
        "undocumented": true,
        "name": "Matrix",
        "longname": "Matrix",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                785,
                803
            ],
            "filename": "matrix.js",
            "lineno": 24,
            "columnno": 2,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000049",
                "name": "this.__value",
                "type": "Identifier",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value",
        "longname": "__value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.of\n * @desc Creates a Matrix object and flattens the Matrix\n * @param val {Array|function} An array of arrays\n * @returns {Matrix}\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 27,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "of",
        "description": "Creates a Matrix object and flattens the Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Array",
                        "function"
                    ]
                },
                "description": "An array of arrays",
                "name": "val"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])"
        ],
        "longname": "Matrix.of"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1060,
                1230
            ],
            "filename": "matrix.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000055",
                "name": "Matrix.of",
                "type": "FunctionExpression",
                "paramnames": [
                    "val"
                ]
            },
            "vars": {
                "this.__value": "Matrix.of#__value"
            }
        },
        "undocumented": true,
        "name": "of",
        "longname": "Matrix.of",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1165,
                1183
            ],
            "filename": "matrix.js",
            "lineno": 42,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000074",
                "name": "this.__value",
                "type": "Identifier",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value",
        "longname": "Matrix.of#__value",
        "kind": "member",
        "memberof": "Matrix.of",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @property {String} type\n * @type {String}\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n * m.type === 'Matrix'\n */",
        "meta": {
            "range": [
                1388,
                1420
            ],
            "filename": "matrix.js",
            "lineno": 57,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000086",
                "name": "Matrix.prototype.type",
                "type": "Literal",
                "value": "Matrix",
                "paramnames": []
            }
        },
        "memberof": "Matrix",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "name": "type"
            }
        ],
        "type": {
            "names": [
                "String"
            ]
        },
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])\nm.type === 'Matrix'"
        ],
        "name": "type",
        "longname": "Matrix#type",
        "kind": "member",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @property {Number} precision\n * @type {Number}\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n * m.precision === 4\n */",
        "meta": {
            "range": [
                1581,
                1611
            ],
            "filename": "matrix.js",
            "lineno": 68,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000094",
                "name": "Matrix.prototype.precision",
                "type": "Literal",
                "value": 4,
                "paramnames": []
            }
        },
        "memberof": "Matrix",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "precision"
            }
        ],
        "type": {
            "names": [
                "Number"
            ]
        },
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])\nm.precision === 4"
        ],
        "name": "precision",
        "longname": "Matrix#precision",
        "kind": "member",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#setPrecision\n * @param precision {Number} Set the number of decimals for rounding\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n * m.setPrecision(10)\n * m.precision === 10\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 70,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "setPrecision",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Set the number of decimals for rounding",
                "name": "precision"
            }
        ],
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])\nm.setPrecision(10)\nm.precision === 10"
        ],
        "longname": "Matrix#setPrecision",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1847,
                1932
            ],
            "filename": "matrix.js",
            "lineno": 80,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000102",
                "name": "Matrix.prototype.setPrecision",
                "type": "FunctionExpression",
                "paramnames": [
                    "precision"
                ]
            },
            "vars": {
                "this.precision": "Matrix#setPrecision#precision"
            }
        },
        "undocumented": true,
        "name": "setPrecision",
        "longname": "Matrix#setPrecision",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1904,
                1930
            ],
            "filename": "matrix.js",
            "lineno": 81,
            "columnno": 2,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000112",
                "name": "this.precision",
                "type": "Identifier",
                "value": "precision",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "precision",
        "longname": "Matrix#setPrecision#precision",
        "kind": "member",
        "memberof": "Matrix#setPrecision",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @member isSymmetric\n * @returns {Boolean}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * true === A.isSymmetric()\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 84,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "member",
        "name": "isSymmetric",
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\ntrue === A.isSymmetric()"
        ],
        "scope": "static",
        "longname": "Matrix.isSymmetric"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2094,
                2230
            ],
            "filename": "matrix.js",
            "lineno": 94,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000118",
                "name": "Matrix.prototype.isSymmetric",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "a": "Matrix#isSymmetric~a",
                "b": "Matrix#isSymmetric~b"
            }
        },
        "undocumented": true,
        "name": "isSymmetric",
        "longname": "Matrix#isSymmetric",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2147,
                2163
            ],
            "filename": "matrix.js",
            "lineno": 95,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000127",
                "name": "a",
                "type": "MemberExpression",
                "value": "this.__value"
            }
        },
        "undocumented": true,
        "name": "a",
        "longname": "Matrix#isSymmetric~a",
        "kind": "constant",
        "memberof": "Matrix#isSymmetric",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2172,
                2206
            ],
            "filename": "matrix.js",
            "lineno": 96,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000133",
                "name": "b",
                "type": "MemberExpression",
                "value": ".__value"
            }
        },
        "undocumented": true,
        "name": "b",
        "longname": "Matrix#isSymmetric~b",
        "kind": "constant",
        "memberof": "Matrix#isSymmetric",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#isSquare\n * @desc Boolean indicating whether this contains a square Matrix\n * @returns {Boolean}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * true === A.isSquare()\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 100,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "isSquare",
        "description": "Boolean indicating whether this contains a square Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\ntrue === A.isSquare()"
        ],
        "longname": "Matrix#isSquare",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2462,
                2553
            ],
            "filename": "matrix.js",
            "lineno": 112,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000148",
                "name": "Matrix.prototype.isSquare",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "isSquare",
        "longname": "Matrix#isSquare",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#isOrthogonal\n * @param M {Matrix|Array}\n * @returns {Boolean}\n * @example\n *\n * const result = [[-0.3092, -0.9510], [-0.9510, 0.3092]]\n * const A = Matrix.fromArray(result)\n * true  === A.isOrthogonal()\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 116,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "isOrthogonal",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "const result = [[-0.3092, -0.9510], [-0.9510, 0.3092]]\nconst A = Matrix.fromArray(result)\ntrue  === A.isOrthogonal()"
        ],
        "longname": "Matrix#isOrthogonal",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2807,
                2949
            ],
            "filename": "matrix.js",
            "lineno": 128,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000168",
                "name": "Matrix.prototype.isOrthogonal",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "AxAt": "Matrix#isOrthogonal~AxAt",
                "I": "Matrix#isOrthogonal~I"
            }
        },
        "undocumented": true,
        "name": "isOrthogonal",
        "longname": "Matrix#isOrthogonal",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2861,
                2894
            ],
            "filename": "matrix.js",
            "lineno": 129,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000177",
                "name": "AxAt",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "AxAt",
        "longname": "Matrix#isOrthogonal~AxAt",
        "kind": "constant",
        "memberof": "Matrix#isOrthogonal",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2903,
                2922
            ],
            "filename": "matrix.js",
            "lineno": 130,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000188",
                "name": "I",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "I",
        "longname": "Matrix#isOrthogonal~I",
        "kind": "constant",
        "memberof": "Matrix#isOrthogonal",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#getCols\n * @returns {Number}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * A.getCols()  === 2\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 134,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "getCols",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\nA.getCols()  === 2"
        ],
        "longname": "Matrix#getCols",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3110,
                3184
            ],
            "filename": "matrix.js",
            "lineno": 145,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000200",
                "name": "Matrix.prototype.getCols",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getCols",
        "longname": "Matrix#getCols",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#equals\n * @param M {Matrix|Array}\n * @returns {Boolean}\n * @example\n *\n * var a = [[1, 1], [1, 1]]\n * var A = Matrix.of(a)\n * var B = Matrix.of(a)\n * true  === A.equals(B)\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 149,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "equals",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "var a = [[1, 1], [1, 1]]\nvar A = Matrix.of(a)\nvar B = Matrix.of(a)\ntrue  === A.equals(B)"
        ],
        "longname": "Matrix#equals",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3407,
                3495
            ],
            "filename": "matrix.js",
            "lineno": 162,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000217",
                "name": "Matrix.prototype.equals",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "equals",
        "longname": "Matrix#equals",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#getRows\n * @returns {Number}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * A.getRows()  // 2\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 166,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "getRows",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\nA.getRows()  // 2"
        ],
        "longname": "Matrix#getRows",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3652,
                3723
            ],
            "filename": "matrix.js",
            "lineno": 176,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000238",
                "name": "Matrix.prototype.getRows",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getRows",
        "longname": "Matrix#getRows",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#getShape\n * @returns {Array}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * A.getShape()  // [2, 2]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 180,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "getShape",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\nA.getShape()  // [2, 2]"
        ],
        "longname": "Matrix#getShape",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3886,
                3971
            ],
            "filename": "matrix.js",
            "lineno": 190,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000253",
                "name": "Matrix.prototype.getShape",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getShape",
        "longname": "Matrix#getShape",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#map\n * @description Maps over the rows of the matrix using a map function\n * @param f {function} An iterator function\n * @returns {Matrix}\n * @example\n *\n * const m = Matrix.of([[1, 1], [1, 1]])\n * m.map(x => x.map(y => y+ 1))\n * // [[2, 2], [2, 2]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 194,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "map",
        "description": "Maps over the rows of the matrix using a map function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "An iterator function",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const m = Matrix.of([[1, 1], [1, 1]])\nm.map(x => x.map(y => y+ 1))\n// [[2, 2], [2, 2]]"
        ],
        "longname": "Matrix#map",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4275,
                4355
            ],
            "filename": "matrix.js",
            "lineno": 208,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000272",
                "name": "Matrix.prototype.map",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "Matrix#map",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.map\n * @description Static function that maps over the rows of the matrix using a map function\n * @param f {function} An iterator function\n * @param M {Matrix|Array} Matrix or array to map\n * @returns {Matrix}\n * @example\n *\n * const m = Matrix.map(x= > x.map(y => y+ 1), [[1, 1], [1, 1]])\n * // [[2, 2], [2, 2]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 212,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "map",
        "description": "Static function that maps over the rows of the matrix using a map function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "An iterator function",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix or array to map",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const m = Matrix.map(x= > x.map(y => y+ 1), [[1, 1], [1, 1]])\n// [[2, 2], [2, 2]]"
        ],
        "longname": "Matrix.map"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4732,
                4800
            ],
            "filename": "matrix.js",
            "lineno": 226,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000294",
                "name": "Matrix.map",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "Matrix.map",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#fold\n * @description Reduce the matrix rows using a reduce function\n * @param f {function} A reduce/fold function\n * @returns {Matrix}\n * @example\n *\n * // Flatten Matrix\n * Matrix.of([[1, 1], [1, 1]]).fold((prev, next) => prev.concat(next))\n * // [1, 1, 1, 1]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 230,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "fold",
        "description": "Reduce the matrix rows using a reduce function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A reduce/fold function",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "// Flatten Matrix\nMatrix.of([[1, 1], [1, 1]]).fold((prev, next) => prev.concat(next))\n// [1, 1, 1, 1]"
        ],
        "longname": "Matrix#fold",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5112,
                5198
            ],
            "filename": "matrix.js",
            "lineno": 243,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000315",
                "name": "Matrix.prototype.fold",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            }
        },
        "undocumented": true,
        "name": "fold",
        "longname": "Matrix#fold",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.fold\n * @description Static function to reduce the matrix rows using a reduce function\n * @param f {function} A reduce/fold function\n * @param M {Matrix} The Matrix to reduce\n * @returns {Matrix}\n * @example\n\n * // Sum of all matrix values\n * const reducer = (prev, next) => Number(prev) + next.reduce((acc, x) => acc + x, 0)\n * const A = Matrix.of([[1, 1], [1, 1]]\n * Matrix.fold(reducer, A)\n * // 4\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 247,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "fold",
        "description": "Static function to reduce the matrix rows using a reduce function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A reduce/fold function",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The Matrix to reduce",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "// Sum of all matrix values\nconst reducer = (prev, next) => Number(prev) + next.reduce((acc, x) => acc + x, 0)\nconst A = Matrix.of([[1, 1], [1, 1]]\nMatrix.fold(reducer, A)\n// 4"
        ],
        "longname": "Matrix.fold"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5660,
                5730
            ],
            "filename": "matrix.js",
            "lineno": 263,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000338",
                "name": "Matrix.fold",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "fold",
        "longname": "Matrix.fold",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#ap\n * @description Applies a Matrix to a function\n * @param M {Matrix}\n * @returns {Matrix}\n * @example\n *\n * const f = x => x.reduce((prev, next) => prev + next)\n * const A = Matrix.of([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n * Matrix.of(f).ap(M)\n * // [[6], [15], [24]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 267,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "ap",
        "description": "Applies a Matrix to a function",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const f = x => x.reduce((prev, next) => prev + next)\nconst A = Matrix.of([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nMatrix.of(f).ap(M)\n// [[6], [15], [24]"
        ],
        "longname": "Matrix#ap",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6047,
                6125
            ],
            "filename": "matrix.js",
            "lineno": 281,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000359",
                "name": "Matrix.prototype.ap",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "ap",
        "longname": "Matrix#ap",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.ap\n * @description Applies a Matrix to a function\n * @param f {function}\n * @param M {Matrix|Array}\n * @returns {Matrix}\n * @example\n *\n * const f = x => x.reduce((prev, next) => prev + next)\n * Matrix.ap(f, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n * // [[6], [15], [24]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 285,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "ap",
        "description": "Applies a Matrix to a function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const f = x => x.reduce((prev, next) => prev + next)\nMatrix.ap(f, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n// [[6], [15], [24]"
        ],
        "longname": "Matrix.ap"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6452,
                6518
            ],
            "filename": "matrix.js",
            "lineno": 299,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000381",
                "name": "Matrix.ap",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ap",
        "longname": "Matrix.ap",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#concat\n * @description Concatenates 2 Matrices using a function as operator\n * @param M {Matrix}\n * @returns {Matrix}\n * @example\n *\n * const a = [[0, 1, 1], [2, 3, 4]]\n * const b = [[2, 2, 2], [3, 3, 3]]\n * const A = Matrix.of(a)\n * const B = Matrix.of(b)\n * const M = A.concat(B)\n * // [[0, 1, 1, 2, 2, 2], [2, 3, 4, 3, 3, 3]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 303,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "concat",
        "description": "Concatenates 2 Matrices using a function as operator",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[0, 1, 1], [2, 3, 4]]\nconst b = [[2, 2, 2], [3, 3, 3]]\nconst A = Matrix.of(a)\nconst B = Matrix.of(b)\nconst M = A.concat(B)\n// [[0, 1, 1, 2, 2, 2], [2, 3, 4, 3, 3, 3]]"
        ],
        "longname": "Matrix#concat",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6901,
                6990
            ],
            "filename": "matrix.js",
            "lineno": 320,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000402",
                "name": "Matrix.prototype.concat",
                "type": "FunctionExpression",
                "paramnames": [
                    "M",
                    "f"
                ]
            }
        },
        "undocumented": true,
        "name": "concat",
        "longname": "Matrix#concat",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.concat\n * @description Concatenates 2 Matrices using a function as operator\n * @param A {Matrix}\n * @param B {Matrix}\n * @returns {Matrix}\n * @example\n *\n * const a = [[0, 1, 1], [2, 3, 4]]\n * const b = [[2, 2, 2], [3, 3, 3]]\n * const A = Matrix.of(a)\n * const B = Matrix.of(b)\n * const M = Matrix.concat(A, B)\n * // [[0, 1, 1, 2, 2, 2], [2, 3, 4, 3, 3, 3]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 324,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "concat",
        "description": "Concatenates 2 Matrices using a function as operator",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "A"
            },
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "B"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[0, 1, 1], [2, 3, 4]]\nconst b = [[2, 2, 2], [3, 3, 3]]\nconst A = Matrix.of(a)\nconst B = Matrix.of(b)\nconst M = Matrix.concat(A, B)\n// [[0, 1, 1, 2, 2, 2], [2, 3, 4, 3, 3, 3]]"
        ],
        "longname": "Matrix.concat"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7412,
                7498
            ],
            "filename": "matrix.js",
            "lineno": 342,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000427",
                "name": "Matrix.concat",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "concat",
        "longname": "Matrix.concat",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#empty\n * @description Return an empty Matrix from an existing Matrix\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 346,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "empty",
        "description": "Return an empty Matrix from an existing Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#empty",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7639,
                7715
            ],
            "filename": "matrix.js",
            "lineno": 353,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000453",
                "name": "Matrix.prototype.empty",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "empty",
        "longname": "Matrix#empty",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.empty\n * @description Return an empty Matrix from an existing Matrix\n * @param rows {Number}\n * @param cols {Number}\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 357,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "empty",
        "description": "Return an empty Matrix from an existing Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.empty"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7914,
                8110
            ],
            "filename": "matrix.js",
            "lineno": 366,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000472",
                "name": "Matrix.empty",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "empty",
        "longname": "Matrix.empty",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7975,
                7999
            ],
            "filename": "matrix.js",
            "lineno": 367,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000487",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "<anonymous>~m",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#identity\n * @desc Returns an identity matrix\n * @returns {Matrix}\n * @example\n *\n * const a = [[1, 2, 3], [4, 5, 6]]\n * const A = Matrix.of(a)\n * const Aidentity = A.identity()\n * // [[1, 0, 0], [0, 1, 0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 373,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "identity",
        "description": "Returns an identity matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[1, 2, 3], [4, 5, 6]]\nconst A = Matrix.of(a)\nconst Aidentity = A.identity()\n// [[1, 0, 0], [0, 1, 0]]"
        ],
        "longname": "Matrix#identity",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8392,
                8473
            ],
            "filename": "matrix.js",
            "lineno": 387,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000504",
                "name": "Matrix.prototype.identity",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "identity",
        "longname": "Matrix#identity",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.identity\n * @desc Returns an identity matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.identity(3, 2)\n * // [[1, 0, 0], [0, 1, 0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 391,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "identity",
        "description": "Returns an identity matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.identity(3, 2)\n// [[1, 0, 0], [0, 1, 0]]"
        ],
        "longname": "Matrix.identity"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8682,
                8868
            ],
            "filename": "matrix.js",
            "lineno": 403,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000523",
                "name": "Matrix.identity",
                "type": "FunctionExpression",
                "paramnames": [
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "m": "Matrix.identity~m"
            }
        },
        "undocumented": true,
        "name": "identity",
        "longname": "Matrix.identity",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8732,
                8756
            ],
            "filename": "matrix.js",
            "lineno": 404,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000532",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix.identity~m",
        "kind": "constant",
        "memberof": "Matrix.identity",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#combine\n * @see Matrix.concat\n * @param M\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 408,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "combine",
        "see": [
            "Matrix.concat"
        ],
        "params": [
            {
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#combine",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8982,
                9079
            ],
            "filename": "matrix.js",
            "lineno": 416,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000549",
                "name": "Matrix.prototype.combine",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "combine",
        "longname": "Matrix#combine",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.combine\n * @see Matrix.concat\n * @param M\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 420,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "combine",
        "see": [
            "Matrix.concat"
        ],
        "params": [
            {
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.combine"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9203,
                9290
            ],
            "filename": "matrix.js",
            "lineno": 428,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000574",
                "name": "Matrix.combine",
                "type": "FunctionExpression",
                "paramnames": [
                    "A",
                    "B"
                ]
            }
        },
        "undocumented": true,
        "name": "combine",
        "longname": "Matrix.combine",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#dot\n * @description Returns the dot product between 2 matrices\n * @param M\n * @param f\n * @returns {Matrix}\n * @example\n *\n * // Create matrix\n * const m = Matrix.of([[1, 2], [3, 4]])\n *\n * // Generate identity matrix\n * const I  = m.identity() // [[1, 0], [0, 1]]\n *\n * if(m.dot(I).equals(m)) {\n *    console.log('Dot product with identity matrix returns the same matrix')\n * }\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 432,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "dot",
        "description": "Returns the dot product between 2 matrices",
        "params": [
            {
                "name": "M"
            },
            {
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "// Create matrix\nconst m = Matrix.of([[1, 2], [3, 4]])\n\n// Generate identity matrix\nconst I  = m.identity() // [[1, 0], [0, 1]]\n\nif(m.dot(I).equals(m)) {\n   console.log('Dot product with identity matrix returns the same matrix')\n}"
        ],
        "longname": "Matrix#dot",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9723,
                9829
            ],
            "filename": "matrix.js",
            "lineno": 453,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000598",
                "name": "Matrix.prototype.dot",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "dot",
        "longname": "Matrix#dot",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.dot\n * @description Returns the dot product between 2 matrices\n * @param M\n * @returns {Matrix}\n * @example\n * const a = [[1, 2, 3], [4, 5, 6]]\n * const b = [[7, 8], [9, 10], [11, 12]]\n *\n * const A = Matrix.of(a)\n * const B = Matrix.of(b)\n *\n * Matrix.dot(A, B) // [[58, 64], [139, 154]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 457,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "dot",
        "description": "Returns the dot product between 2 matrices",
        "params": [
            {
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[1, 2, 3], [4, 5, 6]]\nconst b = [[7, 8], [9, 10], [11, 12]]\n\nconst A = Matrix.of(a)\nconst B = Matrix.of(b)\n\nMatrix.dot(A, B) // [[58, 64], [139, 154]]"
        ],
        "longname": "Matrix.dot"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10182,
                10254
            ],
            "filename": "matrix.js",
            "lineno": 474,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000627",
                "name": "Matrix.dot",
                "type": "FunctionExpression",
                "paramnames": [
                    "A",
                    "B"
                ]
            }
        },
        "undocumented": true,
        "name": "dot",
        "longname": "Matrix.dot",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#fill\n * @desc Fill up an empty matrix with the provided map function\n * @param f\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).fill(x => 42)\n * // [[42,42,42], [42,42,42], [42,42,42]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 478,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "fill",
        "description": "Fill up an empty matrix with the provided map function",
        "params": [
            {
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).fill(x => 42)\n// [[42,42,42], [42,42,42], [42,42,42]]"
        ],
        "longname": "Matrix#fill",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10534,
                10619
            ],
            "filename": "matrix.js",
            "lineno": 491,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000650",
                "name": "Matrix.prototype.fill",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "fill",
        "longname": "Matrix#fill",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#zeros\n * @desc Fill up an empty matrix with zeros\n * @returns {Matrix}\n *\n * @example\n *\n * const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).zeros()\n * // [[0,0,0], [0,0,0], [0,0,0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 495,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "zeros",
        "description": "Fill up an empty matrix with zeros",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).zeros()\n// [[0,0,0], [0,0,0], [0,0,0]]"
        ],
        "longname": "Matrix#zeros",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10856,
                10934
            ],
            "filename": "matrix.js",
            "lineno": 508,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000676",
                "name": "Matrix.prototype.zeros",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "zeros",
        "longname": "Matrix#zeros",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.zeros\n * @desc Fill up an empty matrix with zeros\n * @param rows {Number} Defines the rows of the matrix\n * @param cols {Number} Defines the columns of the matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.zeros(3, 3)\n * // [[0,0,0], [0,0,0], [0,0,0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 512,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "zeros",
        "description": "Fill up an empty matrix with zeros",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the rows of the matrix",
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the columns of the matrix",
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.zeros(3, 3)\n// [[0,0,0], [0,0,0], [0,0,0]]"
        ],
        "longname": "Matrix.zeros",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11252,
                11360
            ],
            "filename": "matrix.js",
            "lineno": 525,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000697",
                "name": "Matrix.zeros",
                "type": "FunctionExpression",
                "paramnames": [
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "m": "Matrix.zeros~m",
                "": null
            }
        },
        "undocumented": true,
        "name": "zeros",
        "longname": "Matrix.zeros",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11299,
                11323
            ],
            "filename": "matrix.js",
            "lineno": 526,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000706",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix.zeros~m",
        "kind": "constant",
        "memberof": "Matrix.zeros",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#ones\n * @desc Fill up an empty matrix with ones\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).ones()\n * // [[1,1,1], [1,1,1], [1,1,1]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 530,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "ones",
        "description": "Fill up an empty matrix with ones",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).ones()\n// [[1,1,1], [1,1,1], [1,1,1]]"
        ],
        "longname": "Matrix#ones",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11591,
                11668
            ],
            "filename": "matrix.js",
            "lineno": 542,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000725",
                "name": "Matrix.prototype.ones",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "ones",
        "longname": "Matrix#ones",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.ones\n * @desc Fill up an empty matrix with ones\n * @param rows {Number} Defines the rows of the matrix\n * @param cols {Number} Defines the columns of the matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.ones(1, 1)\n * // [[1,1,1], [1,1,1], [1,1,1]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 546,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "ones",
        "description": "Fill up an empty matrix with ones",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the rows of the matrix",
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the columns of the matrix",
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.ones(1, 1)\n// [[1,1,1], [1,1,1], [1,1,1]]"
        ],
        "longname": "Matrix.ones",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11983,
                12090
            ],
            "filename": "matrix.js",
            "lineno": 559,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000746",
                "name": "Matrix.ones",
                "type": "FunctionExpression",
                "paramnames": [
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "m": "Matrix.ones~m",
                "": null
            }
        },
        "undocumented": true,
        "name": "ones",
        "longname": "Matrix.ones",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12029,
                12053
            ],
            "filename": "matrix.js",
            "lineno": 560,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000755",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix.ones~m",
        "kind": "constant",
        "memberof": "Matrix.ones",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#random\n * @desc Fill up an empty matrix with random values\n * @param {function} [f = e => Math.random() * 2 - 1]\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 564,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "random",
        "description": "Fill up an empty matrix with random values",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "defaultvalue": "e => Math.random() * 2 - 1",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#random",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12275,
                12379
            ],
            "filename": "matrix.js",
            "lineno": 572,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000774",
                "name": "Matrix.prototype.random",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "random",
        "longname": "Matrix#random",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.random\n * @desc Fill up an empty matrix with random numbers\n * @param f {function} Function which returns random values. Default random values are between -1 and 1\n * @param rows {Number} Defines the rows of the matrix\n * @param cols {Number} Defines the columns of the matrix\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 576,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "random",
        "description": "Fill up an empty matrix with random numbers",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function which returns random values. Default random values are between -1 and 1",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the rows of the matrix",
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the columns of the matrix",
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.random",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12727,
                12865
            ],
            "filename": "matrix.js",
            "lineno": 585,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000805",
                "name": "Matrix.random",
                "type": "FunctionExpression",
                "paramnames": [
                    "f",
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "": null,
                "m": "Matrix.random~m"
            }
        },
        "undocumented": true,
        "name": "random",
        "longname": "Matrix.random",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12809,
                12833
            ],
            "filename": "matrix.js",
            "lineno": 586,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000826",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix.random~m",
        "kind": "constant",
        "memberof": "Matrix.random",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#toArray\n * @desc Returns the array from the matrix\n * @returns {Array}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 590,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "toArray",
        "description": "Returns the array from the matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "Matrix#toArray",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12987,
                13083
            ],
            "filename": "matrix.js",
            "lineno": 597,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000843",
                "name": "Matrix.prototype.toArray",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toArray",
        "longname": "Matrix#toArray",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#clone\n * @desc Returns a clone of the matrix\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 601,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "clone",
        "description": "Returns a clone of the matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#clone",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13200,
                13280
            ],
            "filename": "matrix.js",
            "lineno": 608,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000868",
                "name": "Matrix.prototype.clone",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "clone",
        "longname": "Matrix#clone",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#fromArray\n * @desc Returns a Matrix from an array\n * @returns {Array}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 612,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "fromArray",
        "description": "Returns a Matrix from an array",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "Matrix#fromArray",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13401,
                13496
            ],
            "filename": "matrix.js",
            "lineno": 619,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000885",
                "name": "Matrix.fromArray",
                "type": "FunctionExpression",
                "paramnames": [
                    "arr"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "fromArray",
        "longname": "Matrix.fromArray",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#transpose\n * @desc Returns a transposed Matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([-1, 2], [3, 4], [-8, 2])\n * const b = A.transpose().toArray()\n * // returns [[-1, 3,-8], [2, 4, 2]]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 623,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "transpose",
        "description": "Returns a transposed Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([-1, 2], [3, 4], [-8, 2])\nconst b = A.transpose().toArray()\n// returns [[-1, 3,-8], [2, 4, 2]]"
        ],
        "longname": "Matrix#transpose",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13754,
                13852
            ],
            "filename": "matrix.js",
            "lineno": 635,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000911",
                "name": "Matrix.prototype.transpose",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "transpose",
        "longname": "Matrix#transpose",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.transpose\n * @desc Returns a transposed Matrix\n * @param M {Matrix|Array} A Matrix or a matrix array\n * @returns {Matrix}\n * @example\n *\n * const a = [-1, 2], [3, 4], [-8, 2]\n * const b = Matrix.transpose(a).toArray()\n * // returns [[-1, 3,-8], [2, 4, 2]]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 639,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "transpose",
        "description": "Returns a transposed Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "A Matrix or a matrix array",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [-1, 2], [3, 4], [-8, 2]\nconst b = Matrix.transpose(a).toArray()\n// returns [[-1, 3,-8], [2, 4, 2]]"
        ],
        "longname": "Matrix.transpose",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14158,
                14227
            ],
            "filename": "matrix.js",
            "lineno": 651,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000932",
                "name": "Matrix.transpose",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "transpose",
        "longname": "Matrix.transpose",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#add\n * @param M {Matrix|number} Add a Matrix or a number\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.add(1) // [[6, 5]]\n * const B = Matrix.of([[5, 5]])\n * B.add(B) // [[10, 10]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 655,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "add",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "number"
                    ]
                },
                "description": "Add a Matrix or a number",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.add(1) // [[6, 5]]\nconst B = Matrix.of([[5, 5]])\nB.add(B) // [[10, 10]]"
        ],
        "longname": "Matrix#add",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14489,
                14835
            ],
            "filename": "matrix.js",
            "lineno": 668,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000949",
                "name": "Matrix.prototype.add",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "add",
        "longname": "Matrix#add",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#subtract\n * @param M {Matrix|number} Subtract a Matrix or a number\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.subtract(1) // [[4, 2]]\n * const B = Matrix.of([[5, 5]])\n * B.subtract(B) // [[0, 0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 679,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "subtract",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "number"
                    ]
                },
                "description": "Subtract a Matrix or a number",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.subtract(1) // [[4, 2]]\nconst B = Matrix.of([[5, 5]])\nB.subtract(B) // [[0, 0]]"
        ],
        "longname": "Matrix#subtract",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15115,
                15471
            ],
            "filename": "matrix.js",
            "lineno": 692,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001026",
                "name": "Matrix.prototype.subtract",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "subtract",
        "longname": "Matrix#subtract",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#multiply\n * @desc Mutliply a scalar or a mtraix with a matrix. Throws an error if the multiplication is not possible.\n * @param M {Matrix|number}\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.multiply(2) // [[10, 8]]\n * const B = Matrix.of([[5, 5]])\n * B.multiply(B) // [[25, 25]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 703,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "multiply",
        "description": "Mutliply a scalar or a mtraix with a matrix. Throws an error if the multiplication is not possible.",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "number"
                    ]
                },
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.multiply(2) // [[10, 8]]\nconst B = Matrix.of([[5, 5]])\nB.multiply(B) // [[25, 25]]"
        ],
        "longname": "Matrix#multiply",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15833,
                16279
            ],
            "filename": "matrix.js",
            "lineno": 717,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001103",
                "name": "Matrix.prototype.multiply",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "multiply",
        "longname": "Matrix#multiply",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#additiveinverse\n * @desc Function that returns the matrix obtained by changing the sign of every matrix element. The additive inverse of matrix A is written –A.\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5,-5], [-4, 4]])\n * const minusA = A.additiveinverse()\n * // [[-5, 5], [4, -4]]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 729,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "additiveinverse",
        "description": "Function that returns the matrix obtained by changing the sign of every matrix element. The additive inverse of matrix A is written –A.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5,-5], [-4, 4]])\nconst minusA = A.additiveinverse()\n// [[-5, 5], [4, -4]]"
        ],
        "longname": "Matrix#additiveinverse",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16631,
                16719
            ],
            "filename": "matrix.js",
            "lineno": 740,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001186",
                "name": "Matrix.prototype.additiveinverse",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "additiveinverse",
        "longname": "Matrix#additiveinverse",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#hadamard\n\n * @see multiply\n * @param M\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.hadamard(2) // [[10, 8]]\n * const B = Matrix.of([[5, 5]])\n * B.hadamard(B) // [[25, 25]]\n\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 744,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "hadamard",
        "see": [
            "multiply"
        ],
        "params": [
            {
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.hadamard(2) // [[10, 8]]\nconst B = Matrix.of([[5, 5]])\nB.hadamard(B) // [[25, 25]]"
        ],
        "longname": "Matrix#hadamard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16972,
                17053
            ],
            "filename": "matrix.js",
            "lineno": 759,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001206",
                "name": "Matrix.prototype.hadamard",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "hadamard",
        "longname": "Matrix#hadamard",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#lu\n * @desc Calculates LU decomposition of the current Matrix\n * @returns {Matrix[]}\n * @example\n *\n * const result = [[3, -7, -2, 2], [-3, 5, 1, 0], [6, -4, 0, -5], [-9, 5, -5, 12]]\n * const A = Matrix.fromArray(result)\n * const lu = A.lu()\n * // L.__value = [ [ 1, 0, 0, 0 ], [ -1, 1, 0, 0 ], [ 2, -5, 1, 0 ], [ -3, 8, 3, 1 ] ]\n * // U.__value =  [ [ 3, -7, -2, 2 ], [ 0, -2, -1, 2 ], [ 0, 0, -1, 1 ], [ 0, 0, 0, -1 ] ]\n * Matrix.dot(lu[0], lu[1]) // returns clone of A\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 763,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "lu",
        "description": "Calculates LU decomposition of the current Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Matrix>"
                    ]
                }
            }
        ],
        "examples": [
            "const result = [[3, -7, -2, 2], [-3, 5, 1, 0], [6, -4, 0, -5], [-9, 5, -5, 12]]\nconst A = Matrix.fromArray(result)\nconst lu = A.lu()\n// L.__value = [ [ 1, 0, 0, 0 ], [ -1, 1, 0, 0 ], [ 2, -5, 1, 0 ], [ -3, 8, 3, 1 ] ]\n// U.__value =  [ [ 3, -7, -2, 2 ], [ 0, -2, -1, 2 ], [ 0, 0, -1, 1 ], [ 0, 0, 0, -1 ] ]\nMatrix.dot(lu[0], lu[1]) // returns clone of A"
        ],
        "longname": "Matrix#lu",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17579,
                18216
            ],
            "filename": "matrix.js",
            "lineno": 779,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001226",
                "name": "Matrix.prototype.lu",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "n": "Matrix#lu~n",
                "tol": "Matrix#lu~tol",
                "A": "Matrix#lu~A",
                "L": "Matrix#lu~L",
                "U": "Matrix#lu~U",
                "k": "Matrix#lu~k",
                "L.__value[undefined][undefined]": "Matrix#lu~L.__value[undefined][undefined]",
                "i": "Matrix#lu~i",
                "j": "Matrix#lu~j",
                "A.__value[undefined][undefined]": "Matrix#lu~A.__value[undefined][undefined]",
                "l": "Matrix#lu~l",
                "U.__value[undefined][undefined]": "Matrix#lu~U.__value[undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "lu",
        "longname": "Matrix#lu",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17623,
                17641
            ],
            "filename": "matrix.js",
            "lineno": 780,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001235",
                "name": "n",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "Matrix#lu~n",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17650,
                17660
            ],
            "filename": "matrix.js",
            "lineno": 781,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001242",
                "name": "tol",
                "type": "Literal",
                "value": 0.000001
            }
        },
        "undocumented": true,
        "name": "tol",
        "longname": "Matrix#lu~tol",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17669,
                17685
            ],
            "filename": "matrix.js",
            "lineno": 782,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001246",
                "name": "A",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "A",
        "longname": "Matrix#lu~A",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17694,
                17710
            ],
            "filename": "matrix.js",
            "lineno": 783,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001253",
                "name": "L",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "L",
        "longname": "Matrix#lu~L",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17719,
                17735
            ],
            "filename": "matrix.js",
            "lineno": 784,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001260",
                "name": "U",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "U",
        "longname": "Matrix#lu~U",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17748,
                17753
            ],
            "filename": "matrix.js",
            "lineno": 786,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001268",
                "name": "k",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "k",
        "longname": "Matrix#lu~k",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17867,
                17886
            ],
            "filename": "matrix.js",
            "lineno": 788,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001296",
                "name": "L.__value[undefined][undefined]",
                "type": "Literal",
                "funcscope": "Matrix#lu",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~L.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~L",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17900,
                17909
            ],
            "filename": "matrix.js",
            "lineno": 789,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001307",
                "name": "i",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#lu~i",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17931,
                17982
            ],
            "filename": "matrix.js",
            "lineno": 790,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001319",
                "name": "L.__value[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#lu",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~L.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~L",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17998,
                18007
            ],
            "filename": "matrix.js",
            "lineno": 791,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001344",
                "name": "j",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#lu~j",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18031,
                18100
            ],
            "filename": "matrix.js",
            "lineno": 792,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001356",
                "name": "A.__value[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#lu",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~A.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~A",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18128,
                18133
            ],
            "filename": "matrix.js",
            "lineno": 795,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001389",
                "name": "l",
                "type": "Identifier",
                "value": "k"
            }
        },
        "undocumented": true,
        "name": "l",
        "longname": "Matrix#lu~l",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18155,
                18188
            ],
            "filename": "matrix.js",
            "lineno": 796,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001399",
                "name": "U.__value[undefined][undefined]",
                "type": "MemberExpression",
                "funcscope": "Matrix#lu",
                "value": "A.__value[undefined][undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~U.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~U",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#rref\n * @returns {Matrix|Array}\n * @example\n *\n * var A = Matrix.of([[-1, 1], [-1, 0], [0, -1], [-1, -2]])\n * A.rref() //  [ [ 1, 0 ], [ -0, 1 ], [ 0, 0 ], [ 0, 0 ] ]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 802,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "rref",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "var A = Matrix.of([[-1, 1], [-1, 0], [0, -1], [-1, -2]])\nA.rref() //  [ [ 1, 0 ], [ -0, 1 ], [ 0, 0 ], [ 0, 0 ] ]"
        ],
        "longname": "Matrix#rref",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18434,
                19420
            ],
            "filename": "matrix.js",
            "lineno": 812,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001419",
                "name": "Matrix.prototype.rref",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "lead": "Matrix#rref~lead",
                "resultMatrix": "Matrix#rref~resultMatrix",
                "r": "Matrix#rref~r",
                "i": "Matrix#rref~i",
                "tmp": "Matrix#rref~tmp",
                "resultMatrix.__value[undefined]": "Matrix#rref~resultMatrix.__value[undefined]",
                "val": "Matrix#rref~val",
                "j": "Matrix#rref~j",
                "resultMatrix.__value[undefined][undefined]": "Matrix#rref~resultMatrix.__value[undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "rref",
        "longname": "Matrix#rref",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18478,
                18486
            ],
            "filename": "matrix.js",
            "lineno": 813,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001428",
                "name": "lead",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "lead",
        "longname": "Matrix#rref~lead",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18495,
                18522
            ],
            "filename": "matrix.js",
            "lineno": 814,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001432",
                "name": "resultMatrix",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "resultMatrix",
        "longname": "Matrix#rref~resultMatrix",
        "kind": "constant",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18535,
                18540
            ],
            "filename": "matrix.js",
            "lineno": 816,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001440",
                "name": "r",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "r",
        "longname": "Matrix#rref~r",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18643,
                18648
            ],
            "filename": "matrix.js",
            "lineno": 820,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001463",
                "name": "i",
                "type": "Identifier",
                "value": "r"
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rref~i",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18751,
                18756
            ],
            "filename": "matrix.js",
            "lineno": 824,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001489",
                "name": "i",
                "type": "Identifier",
                "funcscope": "Matrix#rref",
                "value": "r",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rref~i",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18874,
                18903
            ],
            "filename": "matrix.js",
            "lineno": 832,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001506",
                "name": "tmp",
                "type": "MemberExpression",
                "value": "resultMatrix.__value[undefined]"
            }
        },
        "undocumented": true,
        "name": "tmp",
        "longname": "Matrix#rref~tmp",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18908,
                18957
            ],
            "filename": "matrix.js",
            "lineno": 833,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001514",
                "name": "resultMatrix.__value[undefined]",
                "type": "MemberExpression",
                "funcscope": "Matrix#rref",
                "value": "resultMatrix.__value[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18962,
                18991
            ],
            "filename": "matrix.js",
            "lineno": 834,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001526",
                "name": "resultMatrix.__value[undefined]",
                "type": "Identifier",
                "funcscope": "Matrix#rref",
                "value": "tmp",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19001,
                19036
            ],
            "filename": "matrix.js",
            "lineno": 836,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001534",
                "name": "val",
                "type": "MemberExpression",
                "value": "resultMatrix.__value[undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "Matrix#rref~val",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19050,
                19055
            ],
            "filename": "matrix.js",
            "lineno": 837,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001545",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#rref~j",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19090,
                19123
            ],
            "filename": "matrix.js",
            "lineno": 838,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001558",
                "name": "resultMatrix.__value[undefined][undefined]",
                "type": "Identifier",
                "funcscope": "Matrix#rref",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19144,
                19149
            ],
            "filename": "matrix.js",
            "lineno": 841,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001569",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rref~i",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19212,
                19247
            ],
            "filename": "matrix.js",
            "lineno": 843,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001587",
                "name": "val",
                "type": "MemberExpression",
                "funcscope": "Matrix#rref",
                "value": "resultMatrix.__value[undefined][undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "Matrix#rref~val",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19263,
                19268
            ],
            "filename": "matrix.js",
            "lineno": 844,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001598",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#rref~j",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19305,
                19367
            ],
            "filename": "matrix.js",
            "lineno": 845,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001611",
                "name": "resultMatrix.__value[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#rref",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#solve\n * @param b\n * @returns {Array}\n * @example\n *\n * // Solve xA = b\n * // 5x + y  = 7\n * // 3x - 4y = 18\n * // Solution for x and y:\n * // x = 2\n * // y = -3\n *\n * const A = Matrix.of([[5, 1], [3, -4]])\n * const solveA = A.solve([7, 18]) // [2, -3]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 853,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "solve",
        "params": [
            {
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "// Solve xA = b\n// 5x + y  = 7\n// 3x - 4y = 18\n// Solution for x and y:\n// x = 2\n// y = -3\n\nconst A = Matrix.of([[5, 1], [3, -4]])\nconst solveA = A.solve([7, 18]) // [2, -3]"
        ],
        "longname": "Matrix#solve",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19727,
                20249
            ],
            "filename": "matrix.js",
            "lineno": 872,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001634",
                "name": "Matrix.prototype.solve",
                "type": "FunctionExpression",
                "paramnames": [
                    "b"
                ]
            },
            "vars": {
                "A": "Matrix#solve~A",
                "LU": "Matrix#solve~LU",
                "L": "Matrix#solve~L",
                "U": "Matrix#solve~U",
                "n": "Matrix#solve~n",
                "s": "Matrix#solve~s",
                "c": "Matrix#solve~c",
                "x": "Matrix#solve~x",
                "k": "Matrix#solve~k",
                "j": "Matrix#solve~j",
                "c[undefined]": "Matrix#solve~c.undefined]",
                "a": "Matrix#solve~a",
                "t": "Matrix#solve~t",
                "b": "Matrix#solve~b",
                "x[undefined]": "Matrix#solve~x.undefined]"
            }
        },
        "undocumented": true,
        "name": "solve",
        "longname": "Matrix#solve",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19775,
                19791
            ],
            "filename": "matrix.js",
            "lineno": 873,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001644",
                "name": "A",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "A",
        "longname": "Matrix#solve~A",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19800,
                19811
            ],
            "filename": "matrix.js",
            "lineno": 874,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001651",
                "name": "LU",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "LU",
        "longname": "Matrix#solve~LU",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19820,
                19829
            ],
            "filename": "matrix.js",
            "lineno": 875,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001658",
                "name": "L",
                "type": "MemberExpression",
                "value": "LU[0]"
            }
        },
        "undocumented": true,
        "name": "L",
        "longname": "Matrix#solve~L",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19838,
                19847
            ],
            "filename": "matrix.js",
            "lineno": 876,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001664",
                "name": "U",
                "type": "MemberExpression",
                "value": "LU[1]"
            }
        },
        "undocumented": true,
        "name": "U",
        "longname": "Matrix#solve~U",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19856,
                19874
            ],
            "filename": "matrix.js",
            "lineno": 877,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001670",
                "name": "n",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "Matrix#solve~n",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19881,
                19886
            ],
            "filename": "matrix.js",
            "lineno": 878,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001677",
                "name": "s",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "s",
        "longname": "Matrix#solve~s",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19895,
                19901
            ],
            "filename": "matrix.js",
            "lineno": 879,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001681",
                "name": "c",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "c",
        "longname": "Matrix#solve~c",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19910,
                19916
            ],
            "filename": "matrix.js",
            "lineno": 880,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001685",
                "name": "x",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "x",
        "longname": "Matrix#solve~x",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19929,
                19934
            ],
            "filename": "matrix.js",
            "lineno": 882,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001690",
                "name": "k",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "k",
        "longname": "Matrix#solve~k",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19963,
                19968
            ],
            "filename": "matrix.js",
            "lineno": 883,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001701",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#solve~j",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19990,
                20020
            ],
            "filename": "matrix.js",
            "lineno": 884,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001711",
                "name": "s",
                "type": "BinaryExpression",
                "funcscope": "Matrix#solve",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "s",
        "longname": "Matrix#solve~s",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20031,
                20046
            ],
            "filename": "matrix.js",
            "lineno": 886,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001727",
                "name": "c[undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#solve",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "Matrix#solve~c.undefined]",
        "kind": "member",
        "memberof": "Matrix#solve~c",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20051,
                20056
            ],
            "filename": "matrix.js",
            "lineno": 887,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001737",
                "name": "s",
                "type": "Literal",
                "funcscope": "Matrix#solve",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "s",
        "longname": "Matrix#solve~s",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20072,
                20081
            ],
            "filename": "matrix.js",
            "lineno": 889,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001742",
                "name": "a",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "a",
        "longname": "Matrix#solve~a",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20106,
                20111
            ],
            "filename": "matrix.js",
            "lineno": 890,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001755",
                "name": "t",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "t",
        "longname": "Matrix#solve~t",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20125,
                20134
            ],
            "filename": "matrix.js",
            "lineno": 891,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001760",
                "name": "b",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "b",
        "longname": "Matrix#solve~b",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20156,
                20186
            ],
            "filename": "matrix.js",
            "lineno": 892,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001772",
                "name": "t",
                "type": "BinaryExpression",
                "funcscope": "Matrix#solve",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "t",
        "longname": "Matrix#solve~t",
        "kind": "member",
        "memberof": "Matrix#solve",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20197,
                20232
            ],
            "filename": "matrix.js",
            "lineno": 894,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001788",
                "name": "x[undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#solve",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "Matrix#solve~x.undefined]",
        "kind": "member",
        "memberof": "Matrix#solve~x",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#inverse\n\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[1, 1], [2, 4]]).inverse()\n * // [ [ 2, -0.5 ], [ -1, 0.5 ] ]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 899,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "inverse",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [2, 4]]).inverse()\n// [ [ 2, -0.5 ], [ -1, 0.5 ] ]"
        ],
        "longname": "Matrix#inverse",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20433,
                20742
            ],
            "filename": "matrix.js",
            "lineno": 910,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001808",
                "name": "Matrix.prototype.inverse",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "A": "Matrix#inverse~A",
                "I": "Matrix#inverse~I",
                "Inv": "Matrix#inverse~Inv",
                "result": "Matrix#inverse~result",
                "": null
            }
        },
        "undocumented": true,
        "name": "inverse",
        "longname": "Matrix#inverse",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20482,
                20498
            ],
            "filename": "matrix.js",
            "lineno": 911,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001817",
                "name": "A",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "A",
        "longname": "Matrix#inverse~A",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20507,
                20523
            ],
            "filename": "matrix.js",
            "lineno": 912,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001824",
                "name": "I",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "I",
        "longname": "Matrix#inverse~I",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20532,
                20556
            ],
            "filename": "matrix.js",
            "lineno": 913,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001831",
                "name": "Inv",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Inv",
        "longname": "Matrix#inverse~Inv",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20566,
                20713
            ],
            "filename": "matrix.js",
            "lineno": 915,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001842",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "Matrix#inverse~result",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20626,
                20645
            ],
            "filename": "matrix.js",
            "lineno": 916,
            "columnno": 10,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001856",
                "name": "half",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "half",
        "longname": "<anonymous>~half",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#rank\n\n * @returns {Number}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 923,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "rank",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "longname": "Matrix#rank",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20819,
                21000
            ],
            "filename": "matrix.js",
            "lineno": 929,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001886",
                "name": "Matrix.prototype.rank",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "rref": "Matrix#rank~rref",
                "result": "Matrix#rank~result",
                "i": "Matrix#rank~i"
            }
        },
        "undocumented": true,
        "name": "rank",
        "longname": "Matrix#rank",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20865,
                20883
            ],
            "filename": "matrix.js",
            "lineno": 930,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001895",
                "name": "rref",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "rref",
        "longname": "Matrix#rank~rref",
        "kind": "constant",
        "memberof": "Matrix#rank",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20890,
                20900
            ],
            "filename": "matrix.js",
            "lineno": 931,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001902",
                "name": "result",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "Matrix#rank~result",
        "kind": "member",
        "memberof": "Matrix#rank",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20912,
                20917
            ],
            "filename": "matrix.js",
            "lineno": 932,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001907",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rank~i",
        "kind": "member",
        "memberof": "Matrix#rank",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20950,
                20978
            ],
            "filename": "matrix.js",
            "lineno": 933,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001920",
                "name": "result",
                "type": "MemberExpression",
                "funcscope": "Matrix#rank",
                "value": "rref.__value[undefined][undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "Matrix#rank~result",
        "kind": "member",
        "memberof": "Matrix#rank",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#dimension\n\n * @see rank\n * @returns {Number}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 938,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "dimension",
        "see": [
            "rank"
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "longname": "Matrix#dimension",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21095,
                21160
            ],
            "filename": "matrix.js",
            "lineno": 945,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001932",
                "name": "Matrix.prototype.dimension",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dimension",
        "longname": "Matrix#dimension",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#diag\n\n * @desc Returns an array containing the values on the diagonal\n * @returns {Array}\n * @example\n *\n * const diag1 = Matrix.ones(3, 3).diag()\n * // [1, 1, 1]\n *\n * const diag0 = Matrix.zeros(5, 5).diag()\n * // [0, 0, 0, 0, 0]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 949,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "diag",
        "description": "Returns an array containing the values on the diagonal",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.ones(3, 3).diag()\n// [1, 1, 1]\n\nconst diag0 = Matrix.zeros(5, 5).diag()\n// [0, 0, 0, 0, 0]"
        ],
        "longname": "Matrix#diag",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21444,
                21569
            ],
            "filename": "matrix.js",
            "lineno": 964,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001946",
                "name": "Matrix.prototype.diag",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "diag",
        "longname": "Matrix#diag",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.diag\n * @desc Returns an array containing the values on the diagonal\n * @param M {Matrix|Array} Matrix from which to return the diagonal\n * @returns {Array}\n * @example\n *\n * const diag1 = Matrix.diag([[2, 1], [1, 5]])\n * // [2, 5]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 970,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "diag",
        "description": "Returns an array containing the values on the diagonal",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix from which to return the diagonal",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.diag([[2, 1], [1, 5]])\n// [2, 5]"
        ],
        "longname": "Matrix.diag",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21854,
                21913
            ],
            "filename": "matrix.js",
            "lineno": 982,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001977",
                "name": "Matrix.diag",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "diag",
        "longname": "Matrix.diag",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#diagproduct\n * @desc Returns the product of the values on the diagonal\n * @returns {Number}\n * @example\n *\n * const diag1 = Matrix.ones(3, 3).diagproduct()\n * // 1\n *\n * const diag0 = Matrix.zeros(5, 5).diagproduct()\n * // 0\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 986,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "diagproduct",
        "description": "Returns the product of the values on the diagonal",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.ones(3, 3).diagproduct()\n// 1\n\nconst diag0 = Matrix.zeros(5, 5).diagproduct()\n// 0"
        ],
        "longname": "Matrix#diagproduct",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22191,
                22325
            ],
            "filename": "matrix.js",
            "lineno": 1000,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001994",
                "name": "Matrix.prototype.diagproduct",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "diagproduct",
        "longname": "Matrix#diagproduct",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22273,
                22286
            ],
            "filename": "matrix.js",
            "lineno": 1002,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002013",
                "name": "acc",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "x[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.diagproduct\n * @desc Returns the product of the values on the diagonal\n * @param M {Matrix|Array} Matrix from which to return the diagonal\n * @returns {Number}\n * @example\n *\n * const diag1 = Matrix.diagproduct([[2, 1], [1, 5]])\n * // 10\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1007,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "diagproduct",
        "description": "Returns the product of the values on the diagonal",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix from which to return the diagonal",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.diagproduct([[2, 1], [1, 5]])\n// 10"
        ],
        "longname": "Matrix.diagproduct",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22616,
                22689
            ],
            "filename": "matrix.js",
            "lineno": 1019,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002025",
                "name": "Matrix.diagproduct",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "diagproduct",
        "longname": "Matrix.diagproduct",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#sum\n * @desc Returns the sum of the values in the Matrix\n * @returns {Number}\n * @example\n *\n * const diag1 = Matrix.ones(3, 3).sum()\n * // 9\n *\n * const diag0 = Matrix.zeros(5, 5).sum()\n * // 0\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1023,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "sum",
        "description": "Returns the sum of the values in the Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.ones(3, 3).sum()\n// 9\n\nconst diag0 = Matrix.zeros(5, 5).sum()\n// 0"
        ],
        "longname": "Matrix#sum",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22937,
                23091
            ],
            "filename": "matrix.js",
            "lineno": 1037,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002042",
                "name": "Matrix.prototype.sum",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "sum",
        "longname": "Matrix#sum",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23006,
                23052
            ],
            "filename": "matrix.js",
            "lineno": 1039,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002060",
                "name": "acc",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.sum\n * @desc Returns the sum of the values in the Matrix\n * @param M {Matrix|Array} Matrix from which to return the diagonal\n * @returns {Number}\n * @example\n *\n * const diag1 = Matrix.sum([[2, 1], [1, 5]])\n * // 9\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1044,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "sum",
        "description": "Returns the sum of the values in the Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix from which to return the diagonal",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.sum([[2, 1], [1, 5]])\n// 9"
        ],
        "longname": "Matrix.sum",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23359,
                23416
            ],
            "filename": "matrix.js",
            "lineno": 1056,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002081",
                "name": "Matrix.sum",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "sum",
        "longname": "Matrix.sum",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#kronecker\n * @desc The Kronecker product is an operation on two matrices of arbitrary size resulting in a block matrix.\n * @param M {Matrix} The right side Matrix of the product (this ⊗ M)\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1060,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "kronecker",
        "description": "The Kronecker product is an operation on two matrices of arbitrary size resulting in a block matrix.",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The right side Matrix of the product (this ⊗ M)",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#kronecker",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23676,
                24179
            ],
            "filename": "matrix.js",
            "lineno": 1067,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002098",
                "name": "Matrix.prototype.kronecker",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "m": "Matrix#kronecker~m",
                "n": "Matrix#kronecker~n",
                "p": "Matrix#kronecker~p",
                "q": "Matrix#kronecker~q",
                "left": "Matrix#kronecker~left",
                "right": "Matrix#kronecker~right",
                "frame": "Matrix#kronecker~frame",
                "i": "Matrix#kronecker~i",
                "j": "Matrix#kronecker~j",
                "k": "Matrix#kronecker~k",
                "l": "Matrix#kronecker~l",
                "frame[undefined][undefined]": "Matrix#kronecker~frame.undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "kronecker",
        "longname": "Matrix#kronecker",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23728,
                23746
            ],
            "filename": "matrix.js",
            "lineno": 1068,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002108",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix#kronecker~m",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23755,
                23773
            ],
            "filename": "matrix.js",
            "lineno": 1069,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002115",
                "name": "n",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "Matrix#kronecker~n",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23782,
                23797
            ],
            "filename": "matrix.js",
            "lineno": 1070,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002122",
                "name": "p",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "p",
        "longname": "Matrix#kronecker~p",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23806,
                23821
            ],
            "filename": "matrix.js",
            "lineno": 1071,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002129",
                "name": "q",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "q",
        "longname": "Matrix#kronecker~q",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23831,
                23850
            ],
            "filename": "matrix.js",
            "lineno": 1073,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002136",
                "name": "left",
                "type": "MemberExpression",
                "value": "this.__value"
            }
        },
        "undocumented": true,
        "name": "left",
        "longname": "Matrix#kronecker~left",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23859,
                23876
            ],
            "filename": "matrix.js",
            "lineno": 1074,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002142",
                "name": "right",
                "type": "MemberExpression",
                "value": "M.__value"
            }
        },
        "undocumented": true,
        "name": "right",
        "longname": "Matrix#kronecker~right",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23886,
                23916
            ],
            "filename": "matrix.js",
            "lineno": 1076,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002148",
                "name": "frame",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "frame",
        "longname": "Matrix#kronecker~frame",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23929,
                23934
            ],
            "filename": "matrix.js",
            "lineno": 1078,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002160",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#kronecker~i",
        "kind": "member",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23963,
                23968
            ],
            "filename": "matrix.js",
            "lineno": 1079,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002171",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#kronecker~j",
        "kind": "member",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23999,
                24004
            ],
            "filename": "matrix.js",
            "lineno": 1080,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002182",
                "name": "k",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "k",
        "longname": "Matrix#kronecker~k",
        "kind": "member",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24037,
                24042
            ],
            "filename": "matrix.js",
            "lineno": 1081,
            "columnno": 17,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002193",
                "name": "l",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "l",
        "longname": "Matrix#kronecker~l",
        "kind": "member",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24068,
                24122
            ],
            "filename": "matrix.js",
            "lineno": 1082,
            "columnno": 10,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002203",
                "name": "frame[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#kronecker",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined][undefined]",
        "longname": "Matrix#kronecker~frame.undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#kronecker~frame",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.kronecker\n * @desc The Kronecker product is an operation on two matrices of arbitrary size resulting in a block matrix.\n * @param A {Matrix} The left side Matrix of the product (A ⊗ B)\n * @param B {Matrix} The right side Matrix of the product (A ⊗ B)\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1091,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "kronecker",
        "description": "The Kronecker product is an operation on two matrices of arbitrary size resulting in a block matrix.",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The left side Matrix of the product (A ⊗ B)",
                "name": "A"
            },
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The right side Matrix of the product (A ⊗ B)",
                "name": "B"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.kronecker",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24501,
                24574
            ],
            "filename": "matrix.js",
            "lineno": 1099,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002235",
                "name": "Matrix.kronecker",
                "type": "FunctionExpression",
                "paramnames": [
                    "A",
                    "B"
                ]
            }
        },
        "undocumented": true,
        "name": "kronecker",
        "longname": "Matrix.kronecker",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24576,
                24597
            ],
            "filename": "matrix.js",
            "lineno": 1103,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002253",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71,
                173
            ],
            "filename": "addMatrix.js",
            "lineno": 4,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002265",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71,
                133
            ],
            "filename": "addScalar.js",
            "lineno": 4,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002304",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function concat\n * @param M {Matrix}\n * @param m {Array}\n * @param idx {number}\n * @returns {Array}\n */",
        "meta": {
            "filename": "concat.js",
            "lineno": 4,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "concat",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "M"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "idx"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "concat",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                189,
                270
            ],
            "filename": "concat.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002331",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function dot\n * @param B {Matrix}\n * @param a {Array}\n * @returns {Array}\n */",
        "meta": {
            "filename": "dot.js",
            "lineno": 6,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "dot",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "name": "B"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "a"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "dot",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                220,
                402
            ],
            "filename": "dot.js",
            "lineno": 12,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002366",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                315,
                358
            ],
            "filename": "dot.js",
            "lineno": 14,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002390",
                "name": "acc",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                38,
                67
            ],
            "filename": "empty.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002419",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function generate\n * @desc Generator function for a matrix array, values are set to undefined\n * @param rows {number}\n * @param cols {number}\n * @returns {any[][]}\n */",
        "meta": {
            "filename": "generate.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "generate",
        "description": "Generator function for a matrix array, values are set to undefined",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Array.<any>>"
                    ]
                }
            }
        ],
        "longname": "generate",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                176,
                278
            ],
            "filename": "generate.js",
            "lineno": 8,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002427",
                "name": "module.exports",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function identity\n * @desc Creates an identiy matrix from an empty array\n * @param m {Array}\n * @param idx {number}\n * @return {Matrix}\n */",
        "meta": {
            "filename": "identity.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "identity",
        "description": "Creates an identiy matrix from an empty array",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "idx"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "identity",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                182,
                249
            ],
            "filename": "identity.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002458",
                "name": "module.exports",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "m",
                    "idx"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function round\n * @param value {number}\n * @param decimals {number}\n * @returns {Number}\n */",
        "meta": {
            "filename": "round.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "round",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "decimals"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "longname": "round",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                101,
                222
            ],
            "filename": "round.js",
            "lineno": 7,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002476",
                "name": "module.exports",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value",
                    "decimals"
                ]
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                116,
                222
            ],
            "filename": "round.js",
            "lineno": 7,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002477",
                "name": "round",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value",
                    "decimals"
                ]
            }
        },
        "undocumented": true,
        "name": "round",
        "longname": "round",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * @function transpose\n * @desc Transposes a array of arrays using the Matrix.map function\n * @param m {Array}\n * @param idx {number}\n * @return {Matrix}\n */",
        "meta": {
            "filename": "transpose.js",
            "lineno": 4,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "transpose",
        "description": "Transposes a array of arrays using the Matrix.map function",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "idx"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "transpose",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                233,
                326
            ],
            "filename": "transpose.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002508",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/Volumes/BigOne/github/funMatrix/src/matrix.js",
            "/Volumes/BigOne/github/funMatrix/src/util/addMatrix.js",
            "/Volumes/BigOne/github/funMatrix/src/util/addScalar.js",
            "/Volumes/BigOne/github/funMatrix/src/util/concat.js",
            "/Volumes/BigOne/github/funMatrix/src/util/dot.js",
            "/Volumes/BigOne/github/funMatrix/src/util/empty.js",
            "/Volumes/BigOne/github/funMatrix/src/util/generate.js",
            "/Volumes/BigOne/github/funMatrix/src/util/identity.js",
            "/Volumes/BigOne/github/funMatrix/src/util/round.js",
            "/Volumes/BigOne/github/funMatrix/src/util/transpose.js"
        ]
    }
]
