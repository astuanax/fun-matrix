[
    {
        "comment": "/**\n * @class Matrix\n * @classdesc Matrix applicative providing standard matrix operations\n * @summary The Matrix class should not be instantiated with the new keyword. Instead use the Matrix.of syntax to create a new Matrix. Unfortunatly jsdocs does not allow for the constructor to be hidden.\n * @hidecontructor\n * @see Matrix.of\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 18,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "kind": "class",
        "name": "Matrix",
        "classdesc": "Matrix applicative providing standard matrix operations",
        "summary": "The Matrix class should not be instantiated with the new keyword. Instead use the Matrix.of syntax to create a new Matrix. Unfortunatly jsdocs does not allow for the constructor to be hidden.",
        "tags": [
            {
                "originalTitle": "hidecontructor",
                "title": "hidecontructor",
                "text": ""
            }
        ],
        "see": [
            "Matrix.of"
        ],
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])"
        ],
        "longname": "Matrix",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                990,
                1038
            ],
            "filename": "matrix.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000063",
                "name": "Matrix",
                "type": "FunctionExpression"
            },
            "vars": {
                "this.__value": null
            }
        },
        "undocumented": true,
        "name": "Matrix",
        "longname": "Matrix",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1018,
                1036
            ],
            "filename": "matrix.js",
            "lineno": 30,
            "columnno": 2,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000069",
                "name": "this.__value",
                "type": "Identifier",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value",
        "longname": "__value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.of\n * @desc Creates a Matrix object and flattens the Matrix\n * @param {Array|Function} val - An array of arrays\n * @returns {Matrix}\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "of",
        "description": "Creates a Matrix object and flattens the Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Array",
                        "function"
                    ]
                },
                "description": "An array of arrays",
                "name": "val"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])"
        ],
        "longname": "Matrix.of"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1295,
                1465
            ],
            "filename": "matrix.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000075",
                "name": "Matrix.of",
                "type": "FunctionExpression",
                "paramnames": [
                    "val"
                ]
            },
            "vars": {
                "this.__value": "Matrix.of#__value"
            }
        },
        "undocumented": true,
        "name": "of",
        "longname": "Matrix.of",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1400,
                1418
            ],
            "filename": "matrix.js",
            "lineno": 48,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000094",
                "name": "this.__value",
                "type": "Identifier",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value",
        "longname": "Matrix.of#__value",
        "kind": "member",
        "memberof": "Matrix.of",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @property {String} type - Returns the string 'Matrix' for all Matrix objects\n * @type {String}\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n * m.type === 'Matrix'\n */",
        "meta": {
            "range": [
                1676,
                1708
            ],
            "filename": "matrix.js",
            "lineno": 63,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000106",
                "name": "Matrix.prototype.type",
                "type": "Literal",
                "value": "Matrix",
                "paramnames": []
            }
        },
        "memberof": "Matrix",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Returns the string 'Matrix' for all Matrix objects",
                "name": "type"
            }
        ],
        "type": {
            "names": [
                "String"
            ]
        },
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])\nm.type === 'Matrix'"
        ],
        "name": "type",
        "longname": "Matrix#type",
        "kind": "member",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @property {Number} precision - Floating point precision is set to 4 by default\n * @type {Number}\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n * m.precision === 4\n */",
        "meta": {
            "range": [
                1919,
                1949
            ],
            "filename": "matrix.js",
            "lineno": 74,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000114",
                "name": "Matrix.prototype.precision",
                "type": "Literal",
                "value": 4,
                "paramnames": []
            }
        },
        "memberof": "Matrix",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Floating point precision is set to 4 by default",
                "name": "precision"
            }
        ],
        "type": {
            "names": [
                "Number"
            ]
        },
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])\nm.precision === 4"
        ],
        "name": "precision",
        "longname": "Matrix#precision",
        "kind": "member",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#setPrecision\n * @desc The precision is used in floating point calculations for the dot product\n * @param {Number} [precision=4] - Set the number of decimals for rounding\n * @example\n *\n * const m =  Matrix.of([[1,2],[2,3],[4,5]])\n * m.setPrecision(10)\n * m.precision === 10\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 76,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "setPrecision",
        "description": "The precision is used in floating point calculations for the dot product",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 4,
                "description": "Set the number of decimals for rounding",
                "name": "precision"
            }
        ],
        "examples": [
            "const m =  Matrix.of([[1,2],[2,3],[4,5]])\nm.setPrecision(10)\nm.precision === 10"
        ],
        "longname": "Matrix#setPrecision",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2273,
                2358
            ],
            "filename": "matrix.js",
            "lineno": 87,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000122",
                "name": "Matrix.prototype.setPrecision",
                "type": "FunctionExpression",
                "paramnames": [
                    "precision"
                ]
            },
            "vars": {
                "this.precision": "Matrix#setPrecision#precision"
            }
        },
        "undocumented": true,
        "name": "setPrecision",
        "longname": "Matrix#setPrecision",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2330,
                2356
            ],
            "filename": "matrix.js",
            "lineno": 88,
            "columnno": 2,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000132",
                "name": "this.precision",
                "type": "Identifier",
                "value": "precision",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "precision",
        "longname": "Matrix#setPrecision#precision",
        "kind": "member",
        "memberof": "Matrix#setPrecision",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#isSymmetric\n * @desc Boolean indicating whether the Matrix is symmetric by testing for equality of the transposed Matrix.\n * @returns {Boolean}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * true === A.isSymmetric()\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 91,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "isSymmetric",
        "description": "Boolean indicating whether the Matrix is symmetric by testing for equality of the transposed Matrix.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\ntrue === A.isSymmetric()"
        ],
        "longname": "Matrix#isSymmetric",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2639,
                2775
            ],
            "filename": "matrix.js",
            "lineno": 102,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000138",
                "name": "Matrix.prototype.isSymmetric",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "a": "Matrix#isSymmetric~a",
                "b": "Matrix#isSymmetric~b"
            }
        },
        "undocumented": true,
        "name": "isSymmetric",
        "longname": "Matrix#isSymmetric",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2692,
                2708
            ],
            "filename": "matrix.js",
            "lineno": 103,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000147",
                "name": "a",
                "type": "MemberExpression",
                "value": "this.__value"
            }
        },
        "undocumented": true,
        "name": "a",
        "longname": "Matrix#isSymmetric~a",
        "kind": "constant",
        "memberof": "Matrix#isSymmetric",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2717,
                2751
            ],
            "filename": "matrix.js",
            "lineno": 104,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000153",
                "name": "b",
                "type": "MemberExpression",
                "value": ".__value"
            }
        },
        "undocumented": true,
        "name": "b",
        "longname": "Matrix#isSymmetric~b",
        "kind": "constant",
        "memberof": "Matrix#isSymmetric",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#isSquare\n * @desc Boolean indicating whether the Matrix object is square.\n * @returns {Boolean}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * true === A.isSquare()\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 108,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "isSquare",
        "description": "Boolean indicating whether the Matrix object is square.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\ntrue === A.isSquare()"
        ],
        "longname": "Matrix#isSquare",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3005,
                3096
            ],
            "filename": "matrix.js",
            "lineno": 119,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000168",
                "name": "Matrix.prototype.isSquare",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "isSquare",
        "longname": "Matrix#isSquare",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#isOrthogonal\n * @desc Boolean indicating whether the Matrix is orthogonal by testing for equality between Identity Matrix and the dot product of the Matrix and its transpose.\n * @returns {Boolean}\n * @example\n *\n * const result = [[-0.3092, -0.9510], [-0.9510, 0.3092]]\n * const A = Matrix.fromArray(result)\n * true  === A.isOrthogonal()\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 123,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "isOrthogonal",
        "description": "Boolean indicating whether the Matrix is orthogonal by testing for equality between Identity Matrix and the dot product of the Matrix and its transpose.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "const result = [[-0.3092, -0.9510], [-0.9510, 0.3092]]\nconst A = Matrix.fromArray(result)\ntrue  === A.isOrthogonal()"
        ],
        "longname": "Matrix#isOrthogonal",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3484,
                3626
            ],
            "filename": "matrix.js",
            "lineno": 134,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000188",
                "name": "Matrix.prototype.isOrthogonal",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "AxAt": "Matrix#isOrthogonal~AxAt",
                "I": "Matrix#isOrthogonal~I"
            }
        },
        "undocumented": true,
        "name": "isOrthogonal",
        "longname": "Matrix#isOrthogonal",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3538,
                3571
            ],
            "filename": "matrix.js",
            "lineno": 135,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000197",
                "name": "AxAt",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "AxAt",
        "longname": "Matrix#isOrthogonal~AxAt",
        "kind": "constant",
        "memberof": "Matrix#isOrthogonal",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3580,
                3599
            ],
            "filename": "matrix.js",
            "lineno": 136,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000208",
                "name": "I",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "I",
        "longname": "Matrix#isOrthogonal~I",
        "kind": "constant",
        "memberof": "Matrix#isOrthogonal",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#getCols\n * @desc Number indicating the number of columns in the Matrix\n * @returns {Number}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * A.getCols()  === 2\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 140,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "getCols",
        "description": "Number indicating the number of columns in the Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\nA.getCols()  === 2"
        ],
        "longname": "Matrix#getCols",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3849,
                3923
            ],
            "filename": "matrix.js",
            "lineno": 151,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000220",
                "name": "Matrix.prototype.getCols",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getCols",
        "longname": "Matrix#getCols",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#equals\n * @desc Function returning a boolean testing for equality of the values of a Matrix or Array\n * @param {Matrix|Array} M - Matrix or Array to compare for equality\n * @returns {Boolean}\n * @example\n *\n * var a = [[1, 1], [1, 1]]\n * var A = Matrix.of(a)\n * var B = Matrix.of(a)\n * true  === A.equals(B)\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 155,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "equals",
        "description": "Function returning a boolean testing for equality of the values of a Matrix or Array",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix or Array to compare for equality",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                }
            }
        ],
        "examples": [
            "var a = [[1, 1], [1, 1]]\nvar A = Matrix.of(a)\nvar B = Matrix.of(a)\ntrue  === A.equals(B)"
        ],
        "longname": "Matrix#equals",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4281,
                4369
            ],
            "filename": "matrix.js",
            "lineno": 168,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000237",
                "name": "Matrix.prototype.equals",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "equals",
        "longname": "Matrix#equals",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#getRows\n * @desc Number indicating the number of rows in the Matrix\n * @returns {Number}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * A.getRows()  // 2\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 172,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "getRows",
        "description": "Number indicating the number of rows in the Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\nA.getRows()  // 2"
        ],
        "longname": "Matrix#getRows",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4585,
                4656
            ],
            "filename": "matrix.js",
            "lineno": 182,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000258",
                "name": "Matrix.prototype.getRows",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getRows",
        "longname": "Matrix#getRows",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#getShape\n * @returns {Array}\n * @example\n *\n * const A = Matrix.of([[1, 1], [1, 1]])\n * A.getShape()  // [2, 2]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 186,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "getShape",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [1, 1]])\nA.getShape()  // [2, 2]"
        ],
        "longname": "Matrix#getShape",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4818,
                4903
            ],
            "filename": "matrix.js",
            "lineno": 195,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000273",
                "name": "Matrix.prototype.getShape",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getShape",
        "longname": "Matrix#getShape",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#map\n * @description Maps over the rows of the matrix using a map function\n * @param {Function} f - An iterator function\n * @returns {Matrix}\n * @example\n *\n * const m = Matrix.of([[1, 1], [1, 1]])\n * m.map(x => x.map(y => y+ 1))\n * // [[2, 2], [2, 2]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 199,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "map",
        "description": "Maps over the rows of the matrix using a map function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "An iterator function",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const m = Matrix.of([[1, 1], [1, 1]])\nm.map(x => x.map(y => y+ 1))\n// [[2, 2], [2, 2]]"
        ],
        "longname": "Matrix#map",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5208,
                5288
            ],
            "filename": "matrix.js",
            "lineno": 212,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000292",
                "name": "Matrix.prototype.map",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "Matrix#map",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.map\n * @description Curried function that maps over the rows of the matrix using a map function\n * @param {Function} f - An iterator function\n * @param {Matrix|Array} M - Matrix or array to map\n * @returns {Matrix}\n * @example\n *\n * const m = Matrix.map(x= > x.map(y => y+ 1), [[1, 1], [1, 1]])\n * // [[2, 2], [2, 2]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 216,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "map",
        "description": "Curried function that maps over the rows of the matrix using a map function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "An iterator function",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix or array to map",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const m = Matrix.map(x= > x.map(y => y+ 1), [[1, 1], [1, 1]])\n// [[2, 2], [2, 2]]"
        ],
        "longname": "Matrix.map"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5670,
                5738
            ],
            "filename": "matrix.js",
            "lineno": 230,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000314",
                "name": "Matrix.map",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "map",
        "longname": "Matrix.map",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#fold\n * @description Reduce the matrix rows using a reduce function\n * @param {Function} f - A reduce/fold function\n * @returns {Matrix}\n * @example\n *\n * // Flatten Matrix\n * Matrix.of([[1, 1], [1, 1]]).fold((prev, next) => prev.concat(next))\n * // [1, 1, 1, 1]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 234,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "fold",
        "description": "Reduce the matrix rows using a reduce function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A reduce/fold function",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "// Flatten Matrix\nMatrix.of([[1, 1], [1, 1]]).fold((prev, next) => prev.concat(next))\n// [1, 1, 1, 1]"
        ],
        "longname": "Matrix#fold",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6051,
                6137
            ],
            "filename": "matrix.js",
            "lineno": 246,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000335",
                "name": "Matrix.prototype.fold",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            }
        },
        "undocumented": true,
        "name": "fold",
        "longname": "Matrix#fold",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.fold\n * @description Static function to reduce the matrix rows using a reduce function\n * @param {Function} f - A reduce/fold function\n * @param {Matrix|Array} M - The Matrix to reduce\n * @returns {Matrix}\n * @example\n\n * // Sum of all matrix values\n * const reducer = (prev, next) => Number(prev) + next.reduce((acc, x) => acc + x, 0)\n * const A = Matrix.of([[1, 1], [1, 1]]\n * Matrix.fold(reducer, A)\n * // 4\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 250,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "fold",
        "description": "Static function to reduce the matrix rows using a reduce function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A reduce/fold function",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "The Matrix to reduce",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "// Sum of all matrix values\nconst reducer = (prev, next) => Number(prev) + next.reduce((acc, x) => acc + x, 0)\nconst A = Matrix.of([[1, 1], [1, 1]]\nMatrix.fold(reducer, A)\n// 4"
        ],
        "longname": "Matrix.fold"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6609,
                6679
            ],
            "filename": "matrix.js",
            "lineno": 266,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000358",
                "name": "Matrix.fold",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "fold",
        "longname": "Matrix.fold",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#ap\n * @description Function that applies a function to a Matrix\n * @param {Matrix|Array} M - Matrix or Array to apply a function\n * @returns {Matrix}\n * @example\n *\n * const f = x => x.reduce((prev, next) => prev + next)\n * const A = Matrix.of([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n * Matrix.of(f).ap(M)\n * // [[6], [15], [24]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 270,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "ap",
        "description": "Function that applies a function to a Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix or Array to apply a function",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const f = x => x.reduce((prev, next) => prev + next)\nconst A = Matrix.of([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nMatrix.of(f).ap(M)\n// [[6], [15], [24]"
        ],
        "longname": "Matrix#ap",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7053,
                7131
            ],
            "filename": "matrix.js",
            "lineno": 283,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000379",
                "name": "Matrix.prototype.ap",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "ap",
        "longname": "Matrix#ap",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.ap\n * @description Curried function that applies a function to a Matrix\n * @param {Function} f - Function that accepts a Matrix as input\n * @param {Matrix|Array} M - Matrix or Array to apply a function\n * @returns {Matrix}\n * @example\n *\n * const f = x => x.reduce((prev, next) => prev + next)\n * Matrix.ap(f, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n * // [[6], [15], [24]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 287,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "ap",
        "description": "Curried function that applies a function to a Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function that accepts a Matrix as input",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix or Array to apply a function",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const f = x => x.reduce((prev, next) => prev + next)\nMatrix.ap(f, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n// [[6], [15], [24]"
        ],
        "longname": "Matrix.ap"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7560,
                7626
            ],
            "filename": "matrix.js",
            "lineno": 301,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000401",
                "name": "Matrix.ap",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ap",
        "longname": "Matrix.ap",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#concat\n * @description Concatenates 2 Matrices using a function as operator\n * @param {Matrix} M - The right side of the concatenation/product\n * @param {Function} [f=concat] - A curried function accepting 2 matrices as input\n * @returns {Matrix}\n * @example\n *\n * const a = [[0, 1, 1], [2, 3, 4]]\n * const b = [[2, 2, 2], [3, 3, 3]]\n * const A = Matrix.of(a)\n * const B = Matrix.of(b)\n * const M = A.concat(B)\n * // [[0, 1, 1, 2, 2, 2], [2, 3, 4, 3, 3, 3]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 305,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "concat",
        "description": "Concatenates 2 Matrices using a function as operator",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The right side of the concatenation/product",
                "name": "M"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "defaultvalue": "concat",
                "description": "A curried function accepting 2 matrices as input",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[0, 1, 1], [2, 3, 4]]\nconst b = [[2, 2, 2], [3, 3, 3]]\nconst A = Matrix.of(a)\nconst B = Matrix.of(b)\nconst M = A.concat(B)\n// [[0, 1, 1, 2, 2, 2], [2, 3, 4, 3, 3, 3]]"
        ],
        "longname": "Matrix#concat",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8137,
                8226
            ],
            "filename": "matrix.js",
            "lineno": 322,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000422",
                "name": "Matrix.prototype.concat",
                "type": "FunctionExpression",
                "paramnames": [
                    "M",
                    "f"
                ]
            }
        },
        "undocumented": true,
        "name": "concat",
        "longname": "Matrix#concat",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.concat\n * @description A curried function that concatenates 2 Matrices using a function as operator\n * @param {Matrix} A - Left side Matrix of the concatenation\n * @param {Matrix} B - Right side Matrix of the concatenation\n * @param {Function} [f=concat] - A curried function accepting 2 matrices as input\n * @returns {Matrix}\n * @example\n *\n * const a = [[0, 1, 1], [2, 3, 4]]\n * const b = [[2, 2, 2], [3, 3, 3]]\n * const A = Matrix.of(a)\n * const B = Matrix.of(b)\n * const M = Matrix.concat(A, B)\n * // [[0, 1, 1, 2, 2, 2], [2, 3, 4, 3, 3, 3]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 326,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "concat",
        "description": "A curried function that concatenates 2 Matrices using a function as operator",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "Left side Matrix of the concatenation",
                "name": "A"
            },
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "Right side Matrix of the concatenation",
                "name": "B"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "defaultvalue": "concat",
                "description": "A curried function accepting 2 matrices as input",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[0, 1, 1], [2, 3, 4]]\nconst b = [[2, 2, 2], [3, 3, 3]]\nconst A = Matrix.of(a)\nconst B = Matrix.of(b)\nconst M = Matrix.concat(A, B)\n// [[0, 1, 1, 2, 2, 2], [2, 3, 4, 3, 3, 3]]"
        ],
        "longname": "Matrix.concat"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8836,
                8922
            ],
            "filename": "matrix.js",
            "lineno": 345,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000447",
                "name": "Matrix.concat",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "concat",
        "longname": "Matrix.concat",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#empty\n * @description Returns an empty Matrix from an existing Matrix\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 349,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "empty",
        "description": "Returns an empty Matrix from an existing Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#empty",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9063,
                9139
            ],
            "filename": "matrix.js",
            "lineno": 355,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000473",
                "name": "Matrix.prototype.empty",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "empty",
        "longname": "Matrix#empty",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.empty\n * @description Returns an empty Matrix from an existing Matrix\n * @param {Number} [rows=0] - Rows to generate\n * @param {Number} [cols=0] - Cols to generate\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 359,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "empty",
        "description": "Returns an empty Matrix from an existing Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "Rows to generate",
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "Cols to generate",
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.empty"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9385,
                9581
            ],
            "filename": "matrix.js",
            "lineno": 368,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000492",
                "name": "Matrix.empty",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "empty",
        "longname": "Matrix.empty",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9446,
                9470
            ],
            "filename": "matrix.js",
            "lineno": 369,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000507",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "<anonymous>~m",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#identity\n * @desc Returns an identity matrix\n * @returns {Matrix}\n * @example\n *\n * const a = [[1, 2, 3], [4, 5, 6]]\n * const A = Matrix.of(a)\n * const Aidentity = A.identity()\n * // [[1, 0, 0], [0, 1, 0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 375,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "identity",
        "description": "Returns an identity matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[1, 2, 3], [4, 5, 6]]\nconst A = Matrix.of(a)\nconst Aidentity = A.identity()\n// [[1, 0, 0], [0, 1, 0]]"
        ],
        "longname": "Matrix#identity",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9862,
                9943
            ],
            "filename": "matrix.js",
            "lineno": 388,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000524",
                "name": "Matrix.prototype.identity",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "identity",
        "longname": "Matrix#identity",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.identity\n * @desc curried fucntion that returns an identity matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.identity(3, 2)\n * // [[1, 0, 0], [0, 1, 0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 392,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "identity",
        "description": "curried fucntion that returns an identity matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.identity(3, 2)\n// [[1, 0, 0], [0, 1, 0]]"
        ],
        "longname": "Matrix.identity"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10174,
                10367
            ],
            "filename": "matrix.js",
            "lineno": 404,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000543",
                "name": "Matrix.identity",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "identity",
        "longname": "Matrix.identity",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10230,
                10254
            ],
            "filename": "matrix.js",
            "lineno": 405,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000554",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "<anonymous>~m",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#combine\n * @desc Concatenates 2 Matrices together.\n * @see Matrix.concat\n * @param {Matrix } M - Right side Matrix of the combine operation\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 409,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "combine",
        "description": "Concatenates 2 Matrices together.",
        "see": [
            "Matrix.concat"
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "Right side Matrix of the combine operation",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#combine",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10578,
                10675
            ],
            "filename": "matrix.js",
            "lineno": 417,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000571",
                "name": "Matrix.prototype.combine",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "combine",
        "longname": "Matrix#combine",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.combine\n * @desc Curried fucntion that combines 2 Matrices\n * @see Matrix.concat\n * @param {Matrix} A - Left side of the combine operator\n * @param {Matrix} A - Right side of the combine operator\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 421,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "combine",
        "description": "Curried fucntion that combines 2 Matrices",
        "see": [
            "Matrix.concat"
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "Left side of the combine operator",
                "name": "A"
            },
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "Right side of the combine operator",
                "name": "A"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.combine"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10953,
                11047
            ],
            "filename": "matrix.js",
            "lineno": 431,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000596",
                "name": "Matrix.combine",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "combine",
        "longname": "Matrix.combine",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#dot\n * @description Returns the dot product between 2 matrices\n * @param {Matrix|Array} M - Right side of the dot product\n * @returns {Matrix}\n * @example\n *\n * // Create matrix\n * const m = Matrix.of([[1, 2], [3, 4]])\n *\n * // Generate identity matrix\n * const I  = m.identity() // [[1, 0], [0, 1]]\n *\n * if(m.dot(I).equals(m)) {\n *    console.log('Dot product with identity matrix returns the same matrix')\n * }\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 435,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "dot",
        "description": "Returns the dot product between 2 matrices",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Right side of the dot product",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "// Create matrix\nconst m = Matrix.of([[1, 2], [3, 4]])\n\n// Generate identity matrix\nconst I  = m.identity() // [[1, 0], [0, 1]]\n\nif(m.dot(I).equals(m)) {\n   console.log('Dot product with identity matrix returns the same matrix')\n}"
        ],
        "longname": "Matrix#dot",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11514,
                11620
            ],
            "filename": "matrix.js",
            "lineno": 454,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000622",
                "name": "Matrix.prototype.dot",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "dot",
        "longname": "Matrix#dot",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @static\n * @function Matrix.dot\n * @description Curried fucntion that returns the dot product of 2 matrices\n * @param {Matrix|Array} A - Left side of the dot product\n * @param {Matrix|Array} B - Right side of the dot product\n * @returns {Matrix}\n * @example\n * const a = [[1, 2, 3], [4, 5, 6]]\n * const b = [[7, 8], [9, 10], [11, 12]]\n *\n * const A = Matrix.of(a)\n * const B = Matrix.of(b)\n *\n * Matrix.dot(A, B) // [[58, 64], [139, 154]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 458,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "scope": "static",
        "kind": "function",
        "name": "dot",
        "description": "Curried fucntion that returns the dot product of 2 matrices",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Left side of the dot product",
                "name": "A"
            },
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Right side of the dot product",
                "name": "B"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [[1, 2, 3], [4, 5, 6]]\nconst b = [[7, 8], [9, 10], [11, 12]]\n\nconst A = Matrix.of(a)\nconst B = Matrix.of(b)\n\nMatrix.dot(A, B) // [[58, 64], [139, 154]]"
        ],
        "longname": "Matrix.dot"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12095,
                12174
            ],
            "filename": "matrix.js",
            "lineno": 476,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000651",
                "name": "Matrix.dot",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dot",
        "longname": "Matrix.dot",
        "kind": "member",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#fill\n * @desc Fill up an empty matrix with the provided map function\n * @param {Function} f - Function that generates a value\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).fill(x => 42)\n * // [[42,42,42], [42,42,42], [42,42,42]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 480,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "fill",
        "description": "Fill up an empty matrix with the provided map function",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function that generates a value",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).fill(x => 42)\n// [[42,42,42], [42,42,42], [42,42,42]]"
        ],
        "longname": "Matrix#fill",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12498,
                12583
            ],
            "filename": "matrix.js",
            "lineno": 492,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000676",
                "name": "Matrix.prototype.fill",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "fill",
        "longname": "Matrix#fill",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#zeros\n * @desc Fill up an empty matrix with zeros\n * @returns {Matrix}\n *\n * @example\n *\n * const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).zeros()\n * // [[0,0,0], [0,0,0], [0,0,0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 496,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "zeros",
        "description": "Fill up an empty matrix with zeros",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).zeros()\n// [[0,0,0], [0,0,0], [0,0,0]]"
        ],
        "longname": "Matrix#zeros",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12819,
                12897
            ],
            "filename": "matrix.js",
            "lineno": 508,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000702",
                "name": "Matrix.prototype.zeros",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "zeros",
        "longname": "Matrix#zeros",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.zeros\n * @desc Fill up an empty matrix with zeros\n * @param {Number} rows - Defines the rows of the matrix\n * @param {Number} cols - Defines the columns of the matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.zeros(3, 3)\n * // [[0,0,0], [0,0,0], [0,0,0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 512,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "zeros",
        "description": "Fill up an empty matrix with zeros",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the rows of the matrix",
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the columns of the matrix",
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.zeros(3, 3)\n// [[0,0,0], [0,0,0], [0,0,0]]"
        ],
        "longname": "Matrix.zeros",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13219,
                13327
            ],
            "filename": "matrix.js",
            "lineno": 525,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000723",
                "name": "Matrix.zeros",
                "type": "FunctionExpression",
                "paramnames": [
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "m": "Matrix.zeros~m",
                "": null
            }
        },
        "undocumented": true,
        "name": "zeros",
        "longname": "Matrix.zeros",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13266,
                13290
            ],
            "filename": "matrix.js",
            "lineno": 526,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000732",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix.zeros~m",
        "kind": "constant",
        "memberof": "Matrix.zeros",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n\n * @function Matrix#ones\n * @desc Fill up an empty matrix with ones\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).ones()\n * // [[1,1,1], [1,1,1], [1,1,1]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 530,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "ones",
        "description": "Fill up an empty matrix with ones",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1,2,3], [3,2,1], [4,5,6]]).ones()\n// [[1,1,1], [1,1,1], [1,1,1]]"
        ],
        "longname": "Matrix#ones",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13558,
                13635
            ],
            "filename": "matrix.js",
            "lineno": 542,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000751",
                "name": "Matrix.prototype.ones",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "ones",
        "longname": "Matrix#ones",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.ones\n * @desc Fill up an empty matrix with ones\n * @param {Number} rows - Defines the rows of the matrix\n * @param {Number} cols - Defines the columns of the matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.ones(1, 1)\n * // [[1,1,1], [1,1,1], [1,1,1]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 546,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "ones",
        "description": "Fill up an empty matrix with ones",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the rows of the matrix",
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the columns of the matrix",
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.ones(1, 1)\n// [[1,1,1], [1,1,1], [1,1,1]]"
        ],
        "longname": "Matrix.ones",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13954,
                14061
            ],
            "filename": "matrix.js",
            "lineno": 559,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000772",
                "name": "Matrix.ones",
                "type": "FunctionExpression",
                "paramnames": [
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "m": "Matrix.ones~m",
                "": null
            }
        },
        "undocumented": true,
        "name": "ones",
        "longname": "Matrix.ones",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14000,
                14024
            ],
            "filename": "matrix.js",
            "lineno": 560,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000781",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix.ones~m",
        "kind": "constant",
        "memberof": "Matrix.ones",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#random\n * @desc Fill up an empty matrix with random values\n * @param {Function} [f = e => Math.random() * 2 - 1] - Function producing random values, can be any type of value\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 564,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "random",
        "description": "Fill up an empty matrix with random values",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "defaultvalue": "e => Math.random() * 2 - 1",
                "description": "Function producing random values, can be any type of value",
                "name": "f"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#random",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14306,
                14410
            ],
            "filename": "matrix.js",
            "lineno": 571,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000800",
                "name": "Matrix.prototype.random",
                "type": "FunctionExpression",
                "paramnames": [
                    "f"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "random",
        "longname": "Matrix#random",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.random\n * @desc Fill up an empty matrix with random numbers\n * @param {Function} f - Function which returns random values. Default random values are between -1 and 1\n * @param {Number} rows - Defines the rows of the matrix\n * @param {Number} cols - Defines the columns of the matrix\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 575,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "random",
        "description": "Fill up an empty matrix with random numbers",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function which returns random values. Default random values are between -1 and 1",
                "name": "f"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the rows of the matrix",
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Defines the columns of the matrix",
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.random",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14764,
                14902
            ],
            "filename": "matrix.js",
            "lineno": 584,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000831",
                "name": "Matrix.random",
                "type": "FunctionExpression",
                "paramnames": [
                    "f",
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "": null,
                "m": "Matrix.random~m"
            }
        },
        "undocumented": true,
        "name": "random",
        "longname": "Matrix.random",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14846,
                14870
            ],
            "filename": "matrix.js",
            "lineno": 585,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000852",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix.random~m",
        "kind": "constant",
        "memberof": "Matrix.random",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#toArray\n * @desc Returns the array from the matrix\n * @returns {Array}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 589,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "toArray",
        "description": "Returns the array from the matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "Matrix#toArray",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15023,
                15119
            ],
            "filename": "matrix.js",
            "lineno": 595,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000869",
                "name": "Matrix.prototype.toArray",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toArray",
        "longname": "Matrix#toArray",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#clone\n * @desc Returns a clone of the matrix\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 599,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "clone",
        "description": "Returns a clone of the matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#clone",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15235,
                15362
            ],
            "filename": "matrix.js",
            "lineno": 605,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000894",
                "name": "Matrix.prototype.clone",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "M": "Matrix#clone~M"
            }
        },
        "undocumented": true,
        "name": "clone",
        "longname": "Matrix#clone",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15282,
                15316
            ],
            "filename": "matrix.js",
            "lineno": 606,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000903",
                "name": "M",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "M",
        "longname": "Matrix#clone~M",
        "kind": "constant",
        "memberof": "Matrix#clone",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#fromArray\n * @desc Returns a Matrix from an array\n * @returns {Array}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 611,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "fromArray",
        "description": "Returns a Matrix from an array",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "Matrix#fromArray",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15482,
                15577
            ],
            "filename": "matrix.js",
            "lineno": 617,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000923",
                "name": "Matrix.fromArray",
                "type": "FunctionExpression",
                "paramnames": [
                    "arr"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "fromArray",
        "longname": "Matrix.fromArray",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#transpose\n * @desc Returns a transposed Matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([-1, 2], [3, 4], [-8, 2])\n * const b = A.transpose().toArray()\n * // returns [[-1, 3,-8], [2, 4, 2]]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 621,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "transpose",
        "description": "Returns a transposed Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([-1, 2], [3, 4], [-8, 2])\nconst b = A.transpose().toArray()\n// returns [[-1, 3,-8], [2, 4, 2]]"
        ],
        "longname": "Matrix#transpose",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15834,
                15932
            ],
            "filename": "matrix.js",
            "lineno": 632,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000949",
                "name": "Matrix.prototype.transpose",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "transpose",
        "longname": "Matrix#transpose",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.transpose\n * @desc Returns a transposed Matrix\n * @param {Matrix|Array} M - A Matrix or a matrix array\n * @returns {Matrix}\n * @example\n *\n * const a = [-1, 2], [3, 4], [-8, 2]\n * const b = Matrix.transpose(a).toArray()\n * // returns [[-1, 3,-8], [2, 4, 2]]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 636,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "transpose",
        "description": "Returns a transposed Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "A Matrix or a matrix array",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const a = [-1, 2], [3, 4], [-8, 2]\nconst b = Matrix.transpose(a).toArray()\n// returns [[-1, 3,-8], [2, 4, 2]]"
        ],
        "longname": "Matrix.transpose",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16240,
                16309
            ],
            "filename": "matrix.js",
            "lineno": 648,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000970",
                "name": "Matrix.transpose",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "transpose",
        "longname": "Matrix.transpose",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#add\n * @desc Adds a number or a Matrix to this\n * @param {Matrix|Number} M - Add a Matrix or a number\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.add(1) // [[6, 5]]\n * const B = Matrix.of([[5, 5]])\n * B.add(B) // [[10, 10]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 652,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "add",
        "description": "Adds a number or a Matrix to this",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Number"
                    ]
                },
                "description": "Add a Matrix or a number",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.add(1) // [[6, 5]]\nconst B = Matrix.of([[5, 5]])\nB.add(B) // [[10, 10]]"
        ],
        "longname": "Matrix#add",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16616,
                16962
            ],
            "filename": "matrix.js",
            "lineno": 666,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100000987",
                "name": "Matrix.prototype.add",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "add",
        "longname": "Matrix#add",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#subtract\n * @desc Subtracts a number or a Matrix from this\n * @param {Matrix|Number} M - Subtract a Matrix or a number\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.subtract(1) // [[4, 2]]\n * const B = Matrix.of([[5, 5]])\n * B.subtract(B) // [[0, 0]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 677,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "subtract",
        "description": "Subtracts a number or a Matrix from this",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Number"
                    ]
                },
                "description": "Subtract a Matrix or a number",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.subtract(1) // [[4, 2]]\nconst B = Matrix.of([[5, 5]])\nB.subtract(B) // [[0, 0]]"
        ],
        "longname": "Matrix#subtract",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17294,
                17650
            ],
            "filename": "matrix.js",
            "lineno": 691,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001064",
                "name": "Matrix.prototype.subtract",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "subtract",
        "longname": "Matrix#subtract",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#multiply\n * @desc Mutliply a scalar or a matrix with a matrix. Throws an error if the multiplication is not possible.\n * @param {Matrix|Number} M - A Matrix M or a Number to multiply a Matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.multiply(2) // [[10, 8]]\n * const B = Matrix.of([[5, 5]])\n * B.multiply(B) // [[25, 25]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 702,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "multiply",
        "description": "Mutliply a scalar or a matrix with a matrix. Throws an error if the multiplication is not possible.",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Number"
                    ]
                },
                "description": "A Matrix M or a Number to multiply a Matrix",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.multiply(2) // [[10, 8]]\nconst B = Matrix.of([[5, 5]])\nB.multiply(B) // [[25, 25]]"
        ],
        "longname": "Matrix#multiply",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18058,
                18504
            ],
            "filename": "matrix.js",
            "lineno": 716,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001141",
                "name": "Matrix.prototype.multiply",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "multiply",
        "longname": "Matrix#multiply",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#additiveinverse\n * @desc Function that returns the matrix obtained by changing the sign of every matrix element. The additive inverse of matrix A is written –A.\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5,-5], [-4, 4]])\n * const minusA = A.additiveinverse()\n * // [[-5, 5], [4, -4]]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 728,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "additiveinverse",
        "description": "Function that returns the matrix obtained by changing the sign of every matrix element. The additive inverse of matrix A is written –A.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5,-5], [-4, 4]])\nconst minusA = A.additiveinverse()\n// [[-5, 5], [4, -4]]"
        ],
        "longname": "Matrix#additiveinverse",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18856,
                18944
            ],
            "filename": "matrix.js",
            "lineno": 739,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001224",
                "name": "Matrix.prototype.additiveinverse",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "additiveinverse",
        "longname": "Matrix#additiveinverse",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#hadamard\n * @desc Hadamar is an alias of the multiply function\n * @see Matrix.multiply\n * @param {Matrix|Number} M - A Matrix M or a Number to multiply a Matrix\n * @returns {Matrix}\n * @see Matrix.hadamard\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.hadamard(2) // [[10, 8]]\n * const B = Matrix.of([[5, 5]])\n * B.hadamard(B) // [[25, 25]]\n\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 743,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "hadamard",
        "description": "Hadamar is an alias of the multiply function",
        "see": [
            "Matrix.multiply",
            "Matrix.hadamard"
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Number"
                    ]
                },
                "description": "A Matrix M or a Number to multiply a Matrix",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.hadamard(2) // [[10, 8]]\nconst B = Matrix.of([[5, 5]])\nB.hadamard(B) // [[25, 25]]"
        ],
        "longname": "Matrix#hadamard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19343,
                19424
            ],
            "filename": "matrix.js",
            "lineno": 759,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001244",
                "name": "Matrix.prototype.hadamard",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "hadamard",
        "longname": "Matrix#hadamard",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#lu\n * @desc Calculates LU decomposition of the Matrix\n * @returns {Matrix[]}\n * @example\n *\n * const result = [[3, -7, -2, 2], [-3, 5, 1, 0], [6, -4, 0, -5], [-9, 5, -5, 12]]\n * const A = Matrix.fromArray(result)\n * const lu = A.lu()\n * // L.__value = [ [ 1, 0, 0, 0 ], [ -1, 1, 0, 0 ], [ 2, -5, 1, 0 ], [ -3, 8, 3, 1 ] ]\n * // U.__value =  [ [ 3, -7, -2, 2 ], [ 0, -2, -1, 2 ], [ 0, 0, -1, 1 ], [ 0, 0, 0, -1 ] ]\n * Matrix.dot(lu[0], lu[1]) // returns clone of A\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 763,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "lu",
        "description": "Calculates LU decomposition of the Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Matrix>"
                    ]
                }
            }
        ],
        "examples": [
            "const result = [[3, -7, -2, 2], [-3, 5, 1, 0], [6, -4, 0, -5], [-9, 5, -5, 12]]\nconst A = Matrix.fromArray(result)\nconst lu = A.lu()\n// L.__value = [ [ 1, 0, 0, 0 ], [ -1, 1, 0, 0 ], [ 2, -5, 1, 0 ], [ -3, 8, 3, 1 ] ]\n// U.__value =  [ [ 3, -7, -2, 2 ], [ 0, -2, -1, 2 ], [ 0, 0, -1, 1 ], [ 0, 0, 0, -1 ] ]\nMatrix.dot(lu[0], lu[1]) // returns clone of A"
        ],
        "longname": "Matrix#lu",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19941,
                20578
            ],
            "filename": "matrix.js",
            "lineno": 778,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001264",
                "name": "Matrix.prototype.lu",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "n": "Matrix#lu~n",
                "tol": "Matrix#lu~tol",
                "A": "Matrix#lu~A",
                "L": "Matrix#lu~L",
                "U": "Matrix#lu~U",
                "k": "Matrix#lu~k",
                "L.__value[undefined][undefined]": "Matrix#lu~L.__value[undefined][undefined]",
                "i": "Matrix#lu~i",
                "j": "Matrix#lu~j",
                "A.__value[undefined][undefined]": "Matrix#lu~A.__value[undefined][undefined]",
                "l": "Matrix#lu~l",
                "U.__value[undefined][undefined]": "Matrix#lu~U.__value[undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "lu",
        "longname": "Matrix#lu",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19985,
                20003
            ],
            "filename": "matrix.js",
            "lineno": 779,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001273",
                "name": "n",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "Matrix#lu~n",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20012,
                20022
            ],
            "filename": "matrix.js",
            "lineno": 780,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001280",
                "name": "tol",
                "type": "Literal",
                "value": 0.000001
            }
        },
        "undocumented": true,
        "name": "tol",
        "longname": "Matrix#lu~tol",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20031,
                20047
            ],
            "filename": "matrix.js",
            "lineno": 781,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001284",
                "name": "A",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "A",
        "longname": "Matrix#lu~A",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20056,
                20072
            ],
            "filename": "matrix.js",
            "lineno": 782,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001291",
                "name": "L",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "L",
        "longname": "Matrix#lu~L",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20081,
                20097
            ],
            "filename": "matrix.js",
            "lineno": 783,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001298",
                "name": "U",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "U",
        "longname": "Matrix#lu~U",
        "kind": "constant",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20110,
                20115
            ],
            "filename": "matrix.js",
            "lineno": 785,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001306",
                "name": "k",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "k",
        "longname": "Matrix#lu~k",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20229,
                20248
            ],
            "filename": "matrix.js",
            "lineno": 787,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001334",
                "name": "L.__value[undefined][undefined]",
                "type": "Literal",
                "funcscope": "Matrix#lu",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~L.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~L",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20262,
                20271
            ],
            "filename": "matrix.js",
            "lineno": 788,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001345",
                "name": "i",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#lu~i",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20293,
                20344
            ],
            "filename": "matrix.js",
            "lineno": 789,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001357",
                "name": "L.__value[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#lu",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~L.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~L",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20360,
                20369
            ],
            "filename": "matrix.js",
            "lineno": 790,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001382",
                "name": "j",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#lu~j",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20393,
                20462
            ],
            "filename": "matrix.js",
            "lineno": 791,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001394",
                "name": "A.__value[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#lu",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~A.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~A",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20490,
                20495
            ],
            "filename": "matrix.js",
            "lineno": 794,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001427",
                "name": "l",
                "type": "Identifier",
                "value": "k"
            }
        },
        "undocumented": true,
        "name": "l",
        "longname": "Matrix#lu~l",
        "kind": "member",
        "memberof": "Matrix#lu",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20517,
                20550
            ],
            "filename": "matrix.js",
            "lineno": 795,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001437",
                "name": "U.__value[undefined][undefined]",
                "type": "MemberExpression",
                "funcscope": "Matrix#lu",
                "value": "A.__value[undefined][undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#lu~U.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#lu~U",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#rref\n * @desc Returns a Matrix containing the row reduced echelon form\n * @returns {Matrix}\n * @example\n *\n * var A = Matrix.of([[-1, 1], [-1, 0], [0, -1], [-1, -2]])\n * A.rref() //  [ [ 1, 0 ], [ -0, 1 ], [ 0, 0 ], [ 0, 0 ] ]\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 801,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "rref",
        "description": "Returns a Matrix containing the row reduced echelon form",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "var A = Matrix.of([[-1, 1], [-1, 0], [0, -1], [-1, -2]])\nA.rref() //  [ [ 1, 0 ], [ -0, 1 ], [ 0, 0 ], [ 0, 0 ] ]"
        ],
        "longname": "Matrix#rref",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20855,
                21841
            ],
            "filename": "matrix.js",
            "lineno": 811,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001457",
                "name": "Matrix.prototype.rref",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "lead": "Matrix#rref~lead",
                "resultMatrix": "Matrix#rref~resultMatrix",
                "r": "Matrix#rref~r",
                "i": "Matrix#rref~i",
                "tmp": "Matrix#rref~tmp",
                "resultMatrix.__value[undefined]": "Matrix#rref~resultMatrix.__value[undefined]",
                "val": "Matrix#rref~val",
                "j": "Matrix#rref~j",
                "resultMatrix.__value[undefined][undefined]": "Matrix#rref~resultMatrix.__value[undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "rref",
        "longname": "Matrix#rref",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20899,
                20907
            ],
            "filename": "matrix.js",
            "lineno": 812,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001466",
                "name": "lead",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "lead",
        "longname": "Matrix#rref~lead",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20916,
                20943
            ],
            "filename": "matrix.js",
            "lineno": 813,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001470",
                "name": "resultMatrix",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "resultMatrix",
        "longname": "Matrix#rref~resultMatrix",
        "kind": "constant",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20956,
                20961
            ],
            "filename": "matrix.js",
            "lineno": 815,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001478",
                "name": "r",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "r",
        "longname": "Matrix#rref~r",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21064,
                21069
            ],
            "filename": "matrix.js",
            "lineno": 819,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001501",
                "name": "i",
                "type": "Identifier",
                "value": "r"
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rref~i",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21172,
                21177
            ],
            "filename": "matrix.js",
            "lineno": 823,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001527",
                "name": "i",
                "type": "Identifier",
                "funcscope": "Matrix#rref",
                "value": "r",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rref~i",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21295,
                21324
            ],
            "filename": "matrix.js",
            "lineno": 831,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001544",
                "name": "tmp",
                "type": "MemberExpression",
                "value": "resultMatrix.__value[undefined]"
            }
        },
        "undocumented": true,
        "name": "tmp",
        "longname": "Matrix#rref~tmp",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21329,
                21378
            ],
            "filename": "matrix.js",
            "lineno": 832,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001552",
                "name": "resultMatrix.__value[undefined]",
                "type": "MemberExpression",
                "funcscope": "Matrix#rref",
                "value": "resultMatrix.__value[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21383,
                21412
            ],
            "filename": "matrix.js",
            "lineno": 833,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001564",
                "name": "resultMatrix.__value[undefined]",
                "type": "Identifier",
                "funcscope": "Matrix#rref",
                "value": "tmp",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21422,
                21457
            ],
            "filename": "matrix.js",
            "lineno": 835,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001572",
                "name": "val",
                "type": "MemberExpression",
                "value": "resultMatrix.__value[undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "Matrix#rref~val",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21471,
                21476
            ],
            "filename": "matrix.js",
            "lineno": 836,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001583",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#rref~j",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21511,
                21544
            ],
            "filename": "matrix.js",
            "lineno": 837,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001596",
                "name": "resultMatrix.__value[undefined][undefined]",
                "type": "Identifier",
                "funcscope": "Matrix#rref",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21565,
                21570
            ],
            "filename": "matrix.js",
            "lineno": 840,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001607",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rref~i",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21633,
                21668
            ],
            "filename": "matrix.js",
            "lineno": 842,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001625",
                "name": "val",
                "type": "MemberExpression",
                "funcscope": "Matrix#rref",
                "value": "resultMatrix.__value[undefined][undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "Matrix#rref~val",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21684,
                21689
            ],
            "filename": "matrix.js",
            "lineno": 843,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001636",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#rref~j",
        "kind": "member",
        "memberof": "Matrix#rref",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21726,
                21788
            ],
            "filename": "matrix.js",
            "lineno": 844,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001649",
                "name": "resultMatrix.__value[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#rref",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "__value[undefined][undefined]",
        "longname": "Matrix#rref~resultMatrix.__value[undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#rref~resultMatrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#solve\n * @desc Returns the solution for a system of linear equations\n * @param {Array} b - The numbers for which to solve the system of linear equations\n * @returns {Array}\n * @example\n *\n * // Solve xA = b\n * // 5x + y  = 7\n * // 3x - 4y = 18\n * // Solution for x and y:\n * // x = 2\n * // y = -3\n *\n * const A = Matrix.of([[5, 1], [3, -4]])\n * const solveA = A.solve([7, 18]) // [2, -3]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 852,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "solve",
        "description": "Returns the solution for a system of linear equations",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The numbers for which to solve the system of linear equations",
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "// Solve xA = b\n// 5x + y  = 7\n// 3x - 4y = 18\n// Solution for x and y:\n// x = 2\n// y = -3\n\nconst A = Matrix.of([[5, 1], [3, -4]])\nconst solveA = A.solve([7, 18]) // [2, -3]"
        ],
        "longname": "Matrix#solve",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22282,
                22864
            ],
            "filename": "matrix.js",
            "lineno": 871,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001672",
                "name": "Matrix.prototype.solve",
                "type": "FunctionExpression",
                "paramnames": [
                    "b"
                ]
            },
            "vars": {
                "LU": "Matrix#solve~LU",
                "L": "Matrix#solve~L",
                "U": "Matrix#solve~U",
                "n": "Matrix#solve~n"
            }
        },
        "undocumented": true,
        "name": "solve",
        "longname": "Matrix#solve",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22330,
                22344
            ],
            "filename": "matrix.js",
            "lineno": 872,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001682",
                "name": "LU",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "LU",
        "longname": "Matrix#solve~LU",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22353,
                22362
            ],
            "filename": "matrix.js",
            "lineno": 873,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001689",
                "name": "L",
                "type": "MemberExpression",
                "value": "LU[0]"
            }
        },
        "undocumented": true,
        "name": "L",
        "longname": "Matrix#solve~L",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22371,
                22380
            ],
            "filename": "matrix.js",
            "lineno": 874,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001695",
                "name": "U",
                "type": "MemberExpression",
                "value": "LU[1]"
            }
        },
        "undocumented": true,
        "name": "U",
        "longname": "Matrix#solve~U",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22389,
                22407
            ],
            "filename": "matrix.js",
            "lineno": 875,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001701",
                "name": "n",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "Matrix#solve~n",
        "kind": "constant",
        "memberof": "Matrix#solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#inverse\n * @desc Returns the inverse of a Matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[1, 1], [2, 4]]).inverse()\n * // [ [ 2, -0.5 ], [ -1, 0.5 ] ]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 899,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "inverse",
        "description": "Returns the inverse of a Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[1, 1], [2, 4]]).inverse()\n// [ [ 2, -0.5 ], [ -1, 0.5 ] ]"
        ],
        "longname": "Matrix#inverse",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23088,
                23397
            ],
            "filename": "matrix.js",
            "lineno": 910,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001715",
                "name": "Matrix.prototype.inverse",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "A": "Matrix#inverse~A",
                "I": "Matrix#inverse~I",
                "Inv": "Matrix#inverse~Inv",
                "result": "Matrix#inverse~result",
                "": null
            }
        },
        "undocumented": true,
        "name": "inverse",
        "longname": "Matrix#inverse",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23137,
                23153
            ],
            "filename": "matrix.js",
            "lineno": 911,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001724",
                "name": "A",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "A",
        "longname": "Matrix#inverse~A",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23162,
                23178
            ],
            "filename": "matrix.js",
            "lineno": 912,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001731",
                "name": "I",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "I",
        "longname": "Matrix#inverse~I",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23187,
                23211
            ],
            "filename": "matrix.js",
            "lineno": 913,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001738",
                "name": "Inv",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Inv",
        "longname": "Matrix#inverse~Inv",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23221,
                23368
            ],
            "filename": "matrix.js",
            "lineno": 915,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001749",
                "name": "result",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "Matrix#inverse~result",
        "kind": "constant",
        "memberof": "Matrix#inverse",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23281,
                23300
            ],
            "filename": "matrix.js",
            "lineno": 916,
            "columnno": 10,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001763",
                "name": "half",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "half",
        "longname": "<anonymous>~half",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#rank\n * @desc Number indicating the maximum number of linearly independent columns.\n * @returns {Number}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 923,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "rank",
        "description": "Number indicating the maximum number of linearly independent columns.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "longname": "Matrix#rank",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23552,
                23733
            ],
            "filename": "matrix.js",
            "lineno": 929,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001793",
                "name": "Matrix.prototype.rank",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "rref": "Matrix#rank~rref",
                "result": "Matrix#rank~result",
                "i": "Matrix#rank~i"
            }
        },
        "undocumented": true,
        "name": "rank",
        "longname": "Matrix#rank",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23598,
                23616
            ],
            "filename": "matrix.js",
            "lineno": 930,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001802",
                "name": "rref",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "rref",
        "longname": "Matrix#rank~rref",
        "kind": "constant",
        "memberof": "Matrix#rank",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23623,
                23633
            ],
            "filename": "matrix.js",
            "lineno": 931,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001809",
                "name": "result",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "Matrix#rank~result",
        "kind": "member",
        "memberof": "Matrix#rank",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23645,
                23650
            ],
            "filename": "matrix.js",
            "lineno": 932,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001814",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#rank~i",
        "kind": "member",
        "memberof": "Matrix#rank",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23683,
                23711
            ],
            "filename": "matrix.js",
            "lineno": 933,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001827",
                "name": "result",
                "type": "MemberExpression",
                "funcscope": "Matrix#rank",
                "value": "rref.__value[undefined][undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "Matrix#rank~result",
        "kind": "member",
        "memberof": "Matrix#rank",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#dimension\n * @desc Number indicating the maximum number of linearly independent columns.\n * @see Matrix.rank\n * @returns {Number}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 938,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "dimension",
        "description": "Number indicating the maximum number of linearly independent columns.",
        "see": [
            "Matrix.rank"
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "longname": "Matrix#dimension",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23913,
                23978
            ],
            "filename": "matrix.js",
            "lineno": 945,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001839",
                "name": "Matrix.prototype.dimension",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dimension",
        "longname": "Matrix#dimension",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#diag\n * @desc Returns an array containing the values on the diagonal\n * @returns {Array}\n * @example\n *\n * const diag1 = Matrix.ones(3, 3).diag()\n * // [1, 1, 1]\n *\n * const diag0 = Matrix.zeros(5, 5).diag()\n * // [0, 0, 0, 0, 0]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 949,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "diag",
        "description": "Returns an array containing the values on the diagonal",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.ones(3, 3).diag()\n// [1, 1, 1]\n\nconst diag0 = Matrix.zeros(5, 5).diag()\n// [0, 0, 0, 0, 0]"
        ],
        "longname": "Matrix#diag",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24261,
                24386
            ],
            "filename": "matrix.js",
            "lineno": 963,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001853",
                "name": "Matrix.prototype.diag",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "diag",
        "longname": "Matrix#diag",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.diag\n * @desc Returns an array containing the values on the diagonal\n * @param {Matrix|Array} M - Matrix from which to return the diagonal\n * @returns {Array}\n * @example\n *\n * const diag1 = Matrix.diag([[2, 1], [1, 5]])\n * // [2, 5]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 969,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "diag",
        "description": "Returns an array containing the values on the diagonal",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix from which to return the diagonal",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.diag([[2, 1], [1, 5]])\n// [2, 5]"
        ],
        "longname": "Matrix.diag",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24673,
                24732
            ],
            "filename": "matrix.js",
            "lineno": 981,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001884",
                "name": "Matrix.diag",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "diag",
        "longname": "Matrix.diag",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#diagproduct\n * @desc Returns the product of the values on the diagonal\n * @returns {Number}\n * @example\n *\n * const diag1 = Matrix.ones(3, 3).diagproduct()\n * // 1\n *\n * const diag0 = Matrix.zeros(5, 5).diagproduct()\n * // 0\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 985,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "diagproduct",
        "description": "Returns the product of the values on the diagonal",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.ones(3, 3).diagproduct()\n// 1\n\nconst diag0 = Matrix.zeros(5, 5).diagproduct()\n// 0"
        ],
        "longname": "Matrix#diagproduct",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25010,
                25144
            ],
            "filename": "matrix.js",
            "lineno": 999,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001901",
                "name": "Matrix.prototype.diagproduct",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "diagproduct",
        "longname": "Matrix#diagproduct",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25092,
                25105
            ],
            "filename": "matrix.js",
            "lineno": 1001,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001920",
                "name": "acc",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "x[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.diagproduct\n * @desc Returns the product of the values on the diagonal\n * @param {Matrix|Array} M - Matrix from which to return the diagonal\n * @returns {Number}\n * @example\n *\n * const diag1 = Matrix.diagproduct([[2, 1], [1, 5]])\n * // 10\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1006,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "diagproduct",
        "description": "Returns the product of the values on the diagonal",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix from which to return the diagonal",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.diagproduct([[2, 1], [1, 5]])\n// 10"
        ],
        "longname": "Matrix.diagproduct",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25437,
                25510
            ],
            "filename": "matrix.js",
            "lineno": 1018,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001932",
                "name": "Matrix.diagproduct",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "diagproduct",
        "longname": "Matrix.diagproduct",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#sum\n * @desc Returns the sum of the values in the Matrix\n * @returns {Number}\n * @example\n *\n * const diag1 = Matrix.ones(3, 3).sum()\n * // 9\n *\n * const diag0 = Matrix.zeros(5, 5).sum()\n * // 0\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1022,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "sum",
        "description": "Returns the sum of the values in the Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.ones(3, 3).sum()\n// 9\n\nconst diag0 = Matrix.zeros(5, 5).sum()\n// 0"
        ],
        "longname": "Matrix#sum",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25758,
                25912
            ],
            "filename": "matrix.js",
            "lineno": 1036,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001949",
                "name": "Matrix.prototype.sum",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "sum",
        "longname": "Matrix#sum",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25827,
                25873
            ],
            "filename": "matrix.js",
            "lineno": 1038,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001967",
                "name": "acc",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.sum\n * @desc Returns the sum of the values in the Matrix\n * @param {Matrix|Array} M - Matrix from which to return the diagonal\n * @returns {Number}\n * @example\n *\n * const diag1 = Matrix.sum([[2, 1], [1, 5]])\n * // 9\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1043,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "sum",
        "description": "Returns the sum of the values in the Matrix",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix from which to return the diagonal",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "examples": [
            "const diag1 = Matrix.sum([[2, 1], [1, 5]])\n// 9"
        ],
        "longname": "Matrix.sum",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26182,
                26239
            ],
            "filename": "matrix.js",
            "lineno": 1055,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100001988",
                "name": "Matrix.sum",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            }
        },
        "undocumented": true,
        "name": "sum",
        "longname": "Matrix.sum",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#kronecker\n * @desc The Kronecker product is an operation on two matrices of arbitrary size resulting in a block matrix.\n * @param {Matrix} M - The right side Matrix of the product (this ⊗ M)\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1059,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "kronecker",
        "description": "The Kronecker product is an operation on two matrices of arbitrary size resulting in a block matrix.",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The right side Matrix of the product (this ⊗ M)",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix#kronecker",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26501,
                27004
            ],
            "filename": "matrix.js",
            "lineno": 1066,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002005",
                "name": "Matrix.prototype.kronecker",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "m": "Matrix#kronecker~m",
                "n": "Matrix#kronecker~n",
                "p": "Matrix#kronecker~p",
                "q": "Matrix#kronecker~q",
                "left": "Matrix#kronecker~left",
                "right": "Matrix#kronecker~right",
                "frame": "Matrix#kronecker~frame",
                "i": "Matrix#kronecker~i",
                "j": "Matrix#kronecker~j",
                "k": "Matrix#kronecker~k",
                "l": "Matrix#kronecker~l",
                "frame[undefined][undefined]": "Matrix#kronecker~frame.undefined][undefined]"
            }
        },
        "undocumented": true,
        "name": "kronecker",
        "longname": "Matrix#kronecker",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26553,
                26571
            ],
            "filename": "matrix.js",
            "lineno": 1067,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002015",
                "name": "m",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "m",
        "longname": "Matrix#kronecker~m",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26580,
                26598
            ],
            "filename": "matrix.js",
            "lineno": 1068,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002022",
                "name": "n",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "n",
        "longname": "Matrix#kronecker~n",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26607,
                26622
            ],
            "filename": "matrix.js",
            "lineno": 1069,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002029",
                "name": "p",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "p",
        "longname": "Matrix#kronecker~p",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26631,
                26646
            ],
            "filename": "matrix.js",
            "lineno": 1070,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002036",
                "name": "q",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "q",
        "longname": "Matrix#kronecker~q",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26656,
                26675
            ],
            "filename": "matrix.js",
            "lineno": 1072,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002043",
                "name": "left",
                "type": "MemberExpression",
                "value": "this.__value"
            }
        },
        "undocumented": true,
        "name": "left",
        "longname": "Matrix#kronecker~left",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26684,
                26701
            ],
            "filename": "matrix.js",
            "lineno": 1073,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002049",
                "name": "right",
                "type": "MemberExpression",
                "value": "M.__value"
            }
        },
        "undocumented": true,
        "name": "right",
        "longname": "Matrix#kronecker~right",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26711,
                26741
            ],
            "filename": "matrix.js",
            "lineno": 1075,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002055",
                "name": "frame",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "frame",
        "longname": "Matrix#kronecker~frame",
        "kind": "constant",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26754,
                26759
            ],
            "filename": "matrix.js",
            "lineno": 1077,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002067",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "Matrix#kronecker~i",
        "kind": "member",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26788,
                26793
            ],
            "filename": "matrix.js",
            "lineno": 1078,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002078",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "Matrix#kronecker~j",
        "kind": "member",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26824,
                26829
            ],
            "filename": "matrix.js",
            "lineno": 1079,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002089",
                "name": "k",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "k",
        "longname": "Matrix#kronecker~k",
        "kind": "member",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26862,
                26867
            ],
            "filename": "matrix.js",
            "lineno": 1080,
            "columnno": 17,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002100",
                "name": "l",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "l",
        "longname": "Matrix#kronecker~l",
        "kind": "member",
        "memberof": "Matrix#kronecker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26893,
                26947
            ],
            "filename": "matrix.js",
            "lineno": 1081,
            "columnno": 10,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002110",
                "name": "frame[undefined][undefined]",
                "type": "BinaryExpression",
                "funcscope": "Matrix#kronecker",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined][undefined]",
        "longname": "Matrix#kronecker~frame.undefined][undefined]",
        "kind": "member",
        "memberof": "Matrix#kronecker~frame",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.kronecker\n * @desc The Kronecker product is an operation on two matrices of arbitrary size resulting in a block matrix.\n * @param {Matrix} A - The left side Matrix of the product (A ⊗ B)\n * @param {Matrix} B - The right side Matrix of the product (A ⊗ B)\n * @returns {Matrix}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1090,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "kronecker",
        "description": "The Kronecker product is an operation on two matrices of arbitrary size resulting in a block matrix.",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The left side Matrix of the product (A ⊗ B)",
                "name": "A"
            },
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "The right side Matrix of the product (A ⊗ B)",
                "name": "B"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "Matrix.kronecker",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27330,
                27403
            ],
            "filename": "matrix.js",
            "lineno": 1098,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002142",
                "name": "Matrix.kronecker",
                "type": "FunctionExpression",
                "paramnames": [
                    "A",
                    "B"
                ]
            }
        },
        "undocumented": true,
        "name": "kronecker",
        "longname": "Matrix.kronecker",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#determinant\n * @desc Calculates the determinant of a square Matrix using Sarrus' rule or LU decomposition\n * @returns {Number}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1102,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "determinant",
        "description": "Calculates the determinant of a square Matrix using Sarrus' rule or LU decomposition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "longname": "Matrix#determinant",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27580,
                28097
            ],
            "filename": "matrix.js",
            "lineno": 1108,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002161",
                "name": "Matrix.prototype.determinant",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "a": "Matrix#determinant~a",
                "b": "Matrix#determinant~b",
                "c": "Matrix#determinant~c",
                "d": "Matrix#determinant~d",
                "lu": "Matrix#determinant~lu",
                "detA": "Matrix#determinant~detA",
                "detB": "Matrix#determinant~detB"
            }
        },
        "undocumented": true,
        "name": "determinant",
        "longname": "Matrix#determinant",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27694,
                27716
            ],
            "filename": "matrix.js",
            "lineno": 1111,
            "columnno": 12,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002184",
                "name": "a",
                "type": "MemberExpression",
                "value": "this.__value[0][0]"
            }
        },
        "undocumented": true,
        "name": "a",
        "longname": "Matrix#determinant~a",
        "kind": "constant",
        "memberof": "Matrix#determinant",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27729,
                27751
            ],
            "filename": "matrix.js",
            "lineno": 1112,
            "columnno": 12,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002194",
                "name": "b",
                "type": "MemberExpression",
                "value": "this.__value[0][1]"
            }
        },
        "undocumented": true,
        "name": "b",
        "longname": "Matrix#determinant~b",
        "kind": "constant",
        "memberof": "Matrix#determinant",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27764,
                27786
            ],
            "filename": "matrix.js",
            "lineno": 1113,
            "columnno": 12,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002204",
                "name": "c",
                "type": "MemberExpression",
                "value": "this.__value[1][0]"
            }
        },
        "undocumented": true,
        "name": "c",
        "longname": "Matrix#determinant~c",
        "kind": "constant",
        "memberof": "Matrix#determinant",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27799,
                27821
            ],
            "filename": "matrix.js",
            "lineno": 1114,
            "columnno": 12,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002214",
                "name": "d",
                "type": "MemberExpression",
                "value": "this.__value[1][1]"
            }
        },
        "undocumented": true,
        "name": "d",
        "longname": "Matrix#determinant~d",
        "kind": "constant",
        "memberof": "Matrix#determinant",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27866,
                27880
            ],
            "filename": "matrix.js",
            "lineno": 1118,
            "columnno": 10,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002232",
                "name": "lu",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "lu",
        "longname": "Matrix#determinant~lu",
        "kind": "constant",
        "memberof": "Matrix#determinant",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27891,
                27925
            ],
            "filename": "matrix.js",
            "lineno": 1119,
            "columnno": 10,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002239",
                "name": "detA",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "detA",
        "longname": "Matrix#determinant~detA",
        "kind": "constant",
        "memberof": "Matrix#determinant",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27936,
                27970
            ],
            "filename": "matrix.js",
            "lineno": 1120,
            "columnno": 10,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002250",
                "name": "detB",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "detB",
        "longname": "Matrix#determinant~detB",
        "kind": "constant",
        "memberof": "Matrix#determinant",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix.determinant\n * @desc Calculates the determinant of a square Matrix using Sarrus' rule or LU decomposition\n * @param {Matrix|Array} A - Matrix as input to calculate the determinant\n * @returns {Number}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1127,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "determinant",
        "description": "Calculates the determinant of a square Matrix using Sarrus' rule or LU decomposition",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Array"
                    ]
                },
                "description": "Matrix as input to calculate the determinant",
                "name": "A"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "longname": "Matrix.determinant",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28348,
                28421
            ],
            "filename": "matrix.js",
            "lineno": 1134,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002270",
                "name": "Matrix.determinant",
                "type": "FunctionExpression",
                "paramnames": [
                    "A"
                ]
            }
        },
        "undocumented": true,
        "name": "determinant",
        "longname": "Matrix.determinant",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "static"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#max\n * @desc Returns the largest number in the Matrix\n * @returns {*}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1138,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "max",
        "description": "Returns the largest number in the Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "longname": "Matrix#max",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28541,
                28635
            ],
            "filename": "matrix.js",
            "lineno": 1144,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002287",
                "name": "Matrix.prototype.max",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "max",
        "longname": "Matrix#max",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#min\n * @desc Returns the smallest number in the Matrix\n * @returns {*}\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1148,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "min",
        "description": "Returns the smallest number in the Matrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "longname": "Matrix#min",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28756,
                28850
            ],
            "filename": "matrix.js",
            "lineno": 1154,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002310",
                "name": "Matrix.prototype.min",
                "type": "FunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "min",
        "longname": "Matrix#min",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "/**\n * @memberOf Matrix\n * @function Matrix#divide\n * @desc Divide a scalar or a matrix by a matrix. Throws an error if the division is not possible.\n * @param {Matrix|Number} M - A Matrix M or a Number to multiply a Matrix\n * @returns {Matrix}\n * @example\n *\n * const A = Matrix.of([[5, 4]])\n * A.divide(2) // [[10, 8]]\n * const B = Matrix.of([[5, 5]])\n * B.multiply(B) // [[25, 25]]\n *\n */",
        "meta": {
            "filename": "matrix.js",
            "lineno": 1158,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {}
        },
        "memberof": "Matrix",
        "kind": "function",
        "name": "divide",
        "description": "Divide a scalar or a matrix by a matrix. Throws an error if the division is not possible.",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix",
                        "Number"
                    ]
                },
                "description": "A Matrix M or a Number to multiply a Matrix",
                "name": "M"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "examples": [
            "const A = Matrix.of([[5, 4]])\nA.divide(2) // [[10, 8]]\nconst B = Matrix.of([[5, 5]])\nB.multiply(B) // [[25, 25]]"
        ],
        "longname": "Matrix#divide",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29244,
                29674
            ],
            "filename": "matrix.js",
            "lineno": 1172,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002333",
                "name": "Matrix.prototype.divide",
                "type": "FunctionExpression",
                "paramnames": [
                    "M"
                ]
            },
            "vars": {
                "mInv": "Matrix#divide~mInv"
            }
        },
        "undocumented": true,
        "name": "divide",
        "longname": "Matrix#divide",
        "kind": "function",
        "memberof": "Matrix",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29581,
                29599
            ],
            "filename": "matrix.js",
            "lineno": 1180,
            "columnno": 10,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002385",
                "name": "mInv",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "mInv",
        "longname": "Matrix#divide~mInv",
        "kind": "constant",
        "memberof": "Matrix#divide",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30219,
                30240
            ],
            "filename": "matrix.js",
            "lineno": 1206,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src",
            "code": {
                "id": "astnode100002406",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71,
                173
            ],
            "filename": "addMatrix.js",
            "lineno": 4,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002418",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71,
                133
            ],
            "filename": "addScalar.js",
            "lineno": 4,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002457",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function concat\n * @desc Helper function concatenating/combining 2 Matrices\n * @param {Matrix} M - Left side of the concat operatior\n * @param {Array} m - right side of the contac operator\n * @param {Number} idx - Index of the row\n * @returns {Array}\n */",
        "meta": {
            "filename": "concat.js",
            "lineno": 4,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "concat",
        "description": "Helper function concatenating/combining 2 Matrices",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "Left side of the concat operatior",
                "name": "M"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "right side of the contac operator",
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Index of the row",
                "name": "idx"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "concat",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                340,
                421
            ],
            "filename": "concat.js",
            "lineno": 12,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002484",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function dot\n * @desc Helper function to generate the dotproduct of 2 Matrices\n * @param {Matrix} B - Right side of hte dot product\n * @param {Array} a - Array representing theleft side of the dot product\n * @returns {Array}\n */",
        "meta": {
            "filename": "dot.js",
            "lineno": 6,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "dot",
        "description": "Helper function to generate the dotproduct of 2 Matrices",
        "params": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                },
                "description": "Right side of hte dot product",
                "name": "B"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "Array representing theleft side of the dot product",
                "name": "a"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "dot",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                371,
                553
            ],
            "filename": "dot.js",
            "lineno": 13,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002519",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                466,
                509
            ],
            "filename": "dot.js",
            "lineno": 15,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002543",
                "name": "acc",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "acc",
        "longname": "<anonymous>~acc",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @function empty\n * @desc Helper function to generate an empty Matrix\n */",
        "meta": {
            "filename": "empty.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "empty",
        "description": "Helper function to generate an empty Matrix",
        "longname": "empty",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                118,
                147
            ],
            "filename": "empty.js",
            "lineno": 7,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002572",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function generate\n * @desc Generator function for a matrix array, values are set to undefined\n * @param {Number} rows\n * @param {Number} cols\n * @returns {any[][]}\n */",
        "meta": {
            "filename": "generate.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "generate",
        "description": "Generator function for a matrix array, values are set to undefined",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "rows"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "cols"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Array.<any>>"
                    ]
                }
            }
        ],
        "longname": "generate",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                176,
                278
            ],
            "filename": "generate.js",
            "lineno": 8,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002580",
                "name": "module.exports",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "rows",
                    "cols"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function identity\n * @desc Creates an identiy matrix from an empty array\n * @param m {Array}\n * @param idx {Number}\n * @return {Matrix}\n */",
        "meta": {
            "filename": "identity.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "identity",
        "description": "Creates an identiy matrix from an empty array",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "idx"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "identity",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                182,
                249
            ],
            "filename": "identity.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002611",
                "name": "module.exports",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "m",
                    "idx"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function round\n * @param value {Number}\n * @param decimals {Number}\n * @returns {Number}\n */",
        "meta": {
            "filename": "round.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "round",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "decimals"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "longname": "round",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                101,
                220
            ],
            "filename": "round.js",
            "lineno": 7,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002629",
                "name": "module.exports",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value",
                    "decimals"
                ]
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                116,
                220
            ],
            "filename": "round.js",
            "lineno": 7,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002630",
                "name": "round",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value",
                    "decimals"
                ]
            }
        },
        "undocumented": true,
        "name": "round",
        "longname": "round",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * @function solveL\n * @desc solve the xA = b equation for lower triangular\n * @param n\n * @param L\n * @param b\n * @returns {Array}\n */",
        "meta": {
            "filename": "solve.js",
            "lineno": 1,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "solveL",
        "description": "solve the xA = b equation for lower triangular",
        "params": [
            {
                "name": "n"
            },
            {
                "name": "L"
            },
            {
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "longname": "solveL",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                140,
                351
            ],
            "filename": "solve.js",
            "lineno": 9,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002651",
                "name": "solveL",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "n",
                    "L",
                    "b"
                ]
            },
            "vars": {
                "s": "solveL~s",
                "c": "solveL~c",
                "k": "solveL~k",
                "j": "solveL~j",
                "c[undefined]": "solveL~c.undefined]"
            }
        },
        "undocumented": true,
        "name": "solveL",
        "longname": "solveL",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                174,
                179
            ],
            "filename": "solve.js",
            "lineno": 10,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002658",
                "name": "s",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "s",
        "longname": "solveL~s",
        "kind": "member",
        "memberof": "solveL",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                188,
                194
            ],
            "filename": "solve.js",
            "lineno": 11,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002662",
                "name": "c",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "c",
        "longname": "solveL~c",
        "kind": "constant",
        "memberof": "solveL",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                207,
                212
            ],
            "filename": "solve.js",
            "lineno": 13,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002667",
                "name": "k",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "k",
        "longname": "solveL~k",
        "kind": "member",
        "memberof": "solveL",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                241,
                246
            ],
            "filename": "solve.js",
            "lineno": 14,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002678",
                "name": "j",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "j",
        "longname": "solveL~j",
        "kind": "member",
        "memberof": "solveL",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                268,
                298
            ],
            "filename": "solve.js",
            "lineno": 15,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002688",
                "name": "s",
                "type": "BinaryExpression",
                "funcscope": "solveL",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "s",
        "longname": "solveL~s",
        "kind": "member",
        "memberof": "solveL",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                309,
                324
            ],
            "filename": "solve.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002704",
                "name": "c[undefined]",
                "type": "BinaryExpression",
                "funcscope": "solveL",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "solveL~c.undefined]",
        "kind": "member",
        "memberof": "solveL~c",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                329,
                334
            ],
            "filename": "solve.js",
            "lineno": 18,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002714",
                "name": "s",
                "type": "Literal",
                "funcscope": "solveL",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "s",
        "longname": "solveL~s",
        "kind": "member",
        "memberof": "solveL",
        "scope": "inner"
    },
    {
        "comment": "/**\n * @function solveU\n * @desc solve the xA = b equation for upper triangular\n * @param n\n * @param U\n * @param c\n * @param b\n */",
        "meta": {
            "filename": "solve.js",
            "lineno": 23,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "solveU",
        "description": "solve the xA = b equation for upper triangular",
        "params": [
            {
                "name": "n"
            },
            {
                "name": "U"
            },
            {
                "name": "c"
            },
            {
                "name": "b"
            }
        ],
        "longname": "solveU",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                485,
                719
            ],
            "filename": "solve.js",
            "lineno": 31,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002719",
                "name": "solveU",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "n",
                    "U",
                    "c",
                    "b"
                ]
            },
            "vars": {
                "x": "solveU~x",
                "a": "solveU~a",
                "t": "solveU~t",
                "b": "solveU~b",
                "x[undefined]": "solveU~x.undefined]"
            }
        },
        "undocumented": true,
        "name": "solveU",
        "longname": "solveU",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                524,
                530
            ],
            "filename": "solve.js",
            "lineno": 32,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002727",
                "name": "x",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "x",
        "longname": "solveU~x",
        "kind": "constant",
        "memberof": "solveU",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                542,
                551
            ],
            "filename": "solve.js",
            "lineno": 33,
            "columnno": 11,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002732",
                "name": "a",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "a",
        "longname": "solveU~a",
        "kind": "member",
        "memberof": "solveU",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                576,
                581
            ],
            "filename": "solve.js",
            "lineno": 34,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002745",
                "name": "t",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "t",
        "longname": "solveU~t",
        "kind": "member",
        "memberof": "solveU",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                595,
                604
            ],
            "filename": "solve.js",
            "lineno": 35,
            "columnno": 13,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002750",
                "name": "b",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "b",
        "longname": "solveU~b",
        "kind": "member",
        "memberof": "solveU",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                626,
                656
            ],
            "filename": "solve.js",
            "lineno": 36,
            "columnno": 6,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002762",
                "name": "t",
                "type": "BinaryExpression",
                "funcscope": "solveU",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "t",
        "longname": "solveU~t",
        "kind": "member",
        "memberof": "solveU",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                667,
                702
            ],
            "filename": "solve.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002778",
                "name": "x[undefined]",
                "type": "BinaryExpression",
                "funcscope": "solveU",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "solveU~x.undefined]",
        "kind": "member",
        "memberof": "solveU~x",
        "scope": "static"
    },
    {
        "comment": "/**\n * @function solve\n * @desc Helper function for xA = b solver\n * @param n\n * @param L\n * @param U\n * @param b\n */",
        "meta": {
            "filename": "solve.js",
            "lineno": 43,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "solve",
        "description": "Helper function for xA = b solver",
        "params": [
            {
                "name": "n"
            },
            {
                "name": "L"
            },
            {
                "name": "U"
            },
            {
                "name": "b"
            }
        ],
        "longname": "solve",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                839,
                941
            ],
            "filename": "solve.js",
            "lineno": 51,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002797",
                "name": "module.exports",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "n",
                    "L",
                    "U",
                    "b"
                ]
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                854,
                941
            ],
            "filename": "solve.js",
            "lineno": 51,
            "columnno": 15,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002798",
                "name": "solve",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "n",
                    "L",
                    "U",
                    "b"
                ]
            },
            "vars": {
                "c": "solve~c"
            }
        },
        "undocumented": true,
        "name": "solve",
        "longname": "solve",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                892,
                911
            ],
            "filename": "solve.js",
            "lineno": 52,
            "columnno": 8,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002806",
                "name": "c",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "c",
        "longname": "solve~c",
        "kind": "constant",
        "memberof": "solve",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * @function transpose\n * @desc Transposes a array of arrays using the Matrix.map function\n * @param m {Array}\n * @param idx {Number}\n * @return {Matrix}\n */",
        "meta": {
            "filename": "transpose.js",
            "lineno": 4,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {}
        },
        "kind": "function",
        "name": "transpose",
        "description": "Transposes a array of arrays using the Matrix.map function",
        "params": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "name": "idx"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Matrix"
                    ]
                }
            }
        ],
        "longname": "transpose",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                233,
                326
            ],
            "filename": "transpose.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/Volumes/BigOne/github/funMatrix/src/util",
            "code": {
                "id": "astnode100002830",
                "name": "module.exports",
                "type": "CallExpression"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/Volumes/BigOne/github/funMatrix/src/matrix.js",
            "/Volumes/BigOne/github/funMatrix/src/util/addMatrix.js",
            "/Volumes/BigOne/github/funMatrix/src/util/addScalar.js",
            "/Volumes/BigOne/github/funMatrix/src/util/concat.js",
            "/Volumes/BigOne/github/funMatrix/src/util/dot.js",
            "/Volumes/BigOne/github/funMatrix/src/util/empty.js",
            "/Volumes/BigOne/github/funMatrix/src/util/generate.js",
            "/Volumes/BigOne/github/funMatrix/src/util/identity.js",
            "/Volumes/BigOne/github/funMatrix/src/util/round.js",
            "/Volumes/BigOne/github/funMatrix/src/util/solve.js",
            "/Volumes/BigOne/github/funMatrix/src/util/transpose.js"
        ]
    }
]
